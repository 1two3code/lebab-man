{"version":3,"sources":["pacman/Maze.ts"],"names":["pacman","pacman.Maze","pacman.Maze.constructor","pacman.Maze.TILE_COUNT_HORIZONTAL","pacman.Maze.TILE_COUNT_VERTICAL","pacman.Maze.TILE_DOT_BIG","pacman.Maze.TILE_DOT_SMALL","pacman.Maze._getTileAt","pacman.Maze.render","pacman.Maze._renderScoresHeaders","pacman.Maze.reset"],"mappings":"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","file":"pacman/Maze.js","sourcesContent":["module pacman {\r\n  'use strict';\r\n\r\n  export class Maze {\r\n\r\n    private _data: number[][];\r\n    private _mazeCanvas: HTMLCanvasElement;\r\n    private _eatenDotCount: number;\r\n    private _dotCount: number;\r\n\r\n    constructor(mazeInfo: any) {\r\n      this._data = [];\r\n      this.reset(mazeInfo);\r\n    }\r\n\r\n    static get TILE_COUNT_HORIZONTAL(): number {\r\n      return 28;\r\n    }\r\n\r\n    static get TILE_COUNT_VERTICAL(): number {\r\n      return 32;\r\n    }\r\n\r\n    static get TILE_DOT_BIG(): number {\r\n      return 0xfe;\r\n    }\r\n\r\n    static get TILE_DOT_SMALL(): number {\r\n      return 0xff;\r\n    }\r\n\r\n    /**\r\n     * Returns the tile at the specified location.\r\n     *\r\n     * @param {int} row The row to check.\r\n     * @param {int} col The column to check.\r\n     * @return {int} The row data.\r\n     */\r\n    private _getTileAt(row: number, col: number): number {\r\n      // Forgive bounds errors in case the user is going through the tunnel.\r\n      if (col < 0 || col >= Maze.TILE_COUNT_HORIZONTAL) {\r\n         return -1;\r\n      }\r\n      if (row < 0 || row >= Maze.TILE_COUNT_VERTICAL) {\r\n         return -1;\r\n      }\r\n      return this._data[row][col] & 0xff; // Remove internally-used high bits\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n\r\n      // Draw all static content\r\n      ctx.drawImage(this._mazeCanvas, 0, 0);\r\n\r\n      var TILE_SIZE = 8;\r\n\r\n      // Draw the dots\r\n      ctx.fillStyle = '#ffffff';\r\n      for (var row = 0; row < Maze.TILE_COUNT_VERTICAL; row++) {\r\n\r\n         var y = row * TILE_SIZE + (2 * TILE_SIZE);\r\n\r\n         for (var col = 0; col < Maze.TILE_COUNT_HORIZONTAL; col++) {\r\n\r\n            var tile = this._getTileAt(row, col);\r\n            var x = col * TILE_SIZE;\r\n\r\n            if (tile === Maze.TILE_DOT_SMALL) {\r\n               game.drawSmallDot(x + 3, y + 2);\r\n            }\r\n            else if (tile === Maze.TILE_DOT_BIG) {\r\n               game.drawBigDot(x, y);\r\n            }\r\n         }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Note this should really be somewhere else, but since we're painting the\r\n     * maze as one single image, we might as well do this type of static text\r\n     * while we're at it.\r\n     */\r\n    private _renderScoresHeaders(ctx: CanvasRenderingContext2D) {\r\n       game.drawString(16, 0, '1UP', ctx);\r\n       game.drawString(67, 0, 'HIGH SCORE', ctx);\r\n    }\r\n\r\n    reset(mazeInfo: any) {\r\n       'use strict';\r\n\r\n       var TILE_SIZE = 8;\r\n\r\n       // Load map data\r\n       var self = this;\r\n       mazeInfo.forEach(function(rowData: number[]) {\r\n          self._data.push(rowData);\r\n       });\r\n\r\n       var mapTiles = game.assets.get('mapTiles');\r\n\r\n       // Create an image for the maze\r\n       var mazeY = 2 * TILE_SIZE;\r\n       this._mazeCanvas = gtp.ImageUtils.createCanvas(game.getWidth(), game.getHeight());\r\n       var mazeCtx = this._mazeCanvas.getContext('2d');\r\n       var walkableCount = 0;\r\n       this._eatenDotCount = 0;\r\n       this._dotCount = 0;\r\n\r\n       mazeCtx.fillStyle = '#000000';\r\n       mazeCtx.fillRect(0, 0, this._mazeCanvas.width, this._mazeCanvas.height);\r\n\r\n       this._renderScoresHeaders(mazeCtx);\r\n\r\n       // Render each tile from the map data\r\n       for (var row = 0; row < this._data.length; row++) {\r\n\r\n          var rowData = this._data[row];\r\n\r\n          for (var col = 0; col < rowData.length; col++) {\r\n\r\n             var tile = rowData[col];\r\n             if (tile === 0 || tile >= 0xf0) {\r\n                walkableCount++;\r\n             }\r\n\r\n             switch (tile) {\r\n\r\n                case Maze.TILE_DOT_SMALL:\r\n                case Maze.TILE_DOT_BIG:\r\n                   this._dotCount++;\r\n                   break;\r\n\r\n                default:\r\n                   tile--;\r\n                   var dx = col * TILE_SIZE;\r\n                   var dy = mazeY + row * TILE_SIZE;\r\n                   mapTiles.drawByIndex(mazeCtx, dx, dy, tile);\r\n                   break;\r\n             }\r\n          }\r\n       }\r\n\r\n       // TODO\r\n //      if (!this._nodeCache) {\r\n //         this._nodeCache = new NodeCache(walkableCount);\r\n //      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}