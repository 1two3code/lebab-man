{"version":3,"sources":["pacman/Maze.ts"],"names":["pacman","pacman.Maze","pacman.Maze.constructor","pacman.Maze.checkForDot","pacman.Maze._constructPath","pacman.Maze.FRUIT_DOT_COUNT","pacman.Maze._getNextColumn","pacman.Maze.getPathBreadthFirst","pacman.Maze._getPreviousColumn","pacman.Maze.TILE_COUNT_HORIZONTAL","pacman.Maze.TILE_COUNT_VERTICAL","pacman.Maze.TILE_DOT_BIG","pacman.Maze.TILE_DOT_SMALL","pacman.Maze._getTileAt","pacman.Maze.isClearShotColumn","pacman.Maze.isClearShotRow","pacman.Maze.isWalkable","pacman.Maze.render","pacman.Maze._renderScoresHeaders","pacman.Maze.reset"],"mappings":"AAAA,IAAO,MAAM,CAiZZ;AAjZD,WAAO,MAAM,EAAC,CAAC;IACbA,YAAYA,CAACA;IAEbA,IAAIA,UAAUA,GAAaA,CAAEA,EAAEA,EAAEA,EAAEA,CAAEA,CAACA;IAEtCA;QAiBEC,cAAYA,QAAaA;YATzBC,WAAMA,GAAeA,EAAEA,CAACA;YACxBA,SAAIA,GAAeA,EAAEA,CAACA;YACtBA,aAAQA,GAAaA,IAAIA,eAAQA,EAAEA,CAACA;YAQlCA,IAAIA,CAACA,KAAKA,GAAGA,EAAEA,CAACA;YAChBA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,CAACA,CAACA;QACvBA,CAACA;QAEDD;;;;;;;;WAQEA;QACHA,0BAAWA,GAAXA,UAAYA,GAAWA,EAAEA,GAAWA;YAEnCE,IAAIA,KAAKA,GAAWA,CAACA,CAACA;YACtBA,IAAIA,IAAIA,GAAWA,IAAIA,CAACA,UAAUA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;YAE7CA,EAAEA,CAACA,CAACA,IAAIA,IAAIA,IAAIA,CAACA,CAACA,CAACA;gBAClBA,IAAIA,CAACA,cAAcA,EAAEA,CAACA;gBACtBA,EAAEA,CAACA,CAACA,IAAIA,KAAKA,IAAIA,CAACA,CAACA,CAACA;oBACnBA,IAAIA,CAACA,cAAcA,EAAEA,CAACA;gBACvBA,CAACA;gBACDA,IAAIA,CAACA,cAAcA,EAAEA,CAACA;gBACtBA,IAAIA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA;gBACzBA,KAAKA,GAAGA,UAAUA,CAACA,IAAIA,GAACA,IAAIA,CAACA,CAACA;gBAC9BA,EAAEA,CAACA,CAACA,IAAIA,CAACA,cAAcA,KAAKA,IAAIA,CAACA,eAAeA,CAACA,CAACA,CAACA;oBAClDA,IAAIA,CAACA,QAAQA,EAAEA,CAACA;gBACjBA,CAACA;gBACDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,cAAcA,KAAKA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA;oBAC5CA,IAAIA,CAACA,aAAaA,EAAEA,CAACA;gBACtBA,CAACA;YACFA,CAACA;YAEDA,MAAMA,CAACA,KAAKA,CAACA;QACdA,CAACA;QAEAF;;;;;;;;WAQEA;QACYA,mBAAcA,GAA7BA,UAA8BA,IAAcA;YAC3CG;;;;;;;cAOEA;YACAA,IAAIA,IAAIA,GAAaA,IAAIA,CAACA;YAC5BA,OAAOA,IAAIA,CAACA,MAAMA,EAAEA,CAACA;gBACpBA,IAAIA,GAAGA,IAAIA,CAACA;gBACZA,IAAIA,GAAGA,IAAIA,CAACA,MAAMA,CAACA;YACpBA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QACbA,CAACA;QAOAH,sBAAWA,uBAAeA;YAL1BA;;;;eAIGA;iBACHA;gBACEI,MAAMA,CAACA,EAAEA,CAACA;YACZA,CAACA;;;WAAAJ;QAEDA;;;;;;;WAOEA;QACYA,mBAAcA,GAA7BA,UAA8BA,GAAWA;YACxCK,EAAEA,CAACA,CAACA,EAAEA,GAAGA,KAAKA,IAAIA,CAACA,qBAAqBA,CAACA,CAACA,CAACA;gBAC1CA,GAAGA,GAAGA,CAACA,CAACA;YACTA,CAACA;YACDA,MAAMA,CAACA,GAAGA,CAACA;QACZA,CAACA;QAEAL,kCAAmBA,GAAnBA,UAAoBA,OAAeA,EAAEA,OAAeA,EAAEA,KAAaA,EAC/DA,KAAaA;YAEfM,IAAIA,IAAIA,GAASA,IAAIA,CAACA;YACtBA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,UAASA,IAAcA;gBACvC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;YACzC,CAAC,CAACA,CAACA;YACHA,IAAIA,CAACA,MAAMA,CAACA,OAAOA,CAACA,UAASA,IAAcA;gBACzC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;YACzC,CAAC,CAACA,CAACA;YAEHA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,GAAGA,CAACA,CAACA;YACrBA,IAAIA,CAACA,MAAMA,CAACA,MAAMA,GAAGA,CAACA,CAACA;YACvBA,IAAIA,CAACA,QAAQA,CAACA,GAAGA,CAACA,KAAKA,EAAEA,KAAKA,EAAEA,IAAIA,CAACA,CAACA;YACtCA,IAAIA,IAAIA,GAAaA,IAAIA,CAACA,UAAUA,CAACA,SAASA,EAAEA,CAACA;YAEjDA,yCAAyCA;YACzCA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,eAAQA,CAACA,OAAOA,EAAEA,OAAOA,CAACA,CAACA,CAACA;YAC/CA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,OAAOA,CAACA,IAAIA,KAAKA,CAACA;YAEtCA,OAAOA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,GAAGA,CAACA,EAAEA,CAACA;gBAE5BA,IAAIA,IAAIA,GAAaA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,EAAEA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;oBAC/BA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,IAAIA,IAAIA,CAACA,CAACA,mCAAmCA;oBAC3EA,MAAMA,CAACA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,CAACA,CAACA;gBACnCA,CAACA;gBAEDA,IAAIA,CAACA,CAACA;oBAEJA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;oBAEvBA,iCAAiCA;oBACjCA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,CAACA,EAAEA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;wBAC5CA,mCAAmCA;wBACnCA,iEAAiEA;wBACjEA,wBAAwBA;wBACxBA,GAAGA;wBACHA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,GAAGA,KAAKA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;4BACvDA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,IAAIA,KAAKA,CAACA;4BAC5CA,IAAIA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,CAACA,EAAEA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;4BACvCA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;4BACrBA,IAAIA,GAAGA,IAAIA,CAACA,UAAUA,CAACA,SAASA,EAAEA,CAACA;wBACrCA,CAACA;oBACHA,CAACA;oBAEDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,CAACA,EAAEA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;wBAC5CA,mCAAmCA;wBACnCA,iEAAiEA;wBACjEA,wBAAwBA;wBACxBA,GAAGA;wBACHA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,GAAGA,KAAKA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;4BACvDA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,IAAIA,KAAKA,CAACA;4BAC5CA,IAAIA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,CAACA,EAAEA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;4BACvCA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;4BACrBA,IAAIA,GAAGA,IAAIA,CAACA,UAAUA,CAACA,SAASA,EAAEA,CAACA;wBACrCA,CAACA;oBACHA,CAACA;oBAEDA,IAAIA,GAAGA,GAAWA,IAAIA,CAACA,kBAAkBA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;oBACpDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA;wBACnCA,0BAA0BA;wBAC1BA,iEAAiEA;wBACjEA,wBAAwBA;wBACxBA,GAAGA;wBACHA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,KAAKA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;4BAC9CA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,IAAIA,KAAKA,CAACA;4BACnCA,IAAIA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;4BAC9BA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;4BACrBA,IAAIA,GAAGA,IAAIA,CAACA,UAAUA,CAACA,SAASA,EAAEA,CAACA;wBACrCA,CAACA;oBACHA,CAACA;oBAEDA,GAAGA,GAAGA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;oBACpCA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA;wBACnCA,0BAA0BA;wBAC1BA,iEAAiEA;wBACjEA,wBAAwBA;wBACxBA,GAAGA;wBACHA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,KAAKA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;4BAC9CA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,IAAIA,KAAKA,CAACA;4BACnCA,IAAIA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;4BAC9BA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;4BACrBA,IAAIA,GAAGA,IAAIA,CAACA,UAAUA,CAACA,SAASA,EAAEA,CAACA;wBACrCA,CAACA;oBACHA,CAACA;gBAGHA,CAACA;YACHA,CAACA;YAEDA,sCAAsCA;YACtCA,MAAMA,sBAAsBA,GAAGA,OAAOA,GAAGA,IAAIA,EAAEA,OAAOA,GAAGA,QAAQA;gBAC7DA,KAAKA,GAAGA,IAAIA,GAAGA,KAAKA,GAAGA,GAAGA,CAACA;QACjCA,CAACA;QAEDN;;;;;;;WAOEA;QACYA,uBAAkBA,GAAjCA,UAAkCA,GAAWA;YAC5CO,EAAEA,CAACA,CAACA,GAAGA,KAAKA,CAACA,CAACA,CAACA,CAACA;gBACfA,GAAGA,GAAGA,IAAIA,CAACA,qBAAqBA,CAACA;YAClCA,CAACA;YACDA,MAAMA,CAACA,GAAGA,GAAGA,CAACA,CAACA;QAChBA,CAACA;QAEAP,sBAAWA,6BAAqBA;iBAAhCA;gBACEQ,MAAMA,CAACA,EAAEA,CAACA;YACZA,CAACA;;;WAAAR;QAEDA,sBAAWA,2BAAmBA;iBAA9BA;gBACES,MAAMA,CAACA,EAAEA,CAACA;YACZA,CAACA;;;WAAAT;QAEDA,sBAAWA,oBAAYA;iBAAvBA;gBACEU,MAAMA,CAACA,IAAIA,CAACA;YACdA,CAACA;;;WAAAV;QAEDA,sBAAWA,sBAAcA;iBAAzBA;gBACEW,MAAMA,CAACA,IAAIA,CAACA;YACdA,CAACA;;;WAAAX;QAEDA;;;;;;WAMGA;QACKA,yBAAUA,GAAlBA,UAAmBA,GAAWA,EAAEA,GAAWA;YACzCY,sEAAsEA;YACtEA,EAAEA,CAACA,CAACA,GAAGA,GAAGA,CAACA,IAAIA,GAAGA,IAAIA,IAAIA,CAACA,qBAAqBA,CAACA,CAACA,CAACA;gBAChDA,MAAMA,CAACA,CAACA,CAACA,CAACA;YACbA,CAACA;YACDA,EAAEA,CAACA,CAACA,GAAGA,GAAGA,CAACA,IAAIA,GAAGA,IAAIA,IAAIA,CAACA,mBAAmBA,CAACA,CAACA,CAACA;gBAC9CA,MAAMA,CAACA,CAACA,CAACA,CAACA;YACbA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,IAAIA,CAACA,CAACA,mCAAmCA;QACzEA,CAACA;QAEDZ,gCAAiBA,GAAjBA,UAAkBA,GAAWA,EAAEA,IAAYA,EAAEA,IAAYA;YACzDa,IAAIA,KAAKA,GAAWA,IAAIA,CAACA,GAAGA,CAACA,IAAIA,EAAEA,IAAIA,CAACA,CAACA;YACzCA,IAAIA,GAAGA,GAAWA,IAAIA,CAACA,GAAGA,CAACA,IAAIA,EAAEA,IAAIA,CAACA,CAACA;YACvCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAWA,KAAKA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,GAAGA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBAC9CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA;oBAC9BA,MAAMA,CAACA,KAAKA,CAACA;gBACdA,CAACA;YACFA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QACbA,CAACA;QAEDb,6BAAcA,GAAdA,UAAeA,GAAWA,EAAEA,IAAYA,EAAEA,IAAYA;YACrDc,IAAIA,KAAKA,GAAWA,IAAIA,CAACA,GAAGA,CAACA,IAAIA,EAAEA,IAAIA,CAACA,CAACA;YACzCA,IAAIA,GAAGA,GAAWA,IAAIA,CAACA,GAAGA,CAACA,IAAIA,EAAEA,IAAIA,CAACA,CAACA;YACvCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAWA,KAAKA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,GAAGA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBAC9CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA;oBAC9BA,MAAMA,CAACA,KAAKA,CAACA;gBACdA,CAACA;YACFA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QACbA,CAACA;QAEAd;;;;;WAKEA;QACFA,yBAAUA,GAAVA,UAAWA,GAAWA,EAAEA,GAAWA;YACjCe,IAAIA,IAAIA,GAAWA,IAAIA,CAACA,UAAUA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;YAC7CA,MAAMA,CAACA,IAAIA,KAAKA,CAACA,IAAIA,IAAIA,IAAIA,IAAIA,CAACA;QACpCA,CAACA;QAEDf,qBAAMA,GAANA,UAAOA,GAA6BA;YAElCgB,0BAA0BA;YAC1BA,GAAGA,CAACA,SAASA,CAACA,IAAIA,CAACA,WAAWA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YAEtCA,IAAIA,SAASA,GAAGA,CAACA,CAACA;YAElBA,gBAAgBA;YAChBA,GAAGA,CAACA,SAASA,GAAGA,SAASA,CAACA;YAC1BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,GAAGA,CAACA,EAAEA,GAAGA,GAAGA,IAAIA,CAACA,mBAAmBA,EAAEA,GAAGA,EAAEA,EAAEA,CAACA;gBAEvDA,IAAIA,CAACA,GAAGA,GAAGA,GAAGA,SAASA,GAAGA,CAACA,CAACA,GAAGA,SAASA,CAACA,CAACA;gBAE1CA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,GAAGA,CAACA,EAAEA,GAAGA,GAAGA,IAAIA,CAACA,qBAAqBA,EAAEA,GAAGA,EAAEA,EAAEA,CAACA;oBAEzDA,IAAIA,IAAIA,GAAGA,IAAIA,CAACA,UAAUA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;oBACrCA,IAAIA,CAACA,GAAGA,GAAGA,GAAGA,SAASA,CAACA;oBAExBA,EAAEA,CAACA,CAACA,IAAIA,KAAKA,IAAIA,CAACA,cAAcA,CAACA,CAACA,CAACA;wBAChCA,IAAIA,CAACA,YAAYA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,CAACA,CAACA,CAACA;oBACnCA,CAACA;oBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,KAAKA,IAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA;wBACnCA,IAAIA,CAACA,UAAUA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;oBACzBA,CAACA;gBACJA,CAACA;YACJA,CAACA;QACHA,CAACA;QAEDhB;;;;WAIGA;QACKA,mCAAoBA,GAA5BA,UAA6BA,GAA6BA;YACvDiB,IAAIA,CAACA,UAAUA,CAACA,EAAEA,EAAEA,CAACA,EAAEA,KAAKA,EAAEA,GAAGA,CAACA,CAACA;YACnCA,IAAIA,CAACA,UAAUA,CAACA,EAAEA,EAAEA,CAACA,EAAEA,YAAYA,EAAEA,GAAGA,CAACA,CAACA;QAC7CA,CAACA;QAEDjB;;;;WAIGA;QACHA,oBAAKA,GAALA,UAAMA,QAAqBA;YACxBkB,YAAYA,CAACA;YAEbA,IAAIA,SAASA,GAAWA,CAACA,CAACA;YAC1BA,IAAIA,SAASA,GAAYA,IAAIA,CAACA,KAAKA,IAAIA,IAAIA,CAACA;YAE5CA,2BAA2BA;YAC3BA,EAAEA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA;gBACbA,IAAIA,CAACA,aAAaA,GAAGA,QAAQA,CAACA;YAChCA,CAACA;YACDA,IAAIA,CAACA,CAACA;gBACJA,QAAQA,GAAGA,IAAIA,CAACA,aAAaA,CAACA;YAChCA,CAACA;YACDA,IAAIA,IAAIA,GAASA,IAAIA,CAACA;YACtBA,QAAQA,CAACA,OAAOA,CAACA,UAASA,OAAiBA;gBACxC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5B,CAAC,CAACA,CAACA;YAEHA,EAAEA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA;gBAEdA,IAAIA,QAAQA,GAAGA,IAAIA,CAACA,MAAMA,CAACA,GAAGA,CAACA,UAAUA,CAACA,CAACA;gBAE3CA,+BAA+BA;gBAC/BA,IAAIA,KAAKA,GAAGA,CAACA,GAAGA,SAASA,CAACA;gBAC1BA,IAAIA,CAACA,WAAWA,GAAGA,GAAGA,CAACA,UAAUA,CAACA,YAAYA,CAACA,IAAIA,CAACA,QAAQA,EAAEA,EAAEA,IAAIA,CAACA,SAASA,EAAEA,CAACA,CAACA;gBAClFA,IAAIA,OAAOA,GAAGA,IAAIA,CAACA,WAAWA,CAACA,UAAUA,CAACA,IAAIA,CAACA,CAACA;gBAChDA,IAAIA,aAAaA,GAAGA,CAACA,CAACA;gBACtBA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA;gBACxBA,IAAIA,CAACA,SAASA,GAAGA,CAACA,CAACA;gBAEnBA,OAAOA,CAACA,SAASA,GAAGA,SAASA,CAACA;gBAC9BA,OAAOA,CAACA,QAAQA,CAACA,CAACA,EAAEA,CAACA,EAAEA,IAAIA,CAACA,WAAWA,CAACA,KAAKA,EAAEA,IAAIA,CAACA,WAAWA,CAACA,MAAMA,CAACA,CAACA;gBAExEA,IAAIA,CAACA,oBAAoBA,CAACA,OAAOA,CAACA,CAACA;gBAEnCA,qCAAqCA;gBACrCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,GAAGA,CAACA,EAAEA,GAAGA,GAAGA,IAAIA,CAACA,KAAKA,CAACA,MAAMA,EAAEA,GAAGA,EAAEA,EAAEA,CAACA;oBAEhDA,IAAIA,OAAOA,GAAGA,IAAIA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA;oBAE9BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,GAAGA,CAACA,EAAEA,GAAGA,GAAGA,OAAOA,CAACA,MAAMA,EAAEA,GAAGA,EAAEA,EAAEA,CAACA;wBAE7CA,IAAIA,IAAIA,GAAGA,OAAOA,CAACA,GAAGA,CAACA,CAACA;wBACxBA,EAAEA,CAACA,CAACA,IAAIA,KAAKA,CAACA,IAAIA,IAAIA,IAAIA,IAAIA,CAACA,CAACA,CAACA;4BAC9BA,aAAaA,EAAEA,CAACA;wBACnBA,CAACA;wBAEDA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA;4BAEZA,KAAKA,IAAIA,CAACA,cAAcA,CAACA;4BACzBA,KAAKA,IAAIA,CAACA,YAAYA;gCACnBA,IAAIA,CAACA,SAASA,EAAEA,CAACA;gCACjBA,KAAKA,CAACA;4BAETA;gCACGA,IAAIA,EAAEA,CAACA;gCACPA,IAAIA,EAAEA,GAAGA,GAAGA,GAAGA,SAASA,CAACA;gCACzBA,IAAIA,EAAEA,GAAGA,KAAKA,GAAGA,GAAGA,GAAGA,SAASA,CAACA;gCACjCA,QAAQA,CAACA,WAAWA,CAACA,OAAOA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,IAAIA,CAACA,CAACA;gCAC5CA,KAAKA,CAACA;wBACZA,CAACA;oBACJA,CAACA;gBACJA,CAACA;gBAEFA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA,CAACA;oBACpBA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,GAAGA,CAACA,IAAIA,CAACA,eAAQA,EAAEA,aAAaA,CAACA,CAACA;gBAC3DA,CAACA;YACHA,CAACA;QACHA,CAACA;QACHlB,WAACA;IAADA,CA3YAD,AA2YCC,IAAAD;IA3YYA,WAAIA,OA2YhBA,CAAAA;AACHA,CAACA,EAjZM,MAAM,KAAN,MAAM,QAiZZ","file":"pacman/Maze.js","sourcesContent":["module pacman {\r\n  'use strict';\r\n\r\n  let DOT_POINTS: number[] = [ 50, 10 ];\r\n\r\n  export class Maze {\r\n\r\n    private _data: number[][];\r\n    private _mazeCanvas: HTMLCanvasElement;\r\n    private _eatenDotCount: number;\r\n    private _dotCount: number;\r\n    private _origMazeInfo: number[][];\r\n\r\n    closed: MazeNode[] = [];\r\n    open: MazeNode[] = [];\r\n    goalNode: MazeNode = new MazeNode();\r\n\r\n    /**\r\n     * A cache of nodes to speed up search operations.\r\n     */\r\n    private _nodeCache: gtp.Pool<MazeNode>;\r\n\r\n    constructor(mazeInfo: any) {\r\n      this._data = [];\r\n      this.reset(mazeInfo);\r\n    }\r\n\r\n    /**\r\n  \t * Checks whether a dot is in the maze at the specified location.  If\r\n  \t * it is, it is removed.  If a dot is removed, the points the player should\r\n  \t * receive is returned.\r\n  \t *\r\n  \t * @param {number} row The row to check.\r\n  \t * @param {number} col The column to check.\r\n  \t * @return {number} The amount to add to the player's score, if any.\r\n  \t */\r\n  \tcheckForDot(row: number, col: number): number {\r\n\r\n  \t\tlet score: number = 0;\r\n  \t\tlet tile: number = this._getTileAt(row, col);\r\n\r\n  \t\tif (tile >= 0xfe) { // Small dot or big dot.\r\n  \t\t\tgame.playChompSound();\r\n  \t\t\tif (tile === 0xfe) {\r\n  \t\t\t\tgame.makeGhostsBlue();\r\n  \t\t\t}\r\n  \t\t\tthis._eatenDotCount++;\r\n  \t\t\tthis._data[row][col] = 0;\r\n  \t\t\tscore = DOT_POINTS[tile-0xfe];\r\n  \t\t\tif (this._eatenDotCount === Maze.FRUIT_DOT_COUNT) {\r\n  \t\t\t\tgame.addFruit();\r\n  \t\t\t}\r\n  \t\t\tif (this._eatenDotCount === this._dotCount) {\r\n  \t\t\t\tgame.loadNextLevel();\r\n  \t\t\t}\r\n  \t\t}\r\n\r\n  \t\treturn score;\r\n  \t}\r\n\r\n    /**\r\n  \t * Returns the next node an object should move to if they want to take\r\n  \t * the shortest route possible to the destination.\r\n  \t *\r\n  \t * @param node The linked list of nodes in the path to the destination,\r\n  \t *        in reverse order.  This list should have been obtained from a\r\n  \t *        breadth-first search.\r\n  \t * @return The first node to move to.\r\n  \t */\r\n  \tprivate static _constructPath(node: MazeNode): MazeNode/*MazeNode[]*/ {\r\n  \t\t/*\r\n  \t\tLinkedList<Node> path = new LinkedList<Node>();\r\n  \t\twhile (node.parent!=null) {\r\n  \t\t\tpath.addFirst(node);\r\n  \t\t\tnode = node.parent;\r\n  \t\t}\r\n  \t\treturn path;\r\n  \t\t*/\r\n      let prev: MazeNode = null;\r\n  \t\twhile (node.parent) {\r\n  \t\t\tprev = node;\r\n  \t\t\tnode = node.parent;\r\n  \t\t}\r\n  \t\treturn prev;\r\n  \t}\r\n\r\n    /**\r\n     * Returns the number of dots Pacman must eat before a fruit appears.\r\n     *\r\n     * @return {number} The number of dots Pacman must eat.\r\n     */\r\n    static get FRUIT_DOT_COUNT(): number {\r\n      return 64;\r\n    }\r\n\r\n    /**\r\n  \t * Returns the \"next\" column, taking wrapping (from the tunnels) into\r\n  \t * account.\r\n  \t *\r\n  \t * @param {number} col The current column.\r\n  \t * @return {number} The column to the \"right\" of <code>col</code>.\r\n  \t * @see getPreviousColumn\r\n  \t */\r\n  \tprivate static _getNextColumn(col: number): number {\r\n  \t\tif (++col === Maze.TILE_COUNT_HORIZONTAL) {\r\n  \t\t\tcol = 0;\r\n  \t\t}\r\n  \t\treturn col;\r\n  \t}\r\n\r\n    getPathBreadthFirst(fromRow: number, fromCol: number, toRow: number,\r\n        toCol: number): MazeNode {\r\n\r\n      let self: Maze = this;\r\n      this.open.forEach(function(node: MazeNode) {\r\n        self._data[node.row][node.col] &= 0xff;\r\n      });\r\n      this.closed.forEach(function(node: MazeNode) {\r\n        self._data[node.row][node.col] &= 0xff;\r\n      });\r\n\r\n      this.open.length = 0;\r\n      this.closed.length = 0;\r\n      this.goalNode.set(toRow, toCol, null);\r\n      let temp: MazeNode = this._nodeCache.borrowObj();\r\n\r\n      //path.add(computeInt(fromRow, fromCol));\r\n      this.open.push(new MazeNode(fromRow, fromCol));\r\n      this._data[fromRow][fromCol] |= 0x100;\r\n\r\n      while (this.open.length > 0) {\r\n\r\n        let node: MazeNode = this.open.splice(0, 1)[0];\r\n        if (node.equals(this.goalNode)) {\r\n          this._data[node.row][node.col] &= 0xff; // Won't be in open or closed lists\r\n          return Maze._constructPath(node);\r\n        }\r\n\r\n        else {\r\n\r\n          this.closed.push(node);\r\n\r\n          // Add neighbors to the open list\r\n          if (this.isWalkable(node.row - 1, node.col)) {\r\n            //temp.set(node.row - 1, node.col);\r\n            //if (!this.closed.contains(temp) && !this.open.contains(temp)) {\r\n            //   temp.parent = node;\r\n            //}\r\n            if ((this._data[node.row - 1][node.col] & 0x100) === 0) {\r\n              this._data[node.row - 1][node.col] |= 0x100;\r\n              temp.set(node.row - 1, node.col, node);\r\n              this.open.push(temp);\r\n              temp = this._nodeCache.borrowObj();\r\n            }\r\n          }\r\n\r\n          if (this.isWalkable(node.row + 1, node.col)) {\r\n            //temp.set(node.row + 1, node.col);\r\n            //if (!this.closed.contains(temp) && !this.open.contains(temp)) {\r\n            //   temp.parent = node;\r\n            //}\r\n            if ((this._data[node.row + 1][node.col] & 0x100) === 0) {\r\n              this._data[node.row + 1][node.col] |= 0x100;\r\n              temp.set(node.row + 1, node.col, node);\r\n              this.open.push(temp);\r\n              temp = this._nodeCache.borrowObj();\r\n            }\r\n          }\r\n\r\n          let col: number = Maze._getPreviousColumn(node.col);\r\n          if (this.isWalkable(node.row, col)) {\r\n            //temp.set(node.row, col);\r\n            //if (!this.closed.contains(temp) && !this.open.contains(temp)) {\r\n            //   temp.parent = node;\r\n            //}\r\n            if ((this._data[node.row][col] & 0x100) === 0) {\r\n              this._data[node.row][col] |= 0x100;\r\n              temp.set(node.row, col, node);\r\n              this.open.push(temp);\r\n              temp = this._nodeCache.borrowObj();\r\n            }\r\n          }\r\n\r\n          col = Maze._getNextColumn(node.col);\r\n          if (this.isWalkable(node.row, col)) {\r\n            //temp.set(node.row, col);\r\n            //if (!this.closed.contains(temp) && !this.open.contains(temp)) {\r\n            //   temp.parent = node;\r\n            //}\r\n            if ((this._data[node.row][col] & 0x100) === 0) {\r\n              this._data[node.row][col] |= 0x100;\r\n              temp.set(node.row, col, node);\r\n              this.open.push(temp);\r\n              temp = this._nodeCache.borrowObj();\r\n            }\r\n          }\r\n\r\n\r\n        }\r\n      }\r\n\r\n      // No path found - should never happen\r\n      throw 'No path found from (' + fromRow + ', ', fromCol + ') to (' +\r\n          toRow + ', ' + toCol + ')';\r\n    }\r\n\r\n    /**\r\n  \t * Returns the \"previous\" column, taking wrapping (from the tunnels) into\r\n  \t * account.\r\n  \t *\r\n  \t * @param {number} col The current column.\r\n  \t * @return {number} The column to the \"left\" of <code>col</code>.\r\n     * @see getNextColumn\r\n  \t */\r\n  \tprivate static _getPreviousColumn(col: number): number {\r\n  \t\tif (col === 0) {\r\n  \t\t\tcol = Maze.TILE_COUNT_HORIZONTAL;\r\n  \t\t}\r\n  \t\treturn col - 1;\r\n  \t}\r\n\r\n    static get TILE_COUNT_HORIZONTAL(): number {\r\n      return 28;\r\n    }\r\n\r\n    static get TILE_COUNT_VERTICAL(): number {\r\n      return 32;\r\n    }\r\n\r\n    static get TILE_DOT_BIG(): number {\r\n      return 0xfe;\r\n    }\r\n\r\n    static get TILE_DOT_SMALL(): number {\r\n      return 0xff;\r\n    }\r\n\r\n    /**\r\n     * Returns the tile at the specified location.\r\n     *\r\n     * @param {int} row The row to check.\r\n     * @param {int} col The column to check.\r\n     * @return {int} The row data.\r\n     */\r\n    private _getTileAt(row: number, col: number): number {\r\n      // Forgive bounds errors in case the user is going through the tunnel.\r\n      if (col < 0 || col >= Maze.TILE_COUNT_HORIZONTAL) {\r\n         return -1;\r\n      }\r\n      if (row < 0 || row >= Maze.TILE_COUNT_VERTICAL) {\r\n         return -1;\r\n      }\r\n      return this._data[row][col] & 0xff; // Remove internally-used high bits\r\n    }\r\n\r\n    isClearShotColumn(col: number, row1: number, row2: number): boolean {\r\n  \t\tlet start: number = Math.min(row1, row2);\r\n  \t\tlet end: number = Math.max(row1, row2);\r\n  \t\tfor (let i: number = start + 1; i < end; i++) {\r\n  \t\t\tif (!this.isWalkable(i, col)) {\r\n  \t\t\t\treturn false;\r\n  \t\t\t}\r\n  \t\t}\r\n  \t\treturn true;\r\n  \t}\r\n\r\n  \tisClearShotRow(row: number, col1: number, col2: number): boolean {\r\n  \t\tlet start: number = Math.min(col1, col2);\r\n  \t\tlet end: number = Math.max(col1, col2);\r\n  \t\tfor (let i: number = start + 1; i < end; i++) {\r\n  \t\t\tif (!this.isWalkable(row, i)) {\r\n  \t\t\t\treturn false;\r\n  \t\t\t}\r\n  \t\t}\r\n  \t\treturn true;\r\n  \t}\r\n\r\n    /**\r\n  \t * Returns whether a sprite can move onto the specified tile.\r\n  \t * @param {number} row The row to check.\r\n  \t * @param {number} col The column to check.\r\n  \t * @return {boolean} Whether a sprite can walk ono the specified tile.\r\n  \t */\r\n    isWalkable(row: number, col: number): boolean {\r\n      let tile: number = this._getTileAt(row, col);\r\n      return tile === 0 || tile >= 0xf0;\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n\r\n      // Draw all static content\r\n      ctx.drawImage(this._mazeCanvas, 0, 0);\r\n\r\n      let TILE_SIZE = 8;\r\n\r\n      // Draw the dots\r\n      ctx.fillStyle = '#ffffff';\r\n      for (let row = 0; row < Maze.TILE_COUNT_VERTICAL; row++) {\r\n\r\n         let y = row * TILE_SIZE + (2 * TILE_SIZE);\r\n\r\n         for (let col = 0; col < Maze.TILE_COUNT_HORIZONTAL; col++) {\r\n\r\n            let tile = this._getTileAt(row, col);\r\n            let x = col * TILE_SIZE;\r\n\r\n            if (tile === Maze.TILE_DOT_SMALL) {\r\n               game.drawSmallDot(x + 3, y + 2);\r\n            }\r\n            else if (tile === Maze.TILE_DOT_BIG) {\r\n               game.drawBigDot(x, y);\r\n            }\r\n         }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Note this should really be somewhere else, but since we're painting the\r\n     * maze as one single image, we might as well do this type of static text\r\n     * while we're at it.\r\n     */\r\n    private _renderScoresHeaders(ctx: CanvasRenderingContext2D) {\r\n       game.drawString(16, 0, '1UP', ctx);\r\n       game.drawString(67, 0, 'HIGH SCORE', ctx);\r\n    }\r\n\r\n    /**\r\n     * Resets this maze.\r\n     * @param mazeInfo The raw data for this maze.  If this is undefined, it\r\n     *        is assumed that we are simply resetting to load a new level.\r\n     */\r\n    reset(mazeInfo?: number[][]) {\r\n       'use strict';\r\n\r\n       let TILE_SIZE: number = 8;\r\n       let firstTime: boolean = this._data != null;\r\n\r\n       // Load (or reset) map data\r\n       if (mazeInfo) {\r\n         this._origMazeInfo = mazeInfo;\r\n       }\r\n       else {\r\n         mazeInfo = this._origMazeInfo;\r\n       }\r\n       let self: Maze = this;\r\n       mazeInfo.forEach(function(rowData: number[]) {\r\n          self._data.push(rowData);\r\n       });\r\n\r\n       if (firstTime) {\r\n\r\n         let mapTiles = game.assets.get('mapTiles');\r\n\r\n         // Create an image for the maze\r\n         let mazeY = 2 * TILE_SIZE;\r\n         this._mazeCanvas = gtp.ImageUtils.createCanvas(game.getWidth(), game.getHeight());\r\n         let mazeCtx = this._mazeCanvas.getContext('2d');\r\n         let walkableCount = 0;\r\n         this._eatenDotCount = 0;\r\n         this._dotCount = 0;\r\n\r\n         mazeCtx.fillStyle = '#000000';\r\n         mazeCtx.fillRect(0, 0, this._mazeCanvas.width, this._mazeCanvas.height);\r\n\r\n         this._renderScoresHeaders(mazeCtx);\r\n\r\n         // Render each tile from the map data\r\n         for (let row = 0; row < this._data.length; row++) {\r\n\r\n            let rowData = this._data[row];\r\n\r\n            for (let col = 0; col < rowData.length; col++) {\r\n\r\n               let tile = rowData[col];\r\n               if (tile === 0 || tile >= 0xf0) {\r\n                  walkableCount++;\r\n               }\r\n\r\n               switch (tile) {\r\n\r\n                  case Maze.TILE_DOT_SMALL:\r\n                  case Maze.TILE_DOT_BIG:\r\n                     this._dotCount++;\r\n                     break;\r\n\r\n                  default:\r\n                     tile--;\r\n                     let dx = col * TILE_SIZE;\r\n                     let dy = mazeY + row * TILE_SIZE;\r\n                     mapTiles.drawByIndex(mazeCtx, dx, dy, tile);\r\n                     break;\r\n               }\r\n            }\r\n         }\r\n\r\n        if (!this._nodeCache) {\r\n           this._nodeCache = new gtp.Pool(MazeNode, walkableCount);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}