{"version":3,"sources":["pacman/Maze.ts"],"names":["pacman","pacman.Maze","pacman.Maze.constructor","pacman.Maze._cloneObjectOfPrimitives","pacman.Maze.checkForDot","pacman.Maze._constructPath","pacman.Maze.FRUIT_DOT_COUNT","pacman.Maze._getNextColumn","pacman.Maze.getPathBreadthFirst","pacman.Maze._getPreviousColumn","pacman.Maze.TILE_COUNT_HORIZONTAL","pacman.Maze.TILE_COUNT_VERTICAL","pacman.Maze.TILE_DOT_BIG","pacman.Maze.TILE_DOT_SMALL","pacman.Maze._getTileAt","pacman.Maze.isClearShotColumn","pacman.Maze.isClearShotRow","pacman.Maze.isWalkable","pacman.Maze.render","pacman.Maze.reset"],"mappings":"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","file":"pacman/Maze.js","sourcesContent":["module pacman {\r\n    'use strict';\r\n\r\n    let DOT_POINTS: number[] = [ 50, 10 ];\r\n\r\n    export class Maze {\r\n\r\n        private _data: number[][];\r\n        private _mazeCanvas: HTMLCanvasElement;\r\n        private _eatenDotCount: number;\r\n        private _dotCount: number;\r\n        private _origMazeInfo: number[][];\r\n\r\n        closed: MazeNode[] = [];\r\n        open: MazeNode[] = [];\r\n        goalNode: MazeNode = new MazeNode();\r\n\r\n        /**\r\n         * A cache of nodes to speed up search operations.\r\n         */\r\n        private _nodeCache: gtp.Pool<MazeNode>;\r\n\r\n        constructor(mazeInfo: number[][]) {\r\n            this._data = [];\r\n            this.reset(mazeInfo);\r\n        }\r\n\r\n        private static _cloneObjectOfPrimitives(obj: any): any {\r\n            return JSON.parse(JSON.stringify(obj));\r\n        }\r\n\r\n        /**\r\n         * Checks whether a dot is in the maze at the specified location.  If\r\n         * it is, it is removed.  If a dot is removed, the points the player should\r\n         * receive is returned.\r\n         *\r\n         * @param {number} row The row to check.\r\n         * @param {number} col The column to check.\r\n         * @return {number} The amount to add to the player's score, if any.\r\n         */\r\n        checkForDot(row: number, col: number): number {\r\n\r\n            let score: number = 0;\r\n            let tile: number = this._getTileAt(row, col);\r\n\r\n            if (tile >= 0xfe) { // Small dot or big dot.\r\n                game.playChompSound();\r\n                if (tile === 0xfe) {\r\n                    game.makeGhostsBlue();\r\n                }\r\n                this._eatenDotCount++;\r\n                this._data[row][col] = 0;\r\n                score = DOT_POINTS[tile - 0xfe];\r\n                if (this._eatenDotCount === Maze.FRUIT_DOT_COUNT) {\r\n                    game.addFruit();\r\n                }\r\n                if (this._eatenDotCount === this._dotCount) {\r\n                    game.loadNextLevel();\r\n                }\r\n            }\r\n\r\n            return score;\r\n        }\r\n\r\n        /**\r\n         * Returns the next node an object should move to if they want to take\r\n         * the shortest route possible to the destination.\r\n         *\r\n         * @param node The linked list of nodes in the path to the destination,\r\n         *        in reverse order.  This list should have been obtained from a\r\n         *        breadth-first search.\r\n         * @return The first node to move to.\r\n         */\r\n        private static _constructPath(node: MazeNode): MazeNode/*MazeNode[]*/ {\r\n            /*\r\n             LinkedList<Node> path = new LinkedList<Node>();\r\n             while (node.parent!=null) {\r\n             path.addFirst(node);\r\n             node = node.parent;\r\n             }\r\n             return path;\r\n             */\r\n            let prev: MazeNode = null;\r\n            while (node.parent) {\r\n                prev = node;\r\n                node = node.parent;\r\n            }\r\n            return prev;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of dots Pacman must eat before a fruit appears.\r\n         *\r\n         * @return {number} The number of dots Pacman must eat.\r\n         */\r\n        static get FRUIT_DOT_COUNT(): number {\r\n            return 64;\r\n        }\r\n\r\n        /**\r\n         * Returns the \"next\" column, taking wrapping (from the tunnels) into\r\n         * account.\r\n         *\r\n         * @param {number} col The current column.\r\n         * @return {number} The column to the \"right\" of <code>col</code>.\r\n         * @see getPreviousColumn\r\n         */\r\n        private static _getNextColumn(col: number): number {\r\n            if (++col === Maze.TILE_COUNT_HORIZONTAL) {\r\n                col = 0;\r\n            }\r\n            return col;\r\n        }\r\n\r\n        getPathBreadthFirst(fromRow: number, fromCol: number, toRow: number,\r\n                            toCol: number): MazeNode {\r\n\r\n            let self: Maze = this;\r\n            this.open.forEach((node: MazeNode) => {\r\n                self._data[node.row][node.col] &= 0xff;\r\n            });\r\n            this.closed.forEach((node: MazeNode) => {\r\n                self._data[node.row][node.col] &= 0xff;\r\n            });\r\n\r\n            this.open.length = 0;\r\n            this.closed.length = 0;\r\n            this.goalNode.set(toRow, toCol, null);\r\n            let temp: MazeNode = this._nodeCache.borrowObj();\r\n\r\n            //path.add(computeInt(fromRow, fromCol));\r\n            this.open.push(new MazeNode(fromRow, fromCol));\r\n            this._data[fromRow][fromCol] |= 0x100;\r\n\r\n            while (this.open.length > 0) {\r\n\r\n                let node: MazeNode = this.open.splice(0, 1)[0];\r\n                if (node.equals(this.goalNode)) {\r\n                    this._data[node.row][node.col] &= 0xff; // Won't be in open or closed lists\r\n                    return Maze._constructPath(node);\r\n                }\r\n\r\n                else {\r\n\r\n                    this.closed.push(node);\r\n\r\n                    // Add neighbors to the open list\r\n                    if (this.isWalkable(node.row - 1, node.col)) {\r\n                        //temp.set(node.row - 1, node.col);\r\n                        //if (!this.closed.contains(temp) && !this.open.contains(temp)) {\r\n                        //   temp.parent = node;\r\n                        //}\r\n                        if ((this._data[node.row - 1][node.col] & 0x100) === 0) {\r\n                            this._data[node.row - 1][node.col] |= 0x100;\r\n                            temp.set(node.row - 1, node.col, node);\r\n                            this.open.push(temp);\r\n                            temp = this._nodeCache.borrowObj();\r\n                        }\r\n                    }\r\n\r\n                    if (this.isWalkable(node.row + 1, node.col)) {\r\n                        //temp.set(node.row + 1, node.col);\r\n                        //if (!this.closed.contains(temp) && !this.open.contains(temp)) {\r\n                        //   temp.parent = node;\r\n                        //}\r\n                        if ((this._data[node.row + 1][node.col] & 0x100) === 0) {\r\n                            this._data[node.row + 1][node.col] |= 0x100;\r\n                            temp.set(node.row + 1, node.col, node);\r\n                            this.open.push(temp);\r\n                            temp = this._nodeCache.borrowObj();\r\n                        }\r\n                    }\r\n\r\n                    let col: number = Maze._getPreviousColumn(node.col);\r\n                    if (this.isWalkable(node.row, col)) {\r\n                        //temp.set(node.row, col);\r\n                        //if (!this.closed.contains(temp) && !this.open.contains(temp)) {\r\n                        //   temp.parent = node;\r\n                        //}\r\n                        if ((this._data[node.row][col] & 0x100) === 0) {\r\n                            this._data[node.row][col] |= 0x100;\r\n                            temp.set(node.row, col, node);\r\n                            this.open.push(temp);\r\n                            temp = this._nodeCache.borrowObj();\r\n                        }\r\n                    }\r\n\r\n                    col = Maze._getNextColumn(node.col);\r\n                    if (this.isWalkable(node.row, col)) {\r\n                        //temp.set(node.row, col);\r\n                        //if (!this.closed.contains(temp) && !this.open.contains(temp)) {\r\n                        //   temp.parent = node;\r\n                        //}\r\n                        if ((this._data[node.row][col] & 0x100) === 0) {\r\n                            this._data[node.row][col] |= 0x100;\r\n                            temp.set(node.row, col, node);\r\n                            this.open.push(temp);\r\n                            temp = this._nodeCache.borrowObj();\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n            // No path found - should never happen\r\n            throw new Error('No path found from (' + fromRow + ', ' + fromCol +\r\n                ') to (' + toRow + ', ' + toCol + ')');\r\n        }\r\n\r\n        /**\r\n         * Returns the \"previous\" column, taking wrapping (from the tunnels) into\r\n         * account.\r\n         *\r\n         * @param {number} col The current column.\r\n         * @return {number} The column to the \"left\" of <code>col</code>.\r\n         * @see getNextColumn\r\n         */\r\n        private static _getPreviousColumn(col: number): number {\r\n            if (col === 0) {\r\n                col = Maze.TILE_COUNT_HORIZONTAL;\r\n            }\r\n            return col - 1;\r\n        }\r\n\r\n        static get TILE_COUNT_HORIZONTAL(): number {\r\n            return 28;\r\n        }\r\n\r\n        static get TILE_COUNT_VERTICAL(): number {\r\n            return 32;\r\n        }\r\n\r\n        static get TILE_DOT_BIG(): number {\r\n            return 0xfe;\r\n        }\r\n\r\n        static get TILE_DOT_SMALL(): number {\r\n            return 0xff;\r\n        }\r\n\r\n        /**\r\n         * Returns the tile at the specified location.\r\n         *\r\n         * @param {int} row The row to check.\r\n         * @param {int} col The column to check.\r\n         * @return {int} The row data.\r\n         */\r\n        private _getTileAt(row: number, col: number): number {\r\n            // Forgive bounds errors in case the user is going through the tunnel.\r\n            if (col < 0 || col >= Maze.TILE_COUNT_HORIZONTAL) {\r\n                return -1;\r\n            }\r\n            if (row < 0 || row >= Maze.TILE_COUNT_VERTICAL) {\r\n                return -1;\r\n            }\r\n            return this._data[row][col] & 0xff; // Remove internally-used high bits\r\n        }\r\n\r\n        isClearShotColumn(col: number, row1: number, row2: number): boolean {\r\n            let start: number = Math.min(row1, row2);\r\n            let end: number = Math.max(row1, row2);\r\n            for (let i: number = start + 1; i < end; i++) {\r\n                if (!this.isWalkable(i, col)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        isClearShotRow(row: number, col1: number, col2: number): boolean {\r\n            let start: number = Math.min(col1, col2);\r\n            let end: number = Math.max(col1, col2);\r\n            for (let i: number = start + 1; i < end; i++) {\r\n                if (!this.isWalkable(row, i)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Returns whether a sprite can move onto the specified tile.\r\n         * @param {number} row The row to check.\r\n         * @param {number} col The column to check.\r\n         * @return {boolean} Whether a sprite can walk ono the specified tile.\r\n         */\r\n        isWalkable(row: number, col: number): boolean {\r\n            let tile: number = this._getTileAt(row, col);\r\n            return tile === 0 || tile >= 0xf0;\r\n        }\r\n\r\n        render(ctx: CanvasRenderingContext2D) {\r\n\r\n            // Draw all static content\r\n            ctx.drawImage(this._mazeCanvas, 0, 0);\r\n\r\n            let TILE_SIZE: number = 8;\r\n\r\n            // Draw the dots\r\n            ctx.fillStyle = '#ffffff';\r\n            for (let row: number = 0; row < Maze.TILE_COUNT_VERTICAL; row++) {\r\n\r\n                let y: number = row * TILE_SIZE + (2 * TILE_SIZE);\r\n\r\n                for (let col: number = 0; col < Maze.TILE_COUNT_HORIZONTAL; col++) {\r\n\r\n                    let tile: number = this._getTileAt(row, col);\r\n                    let x: number = col * TILE_SIZE;\r\n\r\n                    if (tile === Maze.TILE_DOT_SMALL) {\r\n                        game.drawSmallDot(x + 3, y + 2);\r\n                    }\r\n                    else if (tile === Maze.TILE_DOT_BIG) {\r\n                        game.drawBigDot(x, y);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets this maze.\r\n         * @param mazeInfo The raw data for this maze.  If this is undefined, it\r\n         *        is assumed that we are simply resetting to load a new level.\r\n         */\r\n        reset(mazeInfo?: number[][]) {\r\n            'use strict';\r\n\r\n            let TILE_SIZE: number = PacmanGame.TILE_SIZE;\r\n            let firstTime: boolean = mazeInfo != null;\r\n\r\n            // Load (or reset) map data\r\n            if (firstTime) {\r\n                // First time through, we cache a pristine view of our maze data\r\n                this._origMazeInfo = Maze._cloneObjectOfPrimitives(mazeInfo);\r\n            }\r\n            // Next, we create a working copy of our maze data, since we mutate it\r\n            this._data = Maze._cloneObjectOfPrimitives(this._origMazeInfo);\r\n            this._eatenDotCount = 0;\r\n\r\n            if (firstTime) {\r\n\r\n                const mapTiles: gtp.SpriteSheet = game.assets.get('mapTiles');\r\n\r\n                // Create an image for the maze\r\n                const mazeY: number = 2 * TILE_SIZE;\r\n                this._mazeCanvas = gtp.ImageUtils.createCanvas(game.getWidth(), game.getHeight());\r\n                const mazeCtx: CanvasRenderingContext2D = this._mazeCanvas.getContext('2d');\r\n                let walkableCount: number = 0;\r\n                this._dotCount = 0;\r\n\r\n                mazeCtx.fillStyle = '#000000';\r\n                mazeCtx.fillRect(0, 0, this._mazeCanvas.width, this._mazeCanvas.height);\r\n\r\n                game.drawScoresHeaders(mazeCtx);\r\n\r\n                // Render each tile from the map data\r\n                for (let row: number = 0; row < this._data.length; row++) {\r\n\r\n                    const rowData: number[] = this._data[row];\r\n\r\n                    for (let col: number = 0; col < rowData.length; col++) {\r\n\r\n                        let tile: number = rowData[col];\r\n                        if (tile === 0 || tile >= 0xf0) {\r\n                            walkableCount++;\r\n                        }\r\n\r\n                        switch (tile) {\r\n\r\n                            case Maze.TILE_DOT_SMALL:\r\n                            case Maze.TILE_DOT_BIG:\r\n                                this._dotCount++;\r\n                                break;\r\n\r\n                            default:\r\n                                tile--;\r\n                                if (tile > -1) {\r\n                                    let dx: number = col * TILE_SIZE;\r\n                                    let dy: number = mazeY + row * TILE_SIZE;\r\n                                    mapTiles.drawByIndex(mazeCtx, dx, dy, tile);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!this._nodeCache) {\r\n                    this._nodeCache = new gtp.Pool(MazeNode, walkableCount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}