{"version":3,"sources":["../app/pacman/_BaseState.ts"],"names":[],"mappings":"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","file":"_BaseState.js","sourcesContent":["module pacman {\r\n    'use strict';\r\n\r\n    export class _BaseState extends gtp.State {\r\n\r\n        private _lastConfigKeypressTime: number;\r\n        protected _lastSpriteFrameTime: number;\r\n\r\n        /**\r\n         * Functionality common amongst all states in this game.\r\n         * @constructor\r\n         */\r\n        constructor(args?: gtp.Game | gtp.BaseStateArgs) {\r\n            super(args);\r\n            this._lastConfigKeypressTime = gtp.Utils.timestamp();\r\n            this._lastSpriteFrameTime = 0;\r\n        }\r\n\r\n        static get INPUT_REPEAT_MILLIS(): number {\r\n            return 200;\r\n        }\r\n\r\n        protected handleDefaultKeys() {\r\n\r\n            // We use a timestamp instead of game.playTime since game.playTime gets\r\n            // reset, which messes us up\r\n            const time: number = gtp.Utils.timestamp(); // this.game.playTime;\r\n            const im: gtp.InputManager = this.game.inputManager;\r\n\r\n            if (time > (this._lastConfigKeypressTime + _BaseState.INPUT_REPEAT_MILLIS)) {\r\n\r\n                // Audio stuff\r\n                if (im.isKeyDown(gtp.Keys.KEY_M, true)) {\r\n                    game.toggleMuted();\r\n                    this._lastConfigKeypressTime = time;\r\n                }\r\n\r\n                // Debugging actions\r\n                if (im.isKeyDown(gtp.Keys.KEY_Z)) {\r\n\r\n                    // Increase canvas size\r\n                    if (im.isKeyDown(gtp.Keys.KEY_P, true)) {\r\n                        const style: CSSStyleDeclaration = game.canvas.style;\r\n                        if (!style.width) {\r\n                            style.width = game.canvas.width + 'px';\r\n                        }\r\n                        if (!style.height) {\r\n                            style.height = game.canvas.height + 'px';\r\n                        }\r\n                        style.width = (parseInt(style.width.substring(0, style.width.length - 2), 10) + 1) + 'px';\r\n                        style.height = (parseInt(style.height.substring(0, style.height.length - 2), 10) + 1) + 'px';\r\n                        game.setStatusMessage('Canvas size now: (' + style.width + ', ' + style.height + ')');\r\n                        this._lastConfigKeypressTime = time;\r\n                    }\r\n\r\n                    // Decrease canvas size\r\n                    else if (im.isKeyDown(gtp.Keys.KEY_L, true)) {\r\n                        const style: CSSStyleDeclaration = game.canvas.style;\r\n                        if (!style.width) {\r\n                            style.width = game.canvas.width + 'px';\r\n                        }\r\n                        if (!style.height) {\r\n                            style.height = game.canvas.height + 'px';\r\n                        }\r\n                        style.width = (parseInt(style.width.substring(0, style.width.length - 2), 10) - 1) + 'px';\r\n                        style.height = (parseInt(style.height.substring(0, style.height.length - 2), 10) - 1) + 'px';\r\n                        game.setStatusMessage('Canvas size now: (' + style.width + ', ' + style.height + ')');\r\n                        this._lastConfigKeypressTime = time;\r\n                    }\r\n\r\n                    else if (im.isKeyDown(gtp.Keys.KEY_G, true)) {\r\n                        game.toggleGodMode();\r\n                        this._lastConfigKeypressTime = time;\r\n                    }\r\n\r\n                    else if (im.isKeyDown(gtp.Keys.KEY_S, true)) {\r\n                        game.toggleStretchMode();\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        protected _updateSpriteFrames() {\r\n            const time: number = game.playTime;\r\n            // Don't update sprite frame at each rendered frame; that would be\r\n            // too fast\r\n            if (time >= this._lastSpriteFrameTime + 100) {\r\n                this._lastSpriteFrameTime = time;\r\n                game.updateSpriteFrames();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"]}