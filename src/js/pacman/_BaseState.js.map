{"version":3,"sources":["pacman/_BaseState.ts"],"names":["pacman","pacman._BaseState","pacman._BaseState.constructor","pacman._BaseState.INPUT_REPEAT_MILLIS","pacman._BaseState.handleDefaultKeys","pacman._BaseState._updateSpriteFrames"],"mappings":"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","file":"pacman/_BaseState.js","sourcesContent":["module pacman {\r\n    'use strict';\r\n\r\n    export class _BaseState extends gtp.State {\r\n\r\n        private _lastConfigKeypressTime: number;\r\n        protected _lastSpriteFrameTime: number;\r\n\r\n        /**\r\n         * Functionality common amongst all states in this game.\r\n         * @constructor\r\n         */\r\n        constructor(args?: gtp.Game | gtp.BaseStateArgs) {\r\n            super(args);\r\n            this._lastConfigKeypressTime = gtp.Utils.timestamp();\r\n            this._lastSpriteFrameTime = 0;\r\n        }\r\n\r\n        static get INPUT_REPEAT_MILLIS(): number {\r\n            return 200;\r\n        }\r\n\r\n        protected handleDefaultKeys() {\r\n\r\n            // We use a timestamp instead of game.playTime since game.playTime gets\r\n            // reset, which messes us up\r\n            const time: number = gtp.Utils.timestamp(); // this.game.playTime;\r\n            const im: gtp.InputManager = this.game.inputManager;\r\n\r\n            if (time > (this._lastConfigKeypressTime + _BaseState.INPUT_REPEAT_MILLIS)) {\r\n\r\n                // Audio stuff\r\n                if (im.isKeyDown(gtp.Keys.KEY_M, true)) {\r\n                    game.toggleMuted();\r\n                    this._lastConfigKeypressTime = time;\r\n                }\r\n\r\n                // Debugging actions\r\n                if (im.isKeyDown(gtp.Keys.KEY_Z)) {\r\n\r\n                    // Increase canvas size\r\n                    if (im.isKeyDown(gtp.Keys.KEY_P, true)) {\r\n                        const style: CSSStyleDeclaration = game.canvas.style;\r\n                        if (!style.width) {\r\n                            style.width = game.canvas.width + 'px';\r\n                        }\r\n                        if (!style.height) {\r\n                            style.height = game.canvas.height + 'px';\r\n                        }\r\n                        style.width = (parseInt(style.width.substring(0, style.width.length - 2), 10) + 1) + 'px';\r\n                        style.height = (parseInt(style.height.substring(0, style.height.length - 2), 10) + 1) + 'px';\r\n                        game.setStatusMessage('Canvas size now: (' + style.width + ', ' + style.height + ')');\r\n                        this._lastConfigKeypressTime = time;\r\n                    }\r\n\r\n                    // Decrease canvas size\r\n                    else if (im.isKeyDown(gtp.Keys.KEY_L, true)) {\r\n                        const style: CSSStyleDeclaration = game.canvas.style;\r\n                        if (!style.width) {\r\n                            style.width = game.canvas.width + 'px';\r\n                        }\r\n                        if (!style.height) {\r\n                            style.height = game.canvas.height + 'px';\r\n                        }\r\n                        style.width = (parseInt(style.width.substring(0, style.width.length - 2), 10) - 1) + 'px';\r\n                        style.height = (parseInt(style.height.substring(0, style.height.length - 2), 10) - 1) + 'px';\r\n                        game.setStatusMessage('Canvas size now: (' + style.width + ', ' + style.height + ')');\r\n                        this._lastConfigKeypressTime = time;\r\n                    }\r\n\r\n                    else if (im.isKeyDown(gtp.Keys.KEY_G, true)) {\r\n                        game.toggleGodMode();\r\n                        this._lastConfigKeypressTime = time;\r\n                    }\r\n\r\n                    else if (im.isKeyDown(gtp.Keys.KEY_S, true)) {\r\n                        game.toggleStretchMode();\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        protected _updateSpriteFrames() {\r\n            const time: number = game.playTime;\r\n            // Don't update sprite frame at each rendered frame; that would be\r\n            // too fast\r\n            if (time >= this._lastSpriteFrameTime + 100) {\r\n                this._lastSpriteFrameTime = time;\r\n                game.updateSpriteFrames();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}