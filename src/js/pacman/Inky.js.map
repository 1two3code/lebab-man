{"version":3,"sources":["pacman/Inky.ts"],"names":["pacman","pacman.Inky","pacman.Inky.constructor","pacman.Inky.reset","pacman.Inky.updatePositionChasingPacman"],"mappings":"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","file":"pacman/Inky.js","sourcesContent":["module pacman {\r\n    'use strict';\r\n\r\n    /**\r\n     * Inky, the blue ghost.  Inky is \"bashful\" and only changes after Pacman if\r\n     * Blinky (the reg ghost) is close by.\r\n     */\r\n    export class Inky extends Ghost {\r\n\r\n        /**\r\n         * Constructor.\r\n         */\r\n        constructor(game: PacmanGame) {\r\n            super(game, 1 * PacmanGame.SPRITE_SIZE, 8);\r\n        }\r\n\r\n        reset() {\r\n            super.reset();\r\n            this.direction = Direction.SOUTH;\r\n            this.setLocation(12 * PacmanGame.TILE_SIZE - PacmanGame.TILE_SIZE / 2 - 4,\r\n                15 * PacmanGame.TILE_SIZE - PacmanGame.TILE_SIZE / 2);\r\n            this.motionState = MotionState.IN_BOX;\r\n        }\r\n\r\n        updatePositionChasingPacman(maze: Maze) {\r\n\r\n            let moveAmount: number = this.moveAmount;\r\n\r\n            if (this.atIntersection(maze)) { // If the ghost can turn...\r\n\r\n                // Get Blinky's proximity\r\n                let row: number = this.row;\r\n                let col: number = this.column;\r\n                let blinky: Ghost = game.getGhost(0);\r\n                let blinkyRow: number = blinky.row;\r\n                let blinkyCol: number = blinky.column;\r\n                let distSq: number = (blinkyCol - col) * (blinkyCol - col) +\r\n                    (blinkyRow - row) * (blinkyRow - row);\r\n                //console.log(distSq);\r\n\r\n                // If we're close enough to Blinky, chase Pacman.\r\n                if (distSq <= 35) {\r\n                    let toRow: number = game.pacman.row;\r\n                    let toCol: number = game.pacman.column;\r\n                    let node: MazeNode = maze.getPathBreadthFirst(row, col, toRow, toCol);\r\n                    //console.log(\"... \" + node + \" (\" + row + \",\" + col + \")\");\r\n                    if (node == null) { // Happens only with \"God Mode\" enabled.\r\n                        this.changeDirectionFallback(maze);\r\n                    }\r\n                    else if (node.col < col) {\r\n                        this.direction = Direction.WEST;\r\n                        this.incX(-moveAmount);\r\n                    }\r\n                    else if (node.col > col) {\r\n                        this.direction = Direction.EAST;\r\n                        this.incX(moveAmount);\r\n                    }\r\n                    else if (node.row < row) {\r\n                        this.direction = Direction.NORTH;\r\n                        this.incY(-moveAmount);\r\n                    }\r\n                    else if (node.row > row) {\r\n                        this.direction = Direction.SOUTH;\r\n                        this.incY(moveAmount);\r\n                    }\r\n                }\r\n\r\n                // If Blinky is too far away, just pick a random direction.\r\n                else {\r\n                    this.changeDirectionFallback(maze);\r\n                }\r\n\r\n            }\r\n\r\n            // Not at an intersection, so we should be able to keep going\r\n            // in our current direction.\r\n            else {\r\n                this.continueInCurrentDirection(moveAmount);\r\n            }\r\n\r\n            // Switch over to scatter mode if it's time to do so.\r\n            if (game.playTime >= this.startScatteringTime) {\r\n                this.motionState = MotionState.SCATTERING;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}