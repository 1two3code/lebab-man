{"version":3,"sources":["pacman/Clyde.ts"],"names":["pacman","pacman.Clyde","pacman.Clyde.constructor","pacman.Clyde.reset","pacman.Clyde.updatePositionChasingPacman"],"mappings":";;;;;AAAA,IAAO,MAAM,CAmDZ;AAnDD,WAAO,MAAM,EAAC,CAAC;IACbA,YAAYA,CAACA;IAEXA;;OAEGA;IACFA;QAA2BC,yBAAKA;QAEhCA;;WAEGA;QACHA,eAAYA,IAAgBA;YAC3BC,kBAAMA,IAAIA,EAAEA,CAACA,GAAGA,iBAAUA,CAACA,WAAWA,EAAEA,EAAEA,CAACA,CAACA;QAC7CA,CAACA;QAEDD,qBAAKA,GAALA;YACCE,gBAAKA,CAACA,KAAKA,WAAEA,CAACA;YACdA,IAAIA,CAACA,SAASA,GAAGA,gBAASA,CAACA,KAAKA,CAACA;YAC/BA,IAAIA,CAACA,WAAWA,CAACA,EAAEA,GAAGA,iBAAUA,CAACA,SAASA,GAAGA,iBAAUA,CAACA,SAASA,GAAGA,CAACA,GAAGA,CAACA,EACvEA,EAAEA,GAAGA,iBAAUA,CAACA,SAASA,GAAGA,iBAAUA,CAACA,SAASA,GAAGA,CAACA,CAACA,CAACA;YAC1DA,IAAIA,CAACA,WAAWA,GAAGA,kBAAWA,CAACA,MAAMA,CAACA;QACvCA,CAACA;QAEHF;;;;WAIGA;QACHA,2CAA2BA,GAA3BA,UAA4BA,IAAUA;YAEnCG,IAAMA,UAAUA,GAAWA,IAAIA,CAACA,UAAUA,CAACA;YAE3CA,gDAAgDA;YAClDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/BA,IAAIA,CAACA,uBAAuBA,CAACA,IAAIA,CAACA,CAACA;YACpCA,CAACA;YAIDA,IAAIA,CAACA,CAACA;gBACLA,IAAIA,CAACA,0BAA0BA,CAACA,UAAUA,CAACA,CAACA;YAC7CA,CAACA;YAEDA,qDAAqDA;YACrDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,IAAIA,IAAIA,CAACA,mBAAmBA,CAACA,CAACA,CAACA;gBAC5CA,IAAIA,CAACA,WAAWA,GAAGA,kBAAWA,CAACA,UAAUA,CAACA;YAC9CA,CAACA;QAEFA,CAACA;QAEFH,YAACA;IAADA,CA5CGD,AA4CFC,EA5C6BD,YAAKA,EA4ClCA;IA5CeA,YAAKA,QA4CpBA,CAAAA;AACHA,CAACA,EAnDM,MAAM,KAAN,MAAM,QAmDZ","file":"pacman/Clyde.js","sourcesContent":["module pacman {\r\n  'use strict';\r\n\r\n    /**\r\n    * Clyde, the orange ghost.\r\n     */\r\n     export class Clyde extends Ghost {\r\n\r\n    \t/**\r\n    \t * Constructor.\r\n    \t */\r\n    \tconstructor(game: PacmanGame) {\r\n    \t\tsuper(game, 3 * PacmanGame.SPRITE_SIZE, 14);\r\n    \t}\r\n\r\n    \treset() {\r\n    \t\tsuper.reset();\r\n    \t\tthis.direction = Direction.SOUTH;\r\n        this.setLocation(16 * PacmanGame.TILE_SIZE - PacmanGame.TILE_SIZE / 2 - 4,\r\n          15 * PacmanGame.TILE_SIZE - PacmanGame.TILE_SIZE / 2);\r\n    \t\tthis.motionState = MotionState.IN_BOX;\r\n    \t}\r\n\r\n  \t/**\r\n  \t * Updates an actor's position.\r\n  \t *\r\n  \t * @param maze The maze in which the actor is moving.\r\n  \t */\r\n  \tupdatePositionChasingPacman(maze: Maze) {\r\n\r\n      const moveAmount: number = this.moveAmount;\r\n\r\n      // Pick a new random direction at intersections.\r\n  \t\tif (this.atIntersection(maze)) {\r\n  \t\t\tthis.changeDirectionFallback(maze);\r\n  \t\t}\r\n\r\n  \t\t// Not at an intersection, so we should be able to keep going\r\n  \t\t// in our current direction.\r\n  \t\telse {\r\n  \t\t\tthis.continueInCurrentDirection(moveAmount);\r\n  \t\t}\r\n\r\n  \t\t// Switch over to scatter mode if it's time to do so.\r\n  \t\tif (game.playTime >= this.startScatteringTime) {\r\n        this.motionState = MotionState.SCATTERING;\r\n  \t\t}\r\n\r\n  \t}\r\n\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}