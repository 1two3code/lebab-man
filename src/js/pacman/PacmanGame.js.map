{"version":3,"sources":["pacman/PacmanGame.ts"],"names":["pacman","pacman.GhostUpdateStrategy","pacman.PacmanGame","pacman.PacmanGame.constructor","pacman.PacmanGame.addFruit","pacman.PacmanGame.checkLoopedSound","pacman.PacmanGame._createGhostArray","pacman.PacmanGame.drawBigDot","pacman.PacmanGame.drawGhosts","pacman.PacmanGame.drawScores","pacman.PacmanGame.drawSmallDot","pacman.PacmanGame.drawSprite","pacman.PacmanGame.drawString","pacman.PacmanGame.EXTRA_LIFE_SCORE","pacman.PacmanGame.level","pacman.PacmanGame.lives","pacman.PacmanGame.PENALTY_BOX_EXIT_X","pacman.PacmanGame.PENALTY_BOX_EXIT_Y","pacman.PacmanGame.SPRITE_SIZE","pacman.PacmanGame.TILE_SIZE","pacman.PacmanGame.increaseLives","pacman.PacmanGame.increaseScore","pacman.PacmanGame.loadNextLevel","pacman.PacmanGame.makeGhostsBlue","pacman.PacmanGame.paintPointsEarned","pacman.PacmanGame.playChompSound","pacman.PacmanGame.resetGhosts","pacman.PacmanGame.setLoopedSound","pacman.PacmanGame.ghostUpdateStrategy","pacman.PacmanGame.startGame","pacman.PacmanGame.startPacmanDying","pacman.PacmanGame.updateSpriteFrames","pacman.PacmanGame.updateSpritePositions"],"mappings":"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","file":"pacman/PacmanGame.js","sourcesContent":["module pacman {\r\n  'use strict';\r\n\r\n  export enum GhostUpdateStrategy {\r\n    UPDATE_ALL, UPDATE_NONE, UPDATE_ONE\r\n  }\r\n\r\n  export class PacmanGame extends gtp.Game {\r\n\r\n    private _highScore: number;\r\n    private _lives: number;\r\n    private _score: number;\r\n    private _level: number;\r\n    private _ghostUpdateStrategy: GhostUpdateStrategy;\r\n    private _chompSound: number;\r\n    pacman: Pacman;\r\n    private _ghosts: Ghost[];\r\n\r\n    /**\r\n  \t * Whether the player has earned an extra life (from achieving a\r\n  \t * certain score).\r\n  \t */\r\n  \tprivate _earnedExtraLife: boolean;\r\n\r\n    /**\r\n  \t * The sound effect currently looping (the background siren, the ghosts\r\n  \t * running away, the ghost eyes running away, etc.).\r\n  \t */\r\n  \tprivate _loopedSoundId: number;\r\n\r\n    private _loopedSoundName: string;\r\n\r\n    /**\r\n  \t * A flag used internally to decide when a ghost changing state should\r\n  \t * also change the background noise (siren, eyes, etc.).\r\n  \t */\r\n  \tprivate _resettingGhostStates: boolean;\r\n\r\n    constructor(args?: any) {\r\n      super(args);\r\n      this._highScore = 0;\r\n      this.pacman = new Pacman();\r\n      this._ghosts = this._createGhostArray();\r\n      this._chompSound = 0;\r\n      this._ghostUpdateStrategy = GhostUpdateStrategy.UPDATE_ALL;\r\n    }\r\n\r\n    addFruit() {\r\n      // TODO\r\n    }\r\n\r\n    /**\r\n  \t * Ensures the background sound effect being played is appropriate for\r\n  \t * the ghosts' current states.\r\n  \t */\r\n  \tcheckLoopedSound() {\r\n\r\n  \t\tif (this._resettingGhostStates) {\r\n  \t\t\treturn;\r\n  \t\t}\r\n\r\n  \t\tlet blue: boolean = false;\r\n\r\n  \t\tfor (let i: number = 0; i < this._ghosts.length; i++) {\r\n  \t\t\tif (this._ghosts[i].isEyes()) {\r\n  \t\t\t\tthis.setLoopedSound(Sounds.EYES_RUNNING);\r\n  \t\t\t\treturn; // \"eye\" noise trumps blue noise.\r\n  \t\t\t}\r\n  \t\t\telse if (this._ghosts[i].isBlue()) {\r\n  \t\t\t\tblue = true;\r\n  \t\t\t}\r\n  \t\t}\r\n\r\n  \t\tthis.setLoopedSound(blue ? Sounds.CHASING_GHOSTS : Sounds.SIREN);\r\n\r\n  \t}\r\n\r\n    /**\r\n  \t * Creates the array of ghosts the game will use.\r\n  \t *\r\n  \t * @return The array of ghosts.\r\n  \t */\r\n  \tprivate _createGhostArray(): Ghost[] {\r\n  \t\tlet ghosts: Ghost[] = [];\r\n  \t\tthis._resettingGhostStates = true;\r\n  \t\tghosts.push(new Blinky(this));\r\n      // ghosts.push(new Pinky());\r\n      // ghosts.push(new Inky());\r\n      // ghosts.push(new Clyde());\r\n  \t\tthis._resettingGhostStates = false;\r\n  \t\treturn ghosts;\r\n  \t}\r\n\r\n    drawBigDot(x: number, y: number) {\r\n      var ms = this.playTime;\r\n      if (ms < 0 || (ms % 500) > 250) {\r\n         var ctx = this.canvas.getContext('2d');\r\n         var sx = 135,\r\n             sy = 38;\r\n         game.assets.get('sprites').drawScaled2(ctx, sx,sy,8,8, x,y,8,8);\r\n      }\r\n    }\r\n\r\n    /**\r\n  \t * Paints all four ghosts in their present location and state.\r\n  \t *\r\n  \t * @param ctx The context with which to paint.\r\n  \t */\r\n  \tdrawGhosts(ctx: CanvasRenderingContext2D) {\r\n  \t\tthis._ghosts.forEach(function(ghost) {\r\n        ghost.paint(ctx);\r\n      });\r\n  \t}\r\n\r\n    drawScores(ctx: CanvasRenderingContext2D) {\r\n\r\n      var scoreStr = this._score.toString();\r\n      var x = 55 - scoreStr.length * 8;\r\n      var y = 10;\r\n      this.drawString(x,y, scoreStr, ctx);\r\n\r\n      scoreStr = this._highScore.toString();\r\n      x = 132 - scoreStr.length * 8;\r\n      this.drawString(x,y, scoreStr, ctx);\r\n    }\r\n\r\n    drawSmallDot(x: number, y: number) {\r\n      var ctx = this.canvas.getContext('2d');\r\n      ctx.fillRect(x, y, 2, 2);\r\n    }\r\n\r\n    drawSprite(dx: number, dy: number, sx: number, sy: number) {\r\n      var image = game.assets.get('sprites');\r\n      var ctx = this.canvas.getContext('2d');\r\n      image.drawScaled2(ctx, sx,sy,16,16, dx,dy,16,16);\r\n    }\r\n\r\n    drawString(x: number, y: number, text: string|number,\r\n        ctx: CanvasRenderingContext2D = game.canvas.getContext('2d')) {\r\n\r\n      var str = text.toString(); // Allow us to pass in stuff like numerics\r\n\r\n      // Note we have a gtp.SpriteSheet, not a gtp.BitmapFont, so our\r\n      // calculation of what sub-image to draw is a little convoluted\r\n      var fontImage = this.assets.get('font');\r\n      var alphaOffs = 'A'.charCodeAt(0);\r\n      var numericOffs = '0'.charCodeAt(0);\r\n      var index: number;\r\n\r\n      for (var i = 0; i < str.length; i++) {\r\n\r\n         var ch = str[i];\r\n         var chCharCode = str.charCodeAt(i);\r\n         if (ch >= 'A' && ch <= 'Z') {\r\n            index = fontImage.colCount + (chCharCode - alphaOffs);\r\n         }\r\n         else if (ch >= '0' && ch <= '9') {\r\n            index = chCharCode - numericOffs;\r\n         }\r\n         else {\r\n            switch (ch) {\r\n               case '-':\r\n                  index = 10;\r\n                  break;\r\n               case '.':\r\n                  index = 11;\r\n                  break;\r\n               case '>':\r\n                  index = 12;\r\n                  break;\r\n               case '@':\r\n                  index = 13;\r\n                  break;\r\n               case '!':\r\n                  index = 14;\r\n                  break;\r\n               default:\r\n                  index = 15; // whitespace\r\n                  break;\r\n            }\r\n         }\r\n         fontImage.drawByIndex(ctx, x, y, index);\r\n         x += 9;//CHAR_WIDTH\r\n      }\r\n    }\r\n\r\n    static get EXTRA_LIFE_SCORE(): number {\r\n      return 10000;\r\n    }\r\n\r\n    get level(): number {\r\n      return this._level;\r\n    }\r\n\r\n    get lives() : number {\r\n      return this._lives;\r\n    }\r\n\r\n    get PENALTY_BOX_EXIT_X(): number {\r\n      return (this.getWidth() - this.SPRITE_SIZE) / 2;\r\n    }\r\n\r\n  \tget PENALTY_BOX_EXIT_Y(): number {\r\n      return 12 * this.TILE_SIZE - this.TILE_SIZE / 2;\r\n    }\r\n\r\n    get SPRITE_SIZE(): number {\r\n      return 16;\r\n    }\r\n\r\n    get TILE_SIZE(): number {\r\n      return 8;\r\n    }\r\n\r\n    increaseLives(amount: number): number {\r\n      return this._lives += amount;\r\n    }\r\n\r\n    increaseScore(amount: number) {\r\n      this._score += amount;\r\n      if (!this._earnedExtraLife && this._score >= PacmanGame.EXTRA_LIFE_SCORE) {\r\n        this.audio.playSound(Sounds.EXTRA_LIFE);\r\n        this.increaseLives(1);\r\n        this._earnedExtraLife = true;\r\n      }\r\n    }\r\n\r\n    loadNextLevel() {\r\n      // TODO\r\n    }\r\n\r\n    makeGhostsBlue() {\r\n      // TODO\r\n    }\r\n\r\n    /**\r\n     * Paints the \"points earned,\" for example, when PacMan eats a ghost or\r\n     * fruit.\r\n     *\r\n     * @param {CanvasContext2D} ctx The graphics context to use.\r\n     * @param {int} ptsIndex The index into the points array.\r\n     * @param {int} dx The x-coordinate at which to draw.\r\n     * @param {int} dy The y-coordinate at which to draw.\r\n     */\r\n    paintPointsEarned(ctx: CanvasRenderingContext2D, ptsIndex: number, dx: number, dy: number) {\r\n          'use strict';\r\n //         var y = 9 * ptsIndex;\r\n //         this._ptsImage.drawScaled2(ctx, 0,y, 17,9, dx,dy, 17,9);\r\n    }\r\n\r\n    /**\r\n     * Plays the next appropriate chomp sound.\r\n     */\r\n    playChompSound() {\r\n      this.audio.playSound(this._chompSound === 0 ?\r\n          Sounds.CHOMP_1 : Sounds.CHOMP_2);\r\n      this._chompSound = (this._chompSound + 1) % 2;\r\n    }\r\n\r\n    resetGhosts() {\r\n\r\n      this._resettingGhostStates = true;\r\n\r\n      // Have each ghost go to one of four random corners while in scatter\r\n      // mode, but ensure each ghost goes to a different corner.\r\n      var corners: gtp.Point[] = [\r\n        new gtp.Point(2, 1),\r\n        new gtp.Point(2, Maze.TILE_COUNT_HORIZONTAL - 2),\r\n        new gtp.Point(Maze.TILE_COUNT_VERTICAL - 2, 1),\r\n        new gtp.Point(Maze.TILE_COUNT_VERTICAL - 2, Maze.TILE_COUNT_HORIZONTAL - 2)\r\n      ];\r\n      var cornerSeed: number = gtp.Utils.randomInt(4);\r\n\r\n      for (var i: number = 0; i < this._ghosts.length; i++) {\r\n        this._ghosts[i].reset();\r\n        this._ghosts[i].setCorner(corners[(cornerSeed + i) % 4]);\r\n      }\r\n\r\n      this._resettingGhostStates = false;\r\n    }\r\n\r\n    /**\r\n     * Starts looping a sound effect.\r\n     * @param {string} sound The sound effect to loop.\r\n     */\r\n    setLoopedSound(sound: string) {\r\n      if (sound !== this._loopedSoundName) {\r\n        if (this._loopedSoundId != null) {\r\n          this.audio.stopSound(this._loopedSoundId);\r\n        }\r\n        this._loopedSoundName = sound;\r\n        if (sound != null) {\r\n          this._loopedSoundId = game.audio.playSound(sound, true);\r\n        }\r\n        else {\r\n          this._loopedSoundId = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n  \t * Sets whether to update none, one, or all of the ghosts' positions\r\n  \t * each frame.  This is used for debugging purposes.\r\n  \t * @param state How many ghosts to update.\r\n  \t */\r\n  \tset ghostUpdateStrategy(strategy: GhostUpdateStrategy) {\r\n  \t\tthis._ghostUpdateStrategy = strategy;\r\n  \t}\r\n\r\n    startGame(level: number) {\r\n\r\n        this._lives = 3;\r\n        this._score = 0;\r\n        this._level = 0;\r\n\r\n        var levelData = game.assets.get('levels')[level];\r\n        var mazeState = new pacman.MazeState(levelData);\r\n        //this.setState(new gtp.FadeOutInState(this.state, mazeState));\r\n        this.setState(mazeState); // The original did not fade in/out\r\n    }\r\n\r\n    startPacmanDying() {\r\n      this.setLoopedSound(null);\r\n      this.audio.playSound(pacman.Sounds.DIES);\r\n      this.pacman.startDying();\r\n      // this.fruit = null;\r\n      // this._fruitScoreIndex = -1;\r\n      // this._fruitScoreEndTime = -1;\r\n    }\r\n\r\n    /**\r\n  \t * Goes to the next animation frame for pacman, the ghosts and the\r\n  \t * fruit.\r\n  \t */\r\n  \tupdateSpriteFrames() {\r\n  \t\tthis.pacman.updateFrame();\r\n      this._ghosts.forEach(function(ghost: Ghost) {\r\n        ghost.updateFrame();\r\n      });\r\n  \t}\r\n\r\n  \t/**\r\n  \t * Updates the position of pacman, the ghosts and the fruit, in the\r\n  \t * specified maze.\r\n  \t * @param {Maze} maze The maze.\r\n     * @param {number} time\r\n  \t */\r\n  \tupdateSpritePositions(maze: Maze, time: number) {\r\n\r\n  \t\t// NOTE: We MUST update ghost positions before PacMan position.  This\r\n  \t\t// is because pacman.upatePosition() can cause the engine's \"playtime\"\r\n  \t\t// to reset to 0, which in turn will mess up the ghosts'\r\n  \t\t// updatePosition() calls (since we're using a \"cached\" time to pass\r\n  \t\t// to them).  This is seen when PacMan eats the last dot in a level\r\n  \t\t// and the next level is loaded.\r\n\r\n  \t\tswitch (this._ghostUpdateStrategy) {\r\n  \t\t\tcase GhostUpdateStrategy.UPDATE_ALL:\r\n          this._ghosts.forEach(function(ghost: Ghost) {\r\n            ghost.updatePosition(maze, time);\r\n          });\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase GhostUpdateStrategy.UPDATE_NONE:\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase GhostUpdateStrategy.UPDATE_ONE:\r\n  \t\t\t\tthis._ghosts[0].updatePosition(maze, time);\r\n  \t\t\t\tbreak;\r\n  \t\t}\r\n\r\n  \t\tthis.pacman.updatePosition(maze, time);\r\n\r\n  \t}\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}