{"version":3,"sources":["../app/pacman/PacmanGame.ts"],"names":[],"mappings":"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","file":"PacmanGame.js","sourcesContent":["interface Window {\r\n    process: any;\r\n}\r\n\r\nmodule pacman {\r\n    'use strict';\r\n\r\n    /**\r\n     * The default high score displayed in the game.\r\n     */\r\n    let DEFAULT_HIGH_SCORE: number = 50000;\r\n\r\n    export enum GhostUpdateStrategy {\r\n        UPDATE_ALL, UPDATE_NONE, UPDATE_ONE\r\n    }\r\n\r\n    export class PacmanGame extends gtp.Game {\r\n\r\n        private _highScore: number;\r\n        private _lives: number;\r\n        private _score: number;\r\n        private _level: number;\r\n        private _ghostUpdateStrategy: GhostUpdateStrategy;\r\n        private _chompSound: number;\r\n        pacman: Pacman;\r\n        private _fruit: Fruit;\r\n        private _ghosts: Ghost[];\r\n        private _extraPointsArray: number[];\r\n\r\n        /**\r\n         * Whether this game is being played as a desktop game (e.g. in electron).\r\n         */\r\n        private _desktopGame: boolean;\r\n\r\n        /**\r\n         * How we're stretching the game's canvas to fit the window.  This field is only used when the\r\n         * game is being played in desktop mode (e.g. in electron).\r\n         */\r\n        private _stretchMode: gtp.StretchMode;\r\n\r\n        /**\r\n         * Whether the player has earned an extra life (from achieving a\r\n         * certain score).\r\n         */\r\n        private _earnedExtraLife: boolean;\r\n\r\n        /**\r\n         * The sound effect currently looping (the background siren, the ghosts\r\n         * running away, the ghost eyes running away, etc.).\r\n         */\r\n        private _loopedSoundId: number;\r\n\r\n        private _loopedSoundName: string;\r\n\r\n        /**\r\n         * A flag used internally to decide when a ghost changing state should\r\n         * also change the background noise (siren, eyes, etc.).\r\n         */\r\n        private _resettingGhostStates: boolean;\r\n\r\n        /**\r\n         * The index into the \"points\" image containing the image for an\r\n         * amount of points being earned, e.g. for eating a ghost.\r\n         */\r\n        private _eatenGhostPointsIndex: number;\r\n\r\n        /**\r\n         * The playtime (in nanoseconds) after which an eaten fruit's score\r\n         * should stop displaying.\r\n         */\r\n        private _fruitScoreEndTime: number;\r\n\r\n        /**\r\n         * The index into scores of the current fruit.\r\n         */\r\n        private _fruitScoreIndex: number;\r\n\r\n        private _godMode: boolean;\r\n\r\n        constructor(args?: any) {\r\n            super(args);\r\n            this._highScore = DEFAULT_HIGH_SCORE;\r\n            this.pacman = new Pacman();\r\n            this._ghosts = this._createGhostArray();\r\n            this._chompSound = 0;\r\n            this._ghostUpdateStrategy = GhostUpdateStrategy.UPDATE_ALL;\r\n            this._score = 0; // For title screen\r\n            this._desktopGame = args.desktopGame ? args.desktopGame : this._isRunningInElectron();\r\n\r\n            this._extraPointsArray = [ 100, 200, 300, 400, 500, 700, 800,\r\n                1000, 1600, 2000, 3000, 5000 ];\r\n\r\n            this._possiblyRegisterDesktopModeListeners();\r\n        }\r\n\r\n        addFruit() {\r\n            if (!this._fruit) { // Should always be true.\r\n                this._fruit = new Fruit(); // Made appropriate for current level.\r\n                this._fruitScoreIndex = -1;\r\n                this._fruitScoreEndTime = -1;\r\n            }\r\n        }\r\n\r\n        checkForCollisions(): Ghost {\r\n\r\n            for (let i: number = 0; i < this._ghosts.length; i++) {\r\n                if (this.pacman.intersects(this._ghosts[i])) {\r\n                    return this._ghosts[i];\r\n                }\r\n            }\r\n\r\n            if (this._fruit && this._fruitScoreIndex === -1 &&\r\n                this.pacman.intersects(this._fruit)) {\r\n                this.increaseScore(this._extraPointsArray[this._fruit.pointsIndex]);\r\n                this.audio.playSound(Sounds.EATING_FRUIT, false);\r\n                this._fruitScoreIndex = this._fruit.pointsIndex;\r\n                this._fruitScoreEndTime = game.playTime + PacmanGame.SCORE_DISPLAY_LENGTH;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * Ensures the background sound effect being played is appropriate for\r\n         * the ghosts' current states.\r\n         */\r\n        checkLoopedSound() {\r\n\r\n            if (this._resettingGhostStates) {\r\n                return;\r\n            }\r\n\r\n            let blue: boolean = false;\r\n\r\n            for (let i: number = 0; i < this._ghosts.length; i++) {\r\n                if (this._ghosts[i].isEyes()) {\r\n                    this.setLoopedSound(Sounds.EYES_RUNNING);\r\n                    return; // \"eye\" noise trumps blue noise.\r\n                }\r\n                else if (this._ghosts[i].isBlue()) {\r\n                    blue = true;\r\n                }\r\n            }\r\n\r\n            this.setLoopedSound(blue ? Sounds.CHASING_GHOSTS : Sounds.SIREN);\r\n\r\n        }\r\n\r\n        /**\r\n         * Creates the array of ghosts the game will use.\r\n         *\r\n         * @return The array of ghosts.\r\n         */\r\n        private _createGhostArray(): Ghost[] {\r\n            let ghosts: Ghost[] = [];\r\n            this._resettingGhostStates = true;\r\n            ghosts.push(new Blinky(this));\r\n            ghosts.push(new Pinky(this));\r\n            ghosts.push(new Inky(this));\r\n            ghosts.push(new Clyde(this));\r\n            this._resettingGhostStates = false;\r\n            return ghosts;\r\n        }\r\n\r\n        drawBigDot(x: number, y: number) {\r\n            const ms: number = this.playTime;\r\n            if (ms < 0 || (ms % 500) > 250) {\r\n                const ctx: CanvasRenderingContext2D = this.canvas.getContext('2d');\r\n                const sx: number = 135,\r\n                    sy: number = 38;\r\n                game.assets.get('sprites').drawScaled2(ctx, sx, sy, 8, 8, x, y, 8, 8);\r\n            }\r\n        }\r\n\r\n        drawFruit(ctx: CanvasRenderingContext2D) {\r\n            if (this._fruitScoreIndex > -1) {\r\n                this.paintPointsEarned(ctx, this._fruitScoreIndex,\r\n                    this._fruit.x, this._fruit.y);\r\n                let time: number = game.playTime;\r\n                if (time >= this._fruitScoreEndTime) {\r\n                    this._fruit = null;\r\n                    this._fruitScoreIndex = -1;\r\n                    this._fruitScoreEndTime = -1;\r\n                }\r\n            }\r\n            else if (this._fruit) {\r\n                this._fruit.paint(ctx);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Paints all four ghosts in their present location and state.\r\n         *\r\n         * @param ctx The context with which to paint.\r\n         */\r\n        drawGhosts(ctx: CanvasRenderingContext2D) {\r\n            this._ghosts.forEach((ghost: Ghost) => {\r\n                ghost.paint(ctx);\r\n            });\r\n        }\r\n\r\n        drawScores(ctx: CanvasRenderingContext2D) {\r\n\r\n            let scoreStr: string = this._score.toString();\r\n            let x: number = 55 - scoreStr.length * 8;\r\n            let y: number = 10;\r\n            this.drawString(x, y, scoreStr, ctx);\r\n\r\n            scoreStr = this._highScore.toString();\r\n            x = 132 - scoreStr.length * 8;\r\n            this.drawString(x, y, scoreStr, ctx);\r\n        }\r\n\r\n        drawScoresHeaders(ctx: CanvasRenderingContext2D) {\r\n            this.drawString(16, 0, '1UP', ctx);\r\n            this.drawString(67, 0, 'HIGH SCORE', ctx);\r\n        }\r\n\r\n        drawSmallDot(x: number, y: number) {\r\n            const ctx: CanvasRenderingContext2D = this.canvas.getContext('2d');\r\n            ctx.fillRect(x, y, 2, 2);\r\n        }\r\n\r\n        drawSprite(dx: number, dy: number, sx: number, sy: number) {\r\n            const image: gtp.Image = game.assets.get('sprites');\r\n            const ctx: CanvasRenderingContext2D = this.canvas.getContext('2d');\r\n            image.drawScaled2(ctx, sx, sy, 16, 16, dx, dy, 16, 16);\r\n        }\r\n\r\n        drawString(x: number, y: number, text: string|number,\r\n                   ctx: CanvasRenderingContext2D = game.canvas.getContext('2d')) {\r\n\r\n            let str: string = text.toString(); // Allow us to pass in stuff like numerics\r\n\r\n            // Note we have a gtp.SpriteSheet, not a gtp.BitmapFont, so our\r\n            // calculation of what sub-image to draw is a little convoluted\r\n            let fontImage: gtp.SpriteSheet = this.assets.get('font');\r\n            let alphaOffs: number = 'A'.charCodeAt(0);\r\n            let numericOffs: number = '0'.charCodeAt(0);\r\n            let index: number;\r\n\r\n            for (let i: number = 0; i < str.length; i++) {\r\n\r\n                let ch: string = str[i];\r\n                const chCharCode: number = str.charCodeAt(i);\r\n                if (ch >= 'A' && ch <= 'Z') {\r\n                    index = fontImage.colCount + (chCharCode - alphaOffs);\r\n                }\r\n                else if (ch >= '0' && ch <= '9') {\r\n                    index = chCharCode - numericOffs;\r\n                }\r\n                else {\r\n                    switch (ch) {\r\n                        case '-':\r\n                            index = 10;\r\n                            break;\r\n                        case '.':\r\n                            index = 11;\r\n                            break;\r\n                        case '>':\r\n                            index = 12;\r\n                            break;\r\n                        case '@':\r\n                            index = 13;\r\n                            break;\r\n                        case '!':\r\n                            index = 14;\r\n                            break;\r\n                        default:\r\n                            index = 15; // whitespace\r\n                            break;\r\n                    }\r\n                }\r\n                fontImage.drawByIndex(ctx, x, y, index);\r\n                x += 9; //CHAR_WIDTH\r\n            }\r\n        }\r\n\r\n        getGhost(index: number): Ghost {\r\n            return this._ghosts[index];\r\n        }\r\n\r\n        get godMode(): boolean {\r\n            return this._godMode;\r\n        }\r\n\r\n        static get EXTRA_LIFE_SCORE(): number {\r\n            return 10000;\r\n        }\r\n\r\n        get level(): number {\r\n            return this._level;\r\n        }\r\n\r\n        get lives(): number {\r\n            return this._lives;\r\n        }\r\n\r\n        get PENALTY_BOX_EXIT_X(): number {\r\n            return (this.getWidth() - PacmanGame.SPRITE_SIZE) / 2;\r\n        }\r\n\r\n        get PENALTY_BOX_EXIT_Y(): number {\r\n            return 12 * PacmanGame.TILE_SIZE - PacmanGame.TILE_SIZE / 2;\r\n        }\r\n\r\n        /**\r\n         * Amount of time, in milliseconds, that points earned by Pacman should\r\n         * be displayed (e.g. from eating a ghost or a fruit).\r\n         */\r\n        static get SCORE_DISPLAY_LENGTH(): number {\r\n            return 750;\r\n        }\r\n\r\n        static get SPRITE_SIZE(): number {\r\n            return 16;\r\n        }\r\n\r\n        static get TILE_SIZE(): number {\r\n            return 8;\r\n        }\r\n\r\n        ghostEaten(ghost: Ghost): number {\r\n\r\n            switch (this._eatenGhostPointsIndex) {\r\n                case 0: // 1st ghost eaten\r\n                    this._eatenGhostPointsIndex = 1;\r\n                    break;\r\n                case 1: // 2nd ghost\r\n                    this._eatenGhostPointsIndex = 3;\r\n                    break;\r\n                case 3: // 3rd ghost\r\n                    this._eatenGhostPointsIndex = 6;\r\n                    break;\r\n                default: // Should never happen.\r\n                case 6: // 4th ghost\r\n                    this._eatenGhostPointsIndex = 8;\r\n                    break;\r\n            }\r\n            this.increaseScore(this._extraPointsArray[this._eatenGhostPointsIndex]);\r\n\r\n            this.audio.playSound(Sounds.EATING_GHOST);\r\n            return this._eatenGhostPointsIndex;\r\n        }\r\n\r\n        increaseLives(amount: number): number {\r\n            return this._lives += amount;\r\n        }\r\n\r\n        increaseScore(amount: number) {\r\n\r\n            this._score += amount;\r\n            if (this._score > this._highScore) {\r\n                this._highScore = this._score;\r\n            }\r\n\r\n            if (!this._earnedExtraLife && this._score >= PacmanGame.EXTRA_LIFE_SCORE) {\r\n                this.audio.playSound(Sounds.EXTRA_LIFE);\r\n                this.increaseLives(1);\r\n                this._earnedExtraLife = true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns whether this game is being played on the desktop, as opposed to in a browser.\r\n         *\r\n         * @returns {boolean} Whether this game is being played on the desktop.\r\n         */\r\n        isDesktopGame(): boolean {\r\n            return this._desktopGame;\r\n        }\r\n\r\n        private _isRunningInElectron(): boolean {\r\n            return window && window.process && window.process.type;\r\n        }\r\n\r\n        loadNextLevel() {\r\n            this.setLoopedSound(null);\r\n            this._level++;\r\n            this._fruit = null;\r\n            this._fruitScoreIndex = -1;\r\n            this._fruitScoreEndTime = -1;\r\n            let state: MazeState = <MazeState>this.state;\r\n            state.reset();\r\n        }\r\n\r\n        makeGhostsBlue() {\r\n            this._eatenGhostPointsIndex = 0;\r\n            this._ghosts.forEach((ghost: Ghost) => {\r\n                ghost.possiblyTurnBlue();\r\n            });\r\n            // Don't just change to \"blue\" sound as \"eyes\" sound trumps \"blue\".\r\n            this.checkLoopedSound();\r\n        }\r\n\r\n        /**\r\n         * Paints the \"points earned,\" for example, when PacMan eats a ghost or\r\n         * fruit.\r\n         *\r\n         * @param {CanvasContext2D} ctx The graphics context to use.\r\n         * @param {int} ptsIndex The index into the points array.\r\n         * @param {int} dx The x-coordinate at which to draw.\r\n         * @param {int} dy The y-coordinate at which to draw.\r\n         */\r\n        paintPointsEarned(ctx: CanvasRenderingContext2D, ptsIndex: number, dx: number, dy: number) {\r\n            let points: gtp.SpriteSheet = game.assets.get('points');\r\n            points.drawByIndex(ctx, dx, dy, ptsIndex);\r\n        }\r\n\r\n        /**\r\n         * Plays the next appropriate chomp sound.\r\n         */\r\n        playChompSound() {\r\n            this.audio.playSound(this._chompSound === 0 ?\r\n                Sounds.CHOMP_1 : Sounds.CHOMP_2);\r\n            this._chompSound = (this._chompSound + 1) % 2;\r\n        }\r\n\r\n        /**\r\n         * Registers events that are specific to the desktop mode of the game.\r\n         */\r\n        private _possiblyRegisterDesktopModeListeners() {\r\n            if (this.isDesktopGame()) {\r\n\r\n                window.addEventListener('resize', () => {\r\n                    gtp.CanvasResizer.resize(this.canvas, this._stretchMode);\r\n                });\r\n            }\r\n        }\r\n\r\n        resetGhosts() {\r\n\r\n            this._resettingGhostStates = true;\r\n\r\n            // Have each ghost go to one of four random corners while in scatter\r\n            // mode, but ensure each ghost goes to a different corner.\r\n            let corners: gtp.Point[] = [\r\n                new gtp.Point(2, 1),\r\n                new gtp.Point(2, Maze.TILE_COUNT_HORIZONTAL - 2),\r\n                new gtp.Point(Maze.TILE_COUNT_VERTICAL - 2, 1),\r\n                new gtp.Point(Maze.TILE_COUNT_VERTICAL - 2, Maze.TILE_COUNT_HORIZONTAL - 2)\r\n            ];\r\n            let cornerSeed: number = gtp.Utils.randomInt(4);\r\n\r\n            for (let i: number = 0; i < this._ghosts.length; i++) {\r\n                this._ghosts[i].reset();\r\n                this._ghosts[i].setCorner(corners[(cornerSeed + i) % 4]);\r\n            }\r\n\r\n            this._resettingGhostStates = false;\r\n        }\r\n\r\n        /**\r\n         * Starts looping a sound effect.\r\n         * @param {string} sound The sound effect to loop.\r\n         */\r\n        setLoopedSound(sound: string) {\r\n            if (sound !== this._loopedSoundName) {\r\n                if (this._loopedSoundId != null) {\r\n                    this.audio.stopSound(this._loopedSoundId);\r\n                }\r\n                this._loopedSoundName = sound;\r\n                if (sound != null) {\r\n                    this._loopedSoundId = game.audio.playSound(sound, true);\r\n                }\r\n                else {\r\n                    this._loopedSoundId = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Sets whether to update none, one, or all of the ghosts' positions\r\n         * each frame.  This is used for debugging purposes.\r\n         * @param state How many ghosts to update.\r\n         */\r\n        set ghostUpdateStrategy(strategy: GhostUpdateStrategy) {\r\n            this._ghostUpdateStrategy = strategy;\r\n        }\r\n\r\n        startGame(level: number) {\r\n\r\n            this._lives = 3;\r\n            this._score = 0;\r\n            this._level = 0;\r\n\r\n            let levelData: any = game.assets.get('levels')[level];\r\n            let mazeState: any = new MazeState(levelData);\r\n            //this.setState(new gtp.FadeOutInState(this.state, mazeState));\r\n            this.setState(mazeState); // The original did not fade in/out\r\n        }\r\n\r\n        startPacmanDying() {\r\n            this.setLoopedSound(null);\r\n            this.audio.playSound(Sounds.DIES);\r\n            this.pacman.startDying();\r\n            this._fruit = null;\r\n            this._fruitScoreIndex = -1;\r\n            this._fruitScoreEndTime = -1;\r\n        }\r\n\r\n        toggleGodMode(): boolean {\r\n            this._godMode = !this._godMode;\r\n            this.setStatusMessage('God mode ' + (this._godMode ? 'enabled' : 'disabled'));\r\n            return this._godMode;\r\n        }\r\n\r\n        toggleStretchMode() {\r\n            if (game.isDesktopGame()) {\r\n                switch (this._stretchMode) {\r\n                    default:\r\n                    case gtp.StretchMode.STRETCH_NONE:\r\n                        this._stretchMode = gtp.StretchMode.STRETCH_FILL;\r\n                        break;\r\n                    case gtp.StretchMode.STRETCH_FILL:\r\n                        this._stretchMode = gtp.StretchMode.STRETCH_PROPORTIONAL;\r\n                        break;\r\n                    case gtp.StretchMode.STRETCH_PROPORTIONAL:\r\n                        this._stretchMode = gtp.StretchMode.STRETCH_NONE;\r\n                        break;\r\n                }\r\n                this.setStatusMessage('Stretch mode: ' + gtp.StretchMode[this._stretchMode]);\r\n                gtp.CanvasResizer.resize(this.canvas, this._stretchMode);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Goes to the next animation frame for pacman, the ghosts and the\r\n         * fruit.\r\n         */\r\n        updateSpriteFrames() {\r\n            this.pacman.updateFrame();\r\n            this._ghosts.forEach((ghost: Ghost) => {\r\n                ghost.updateFrame();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Updates the position of pacman, the ghosts and the fruit, in the\r\n         * specified maze.\r\n         * @param {Maze} maze The maze.\r\n         * @param {number} time\r\n         */\r\n        updateSpritePositions(maze: Maze, time: number) {\r\n\r\n            // NOTE: We MUST update ghost positions before PacMan position.  This\r\n            // is because pacman.upatePosition() can cause the engine's \"playtime\"\r\n            // to reset to 0, which in turn will mess up the ghosts'\r\n            // updatePosition() calls (since we're using a \"cached\" time to pass\r\n            // to them).  This is seen when PacMan eats the last dot in a level\r\n            // and the next level is loaded.\r\n\r\n            switch (this._ghostUpdateStrategy) {\r\n                case GhostUpdateStrategy.UPDATE_ALL:\r\n                    this._ghosts.forEach((ghost: Ghost) => {\r\n                        ghost.updatePosition(maze, time);\r\n                    });\r\n                    break;\r\n                case GhostUpdateStrategy.UPDATE_NONE:\r\n                    break;\r\n                case GhostUpdateStrategy.UPDATE_ONE:\r\n                    this._ghosts[0].updatePosition(maze, time);\r\n                    break;\r\n            }\r\n\r\n            this.pacman.updatePosition(maze, time);\r\n\r\n        }\r\n    }\r\n}\r\n"]}