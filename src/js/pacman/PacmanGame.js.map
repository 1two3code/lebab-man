{"version":3,"sources":["pacman/PacmanGame.ts"],"names":["pacman","pacman.GhostUpdateStrategy","pacman.PacmanGame","pacman.PacmanGame.constructor","pacman.PacmanGame.addFruit","pacman.PacmanGame.checkForCollisions","pacman.PacmanGame.checkLoopedSound","pacman.PacmanGame._createGhostArray","pacman.PacmanGame.drawBigDot","pacman.PacmanGame.drawFruit","pacman.PacmanGame.drawGhosts","pacman.PacmanGame.drawScores","pacman.PacmanGame.drawScoresHeaders","pacman.PacmanGame.drawSmallDot","pacman.PacmanGame.drawSprite","pacman.PacmanGame.drawString","pacman.PacmanGame.getGhost","pacman.PacmanGame.godMode","pacman.PacmanGame.EXTRA_LIFE_SCORE","pacman.PacmanGame.level","pacman.PacmanGame.lives","pacman.PacmanGame.PENALTY_BOX_EXIT_X","pacman.PacmanGame.PENALTY_BOX_EXIT_Y","pacman.PacmanGame.SCORE_DISPLAY_LENGTH","pacman.PacmanGame.SPRITE_SIZE","pacman.PacmanGame.TILE_SIZE","pacman.PacmanGame.ghostEaten","pacman.PacmanGame.increaseLives","pacman.PacmanGame.increaseScore","pacman.PacmanGame.loadNextLevel","pacman.PacmanGame.makeGhostsBlue","pacman.PacmanGame.paintPointsEarned","pacman.PacmanGame.playChompSound","pacman.PacmanGame.resetGhosts","pacman.PacmanGame.setLoopedSound","pacman.PacmanGame.ghostUpdateStrategy","pacman.PacmanGame.toggleGodMode","pacman.PacmanGame.startGame","pacman.PacmanGame.startPacmanDying","pacman.PacmanGame.updateSpriteFrames","pacman.PacmanGame.updateSpritePositions"],"mappings":"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","file":"pacman/PacmanGame.js","sourcesContent":["module pacman {\r\n    'use strict';\r\n\r\n    /**\r\n     * The default high score displayed in the game.\r\n     */\r\n    let DEFAULT_HIGH_SCORE: number = 50000;\r\n\r\n    export enum GhostUpdateStrategy {\r\n        UPDATE_ALL, UPDATE_NONE, UPDATE_ONE\r\n    }\r\n\r\n    export class PacmanGame extends gtp.Game {\r\n\r\n        private _highScore: number;\r\n        private _lives: number;\r\n        private _score: number;\r\n        private _level: number;\r\n        private _ghostUpdateStrategy: GhostUpdateStrategy;\r\n        private _chompSound: number;\r\n        pacman: Pacman;\r\n        private _fruit: Fruit;\r\n        private _ghosts: Ghost[];\r\n        private _extraPointsArray: number[];\r\n\r\n        /**\r\n         * Whether the player has earned an extra life (from achieving a\r\n         * certain score).\r\n         */\r\n        private _earnedExtraLife: boolean;\r\n\r\n        /**\r\n         * The sound effect currently looping (the background siren, the ghosts\r\n         * running away, the ghost eyes running away, etc.).\r\n         */\r\n        private _loopedSoundId: number;\r\n\r\n        private _loopedSoundName: string;\r\n\r\n        /**\r\n         * A flag used internally to decide when a ghost changing state should\r\n         * also change the background noise (siren, eyes, etc.).\r\n         */\r\n        private _resettingGhostStates: boolean;\r\n\r\n        /**\r\n         * The index into the \"points\" image containing the image for an\r\n         * amount of points being earned, e.g. for eating a ghost.\r\n         */\r\n        private _eatenGhostPointsIndex: number;\r\n\r\n        /**\r\n         * The playtime (in nanoseconds) after which an eaten fruit's score\r\n         * should stop displaying.\r\n         */\r\n        private _fruitScoreEndTime: number;\r\n\r\n        /**\r\n         * The index into scores of the current fruit.\r\n         */\r\n        private _fruitScoreIndex: number;\r\n\r\n        private _godMode: boolean;\r\n\r\n        constructor(args?: any) {\r\n            super(args);\r\n            this._highScore = DEFAULT_HIGH_SCORE;\r\n            this.pacman = new Pacman();\r\n            this._ghosts = this._createGhostArray();\r\n            this._chompSound = 0;\r\n            this._ghostUpdateStrategy = GhostUpdateStrategy.UPDATE_ALL;\r\n            this._score = 0; // For title screen\r\n\r\n            this._extraPointsArray = [ 100, 200, 300, 400, 500, 700, 800,\r\n                1000, 1600, 2000, 3000, 5000 ];\r\n        }\r\n\r\n        addFruit() {\r\n            if (!this._fruit) { // Should always be true.\r\n                this._fruit = new Fruit(); // Made appropriate for current level.\r\n                this._fruitScoreIndex = -1;\r\n                this._fruitScoreEndTime = -1;\r\n            }\r\n        }\r\n\r\n        checkForCollisions(): Ghost {\r\n\r\n            for (let i: number = 0; i < this._ghosts.length; i++) {\r\n                if (this.pacman.intersects(this._ghosts[i])) {\r\n                    return this._ghosts[i];\r\n                }\r\n            }\r\n\r\n            if (this._fruit && this._fruitScoreIndex === -1 &&\r\n                this.pacman.intersects(this._fruit)) {\r\n                this.increaseScore(this._extraPointsArray[this._fruit.pointsIndex]);\r\n                this.audio.playSound(Sounds.EATING_FRUIT, false);\r\n                this._fruitScoreIndex = this._fruit.pointsIndex;\r\n                this._fruitScoreEndTime = game.playTime + PacmanGame.SCORE_DISPLAY_LENGTH;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * Ensures the background sound effect being played is appropriate for\r\n         * the ghosts' current states.\r\n         */\r\n        checkLoopedSound() {\r\n\r\n            if (this._resettingGhostStates) {\r\n                return;\r\n            }\r\n\r\n            let blue: boolean = false;\r\n\r\n            for (let i: number = 0; i < this._ghosts.length; i++) {\r\n                if (this._ghosts[i].isEyes()) {\r\n                    this.setLoopedSound(Sounds.EYES_RUNNING);\r\n                    return; // \"eye\" noise trumps blue noise.\r\n                }\r\n                else if (this._ghosts[i].isBlue()) {\r\n                    blue = true;\r\n                }\r\n            }\r\n\r\n            this.setLoopedSound(blue ? Sounds.CHASING_GHOSTS : Sounds.SIREN);\r\n\r\n        }\r\n\r\n        /**\r\n         * Creates the array of ghosts the game will use.\r\n         *\r\n         * @return The array of ghosts.\r\n         */\r\n        private _createGhostArray(): Ghost[] {\r\n            let ghosts: Ghost[] = [];\r\n            this._resettingGhostStates = true;\r\n            ghosts.push(new Blinky(this));\r\n            ghosts.push(new Pinky(this));\r\n            ghosts.push(new Inky(this));\r\n            ghosts.push(new Clyde(this));\r\n            this._resettingGhostStates = false;\r\n            return ghosts;\r\n        }\r\n\r\n        drawBigDot(x: number, y: number) {\r\n            const ms: number = this.playTime;\r\n            if (ms < 0 || (ms % 500) > 250) {\r\n                const ctx: CanvasRenderingContext2D = this.canvas.getContext('2d');\r\n                const sx: number = 135,\r\n                    sy: number = 38;\r\n                game.assets.get('sprites').drawScaled2(ctx, sx, sy, 8, 8, x, y, 8, 8);\r\n            }\r\n        }\r\n\r\n        drawFruit(ctx: CanvasRenderingContext2D) {\r\n            if (this._fruitScoreIndex > -1) {\r\n                this.paintPointsEarned(ctx, this._fruitScoreIndex,\r\n                    this._fruit.x, this._fruit.y);\r\n                let time: number = game.playTime;\r\n                if (time >= this._fruitScoreEndTime) {\r\n                    this._fruit = null;\r\n                    this._fruitScoreIndex = -1;\r\n                    this._fruitScoreEndTime = -1;\r\n                }\r\n            }\r\n            else if (this._fruit) {\r\n                this._fruit.paint(ctx);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Paints all four ghosts in their present location and state.\r\n         *\r\n         * @param ctx The context with which to paint.\r\n         */\r\n        drawGhosts(ctx: CanvasRenderingContext2D) {\r\n            this._ghosts.forEach((ghost: Ghost) => {\r\n                ghost.paint(ctx);\r\n            });\r\n        }\r\n\r\n        drawScores(ctx: CanvasRenderingContext2D) {\r\n\r\n            let scoreStr: string = this._score.toString();\r\n            let x: number = 55 - scoreStr.length * 8;\r\n            let y: number = 10;\r\n            this.drawString(x, y, scoreStr, ctx);\r\n\r\n            scoreStr = this._highScore.toString();\r\n            x = 132 - scoreStr.length * 8;\r\n            this.drawString(x, y, scoreStr, ctx);\r\n        }\r\n\r\n        drawScoresHeaders(ctx: CanvasRenderingContext2D) {\r\n            this.drawString(16, 0, '1UP', ctx);\r\n            this.drawString(67, 0, 'HIGH SCORE', ctx);\r\n        }\r\n\r\n        drawSmallDot(x: number, y: number) {\r\n            const ctx: CanvasRenderingContext2D = this.canvas.getContext('2d');\r\n            ctx.fillRect(x, y, 2, 2);\r\n        }\r\n\r\n        drawSprite(dx: number, dy: number, sx: number, sy: number) {\r\n            const image: gtp.Image = game.assets.get('sprites');\r\n            const ctx: CanvasRenderingContext2D = this.canvas.getContext('2d');\r\n            image.drawScaled2(ctx, sx, sy, 16, 16, dx, dy, 16, 16);\r\n        }\r\n\r\n        drawString(x: number, y: number, text: string|number,\r\n                   ctx: CanvasRenderingContext2D = game.canvas.getContext('2d')) {\r\n\r\n            let str: string = text.toString(); // Allow us to pass in stuff like numerics\r\n\r\n            // Note we have a gtp.SpriteSheet, not a gtp.BitmapFont, so our\r\n            // calculation of what sub-image to draw is a little convoluted\r\n            let fontImage: gtp.SpriteSheet = this.assets.get('font');\r\n            let alphaOffs: number = 'A'.charCodeAt(0);\r\n            let numericOffs: number = '0'.charCodeAt(0);\r\n            let index: number;\r\n\r\n            for (let i: number = 0; i < str.length; i++) {\r\n\r\n                let ch: string = str[i];\r\n                const chCharCode: number = str.charCodeAt(i);\r\n                if (ch >= 'A' && ch <= 'Z') {\r\n                    index = fontImage.colCount + (chCharCode - alphaOffs);\r\n                }\r\n                else if (ch >= '0' && ch <= '9') {\r\n                    index = chCharCode - numericOffs;\r\n                }\r\n                else {\r\n                    switch (ch) {\r\n                        case '-':\r\n                            index = 10;\r\n                            break;\r\n                        case '.':\r\n                            index = 11;\r\n                            break;\r\n                        case '>':\r\n                            index = 12;\r\n                            break;\r\n                        case '@':\r\n                            index = 13;\r\n                            break;\r\n                        case '!':\r\n                            index = 14;\r\n                            break;\r\n                        default:\r\n                            index = 15; // whitespace\r\n                            break;\r\n                    }\r\n                }\r\n                fontImage.drawByIndex(ctx, x, y, index);\r\n                x += 9; //CHAR_WIDTH\r\n            }\r\n        }\r\n\r\n        getGhost(index: number): Ghost {\r\n            return this._ghosts[index];\r\n        }\r\n\r\n        get godMode(): boolean {\r\n            return this._godMode;\r\n        }\r\n\r\n        static get EXTRA_LIFE_SCORE(): number {\r\n            return 10000;\r\n        }\r\n\r\n        get level(): number {\r\n            return this._level;\r\n        }\r\n\r\n        get lives(): number {\r\n            return this._lives;\r\n        }\r\n\r\n        get PENALTY_BOX_EXIT_X(): number {\r\n            return (this.getWidth() - PacmanGame.SPRITE_SIZE) / 2;\r\n        }\r\n\r\n        get PENALTY_BOX_EXIT_Y(): number {\r\n            return 12 * PacmanGame.TILE_SIZE - PacmanGame.TILE_SIZE / 2;\r\n        }\r\n\r\n        /**\r\n         * Amount of time, in milliseconds, that points earned by Pacman should\r\n         * be displayed (e.g. from eating a ghost or a fruit).\r\n         */\r\n        static get SCORE_DISPLAY_LENGTH(): number {\r\n            return 750;\r\n        }\r\n\r\n        static get SPRITE_SIZE(): number {\r\n            return 16;\r\n        }\r\n\r\n        static get TILE_SIZE(): number {\r\n            return 8;\r\n        }\r\n\r\n        ghostEaten(ghost: Ghost): number {\r\n\r\n            switch (this._eatenGhostPointsIndex) {\r\n                case 0: // 1st ghost eaten\r\n                    this._eatenGhostPointsIndex = 1;\r\n                    break;\r\n                case 1: // 2nd ghost\r\n                    this._eatenGhostPointsIndex = 3;\r\n                    break;\r\n                case 3: // 3rd ghost\r\n                    this._eatenGhostPointsIndex = 6;\r\n                    break;\r\n                default: // Should never happen.\r\n                case 6: // 4th ghost\r\n                    this._eatenGhostPointsIndex = 8;\r\n                    break;\r\n            }\r\n            this.increaseScore(this._extraPointsArray[this._eatenGhostPointsIndex]);\r\n\r\n            this.audio.playSound(Sounds.EATING_GHOST);\r\n            return this._eatenGhostPointsIndex;\r\n        }\r\n\r\n        increaseLives(amount: number): number {\r\n            return this._lives += amount;\r\n        }\r\n\r\n        increaseScore(amount: number) {\r\n\r\n            this._score += amount;\r\n            if (this._score > this._highScore) {\r\n                this._highScore = this._score;\r\n            }\r\n\r\n            if (!this._earnedExtraLife && this._score >= PacmanGame.EXTRA_LIFE_SCORE) {\r\n                this.audio.playSound(Sounds.EXTRA_LIFE);\r\n                this.increaseLives(1);\r\n                this._earnedExtraLife = true;\r\n            }\r\n        }\r\n\r\n        loadNextLevel() {\r\n            this.setLoopedSound(null);\r\n            this._level++;\r\n            this._fruit = null;\r\n            this._fruitScoreIndex = -1;\r\n            this._fruitScoreEndTime = -1;\r\n            let state: MazeState = <MazeState>this.state;\r\n            state.reset();\r\n        }\r\n\r\n        makeGhostsBlue() {\r\n            this._eatenGhostPointsIndex = 0;\r\n            this._ghosts.forEach((ghost: Ghost) => {\r\n                ghost.possiblyTurnBlue();\r\n            });\r\n            // Don't just change to \"blue\" sound as \"eyes\" sound trumps \"blue\".\r\n            this.checkLoopedSound();\r\n        }\r\n\r\n        /**\r\n         * Paints the \"points earned,\" for example, when PacMan eats a ghost or\r\n         * fruit.\r\n         *\r\n         * @param {CanvasContext2D} ctx The graphics context to use.\r\n         * @param {int} ptsIndex The index into the points array.\r\n         * @param {int} dx The x-coordinate at which to draw.\r\n         * @param {int} dy The y-coordinate at which to draw.\r\n         */\r\n        paintPointsEarned(ctx: CanvasRenderingContext2D, ptsIndex: number, dx: number, dy: number) {\r\n            let points: gtp.SpriteSheet = game.assets.get('points');\r\n            points.drawByIndex(ctx, dx, dy, ptsIndex);\r\n        }\r\n\r\n        /**\r\n         * Plays the next appropriate chomp sound.\r\n         */\r\n        playChompSound() {\r\n            this.audio.playSound(this._chompSound === 0 ?\r\n                Sounds.CHOMP_1 : Sounds.CHOMP_2);\r\n            this._chompSound = (this._chompSound + 1) % 2;\r\n        }\r\n\r\n        resetGhosts() {\r\n\r\n            this._resettingGhostStates = true;\r\n\r\n            // Have each ghost go to one of four random corners while in scatter\r\n            // mode, but ensure each ghost goes to a different corner.\r\n            let corners: gtp.Point[] = [\r\n                new gtp.Point(2, 1),\r\n                new gtp.Point(2, Maze.TILE_COUNT_HORIZONTAL - 2),\r\n                new gtp.Point(Maze.TILE_COUNT_VERTICAL - 2, 1),\r\n                new gtp.Point(Maze.TILE_COUNT_VERTICAL - 2, Maze.TILE_COUNT_HORIZONTAL - 2)\r\n            ];\r\n            let cornerSeed: number = gtp.Utils.randomInt(4);\r\n\r\n            for (let i: number = 0; i < this._ghosts.length; i++) {\r\n                this._ghosts[i].reset();\r\n                this._ghosts[i].setCorner(corners[(cornerSeed + i) % 4]);\r\n            }\r\n\r\n            this._resettingGhostStates = false;\r\n        }\r\n\r\n        /**\r\n         * Starts looping a sound effect.\r\n         * @param {string} sound The sound effect to loop.\r\n         */\r\n        setLoopedSound(sound: string) {\r\n            if (sound !== this._loopedSoundName) {\r\n                if (this._loopedSoundId != null) {\r\n                    this.audio.stopSound(this._loopedSoundId);\r\n                }\r\n                this._loopedSoundName = sound;\r\n                if (sound != null) {\r\n                    this._loopedSoundId = game.audio.playSound(sound, true);\r\n                }\r\n                else {\r\n                    this._loopedSoundId = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Sets whether to update none, one, or all of the ghosts' positions\r\n         * each frame.  This is used for debugging purposes.\r\n         * @param state How many ghosts to update.\r\n         */\r\n        set ghostUpdateStrategy(strategy: GhostUpdateStrategy) {\r\n            this._ghostUpdateStrategy = strategy;\r\n        }\r\n\r\n        toggleGodMode(): boolean {\r\n            this._godMode = !this._godMode;\r\n            this.setStatusMessage('God mode ' + (this._godMode ? 'enabled' : 'disabled'));\r\n            return this._godMode;\r\n        }\r\n\r\n        startGame(level: number) {\r\n\r\n            this._lives = 3;\r\n            this._score = 0;\r\n            this._level = 0;\r\n\r\n            let levelData: any = game.assets.get('levels')[level];\r\n            let mazeState: any = new MazeState(levelData);\r\n            //this.setState(new gtp.FadeOutInState(this.state, mazeState));\r\n            this.setState(mazeState); // The original did not fade in/out\r\n        }\r\n\r\n        startPacmanDying() {\r\n            this.setLoopedSound(null);\r\n            this.audio.playSound(Sounds.DIES);\r\n            this.pacman.startDying();\r\n            this._fruit = null;\r\n            this._fruitScoreIndex = -1;\r\n            this._fruitScoreEndTime = -1;\r\n        }\r\n\r\n        /**\r\n         * Goes to the next animation frame for pacman, the ghosts and the\r\n         * fruit.\r\n         */\r\n        updateSpriteFrames() {\r\n            this.pacman.updateFrame();\r\n            this._ghosts.forEach((ghost: Ghost) => {\r\n                ghost.updateFrame();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Updates the position of pacman, the ghosts and the fruit, in the\r\n         * specified maze.\r\n         * @param {Maze} maze The maze.\r\n         * @param {number} time\r\n         */\r\n        updateSpritePositions(maze: Maze, time: number) {\r\n\r\n            // NOTE: We MUST update ghost positions before PacMan position.  This\r\n            // is because pacman.upatePosition() can cause the engine's \"playtime\"\r\n            // to reset to 0, which in turn will mess up the ghosts'\r\n            // updatePosition() calls (since we're using a \"cached\" time to pass\r\n            // to them).  This is seen when PacMan eats the last dot in a level\r\n            // and the next level is loaded.\r\n\r\n            switch (this._ghostUpdateStrategy) {\r\n                case GhostUpdateStrategy.UPDATE_ALL:\r\n                    this._ghosts.forEach((ghost: Ghost) => {\r\n                        ghost.updatePosition(maze, time);\r\n                    });\r\n                    break;\r\n                case GhostUpdateStrategy.UPDATE_NONE:\r\n                    break;\r\n                case GhostUpdateStrategy.UPDATE_ONE:\r\n                    this._ghosts[0].updatePosition(maze, time);\r\n                    break;\r\n            }\r\n\r\n            this.pacman.updatePosition(maze, time);\r\n\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}