{"version":3,"sources":["../app/pacman/_BaseSprite.ts"],"names":[],"mappings":"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","file":"_BaseSprite.js","sourcesContent":["module pacman {\r\n    'use strict';\r\n\r\n    export abstract class _BaseSprite {\r\n\r\n        bounds: gtp.Rectangle;\r\n        private _intersectBounds: gtp.Rectangle;\r\n        direction: Direction;\r\n        _frame: number;\r\n        private _frameCount: number;\r\n        private _lastUpdateTime: number;\r\n\r\n        constructor(frameCount: number) {\r\n            this.bounds = new gtp.Rectangle(0, 0, PacmanGame.SPRITE_SIZE, PacmanGame.SPRITE_SIZE);\r\n            this._intersectBounds = new gtp.Rectangle();\r\n            this.direction = Direction.EAST;\r\n            this._frame = 0;\r\n            this._frameCount = frameCount;\r\n            this._lastUpdateTime = 0;\r\n        }\r\n\r\n        atIntersection(maze: Maze): boolean {\r\n            // TODO: Optimize me\r\n            switch (this.direction) {\r\n                case Direction.NORTH:\r\n                case Direction.SOUTH:\r\n                    return this.getCanMoveLeft(maze) || this.getCanMoveRight(maze);\r\n                case Direction.EAST:\r\n                case Direction.WEST:\r\n                    return this.getCanMoveUp(maze) || this.getCanMoveDown(maze);\r\n            }\r\n            return false;\r\n        }\r\n\r\n        getCanMoveDown(maze: Maze) {\r\n            let x: number = this.centerX;\r\n            let y: number = this.centerY;\r\n            let xRemainder: number = x % this.TILE_SIZE;\r\n            let yRemainder: number = y % this.TILE_SIZE; //(y+TILE_SIZE) % this.TILE_SIZE;\r\n            if (xRemainder === 0 && yRemainder === 0) {\r\n                let row: number = this.row;\r\n                let col: number = this.column;\r\n                return row < 30 && maze.isWalkable(row + 1, col);\r\n            }\r\n            return this.direction === Direction.NORTH || this.direction === Direction.SOUTH;\r\n        }\r\n\r\n        getCanMoveLeft(maze: Maze) {\r\n            let x: number = this.bounds.x;\r\n            if (x < 0) {\r\n                return true; // Going through tunnel.\r\n            }\r\n            x +=  this.TILE_SIZE / 2;\r\n            let y: number = this.centerY;\r\n            let xRemainder: number = x % this.TILE_SIZE; //(x-TILE_SIZE) % this.TILE_SIZE;\r\n            let yRemainder: number = y % this.TILE_SIZE;\r\n            if (xRemainder === 0 && yRemainder === 0) {\r\n                let row: number = this.row;\r\n                let col: number = this.column;\r\n                return col > 0 && maze.isWalkable(row, col - 1);\r\n            }\r\n            return this.direction === Direction.EAST || this.direction === Direction.WEST;\r\n        }\r\n\r\n        getCanMoveRight(maze: Maze) {\r\n            let x: number = this.bounds.x;\r\n            if (x + this.width > this.SCREEN_WIDTH) {\r\n                return true; // Going through tunnel.\r\n            }\r\n            x +=  this.TILE_SIZE / 2;\r\n            let y: number = this.centerY;\r\n            let xRemainder: number = x % this.TILE_SIZE; //(x+TILE_SIZE) % this.TILE_SIZE;\r\n            let yRemainder: number = y % this.TILE_SIZE;\r\n            if (xRemainder === 0 && yRemainder === 0) {\r\n                let row: number = this.row;\r\n                let col: number = this.column;\r\n                return col < 27 && maze.isWalkable(row, col + 1);\r\n            }\r\n            return this.direction === Direction.EAST || this.direction === Direction.WEST;\r\n        }\r\n\r\n        getCanMoveUp(maze: Maze) {\r\n            let x: number = this.centerX;\r\n            let y: number = this.centerY;\r\n            if ((x % 1) !== 0 || (y % 1) !== 0) {\r\n                console.error('Unexpected condition: x === ' + x + ', y === ' + y);\r\n            }\r\n            let xRemainder: number = x % this.TILE_SIZE;\r\n            let yRemainder: number = y % this.TILE_SIZE; //(y-TILE_SIZE) % this.TILE_SIZE;\r\n            if (xRemainder === 0 && yRemainder === 0) {\r\n                let row: number = this.row;\r\n                let col: number = this.column;\r\n                return row > 0 && maze.isWalkable(row - 1, col);\r\n            }\r\n            return this.direction === Direction.NORTH || this.direction === Direction.SOUTH;\r\n        }\r\n\r\n        get centerX(): number {\r\n            return this.bounds.x +  this.TILE_SIZE / 2;\r\n        }\r\n\r\n        get centerY(): number {\r\n            return this.bounds.y +  this.TILE_SIZE / 2;\r\n        }\r\n\r\n        get column(): number {\r\n\r\n            let col: number = Math.floor(this.centerX / this.TILE_SIZE);\r\n\r\n            // Do \"bounds checking\" to correct for when sprites are going through\r\n            // tunnels\r\n            if (col < 0) {\r\n                col += Maze.TILE_COUNT_HORIZONTAL;\r\n            }\r\n            else if (col >= Maze.TILE_COUNT_HORIZONTAL) {\r\n                col -= Maze.TILE_COUNT_HORIZONTAL;\r\n            }\r\n\r\n            return col;\r\n        }\r\n\r\n        getFrame() {\r\n            return this._frame;\r\n        }\r\n\r\n        getFrameCount() {\r\n            return this._frameCount;\r\n        }\r\n\r\n        private get intersectBounds(): gtp.Rectangle {\r\n            this._intersectBounds.set(this.bounds.x + 2, this.bounds.y - 2,\r\n                this.bounds.w - 4, this.bounds.h - 4);\r\n            return this._intersectBounds;\r\n        }\r\n\r\n        get moveAmount(): number {\r\n            return 1; // TODO: Perhaps this is no longer needed?\r\n        }\r\n\r\n        get TILE_SIZE(): number {\r\n            return 8; // TODO: Move this somewhere more generic\r\n        }\r\n\r\n        get width(): number {\r\n            return this.bounds.w;\r\n        }\r\n\r\n        get row(): number {\r\n            return Math.floor(this.centerY / this.TILE_SIZE);\r\n        }\r\n\r\n        /**\r\n         * Returns the number of milliseconds that should pass between the times\r\n         * this sprite moves.\r\n         * @return {number} The number of milliseconds.\r\n         */\r\n        abstract getUpdateDelayMillis(): number;\r\n\r\n        get x(): number {\r\n            return this.bounds.x;\r\n        }\r\n\r\n        get y(): number {\r\n            return this.bounds.y;\r\n        }\r\n\r\n        goDownIfPossible(maze: Maze, moveAmount: number): boolean {\r\n            if (this.getCanMoveDown(maze)) {\r\n                this.direction = Direction.SOUTH;\r\n                this.incY(moveAmount);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        goLeftIfPossible(maze: Maze, moveAmount: number): boolean {\r\n            if (this.getCanMoveLeft(maze)) {\r\n                this.direction = Direction.WEST; // May be redundant.\r\n                this.incX(-moveAmount);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        goRightIfPossible(maze: Maze, moveAmount: number): boolean {\r\n            if (this.getCanMoveRight(maze)) {\r\n                this.direction = Direction.EAST; // May be redundant.\r\n                this.incX(moveAmount);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        goUpIfPossible(maze: Maze, moveAmount: number): boolean {\r\n            if (this.getCanMoveUp(maze)) {\r\n                this.direction = Direction.NORTH;\r\n                this.incY(-moveAmount);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        incX(amount: number) {\r\n            this.bounds.x += amount;\r\n            if (this.bounds.x + this.width <= 0) { // Going through tunnel\r\n                this.bounds.x += this.SCREEN_WIDTH;\r\n            }\r\n            else if (this.bounds.x >= this.SCREEN_WIDTH) {\r\n                this.bounds.x -= this.SCREEN_WIDTH;\r\n            }\r\n        }\r\n\r\n        incY(amount: number) {\r\n            this.bounds.y += amount;\r\n        }\r\n\r\n        /**\r\n         * Returns whether this sprite intersects another.\r\n         *\r\n         * @param sprite2 The other sprite.\r\n         * @return Whether these two sprites intersect.\r\n         */\r\n        intersects(sprite2: _BaseSprite): boolean {\r\n            //return bounds.intersects(sprite2.bounds);\r\n            return this.intersectBounds.intersects(sprite2.intersectBounds);\r\n        }\r\n\r\n        reset() {\r\n            this._lastUpdateTime = 0;\r\n        }\r\n\r\n        get SCREEN_WIDTH(): number { // TODO: Move somewhere more generic\r\n            return 224;\r\n        }\r\n\r\n        setLocation(x: number,  y: number) {\r\n            this.bounds.x = x;\r\n            this.bounds.y = y;\r\n        }\r\n\r\n        updateFrame() {\r\n            this._frame = (this._frame + 1) % this.getFrameCount();\r\n        }\r\n\r\n        updatePosition(maze: Maze, time: number) {\r\n            if (time > this._lastUpdateTime + this.getUpdateDelayMillis()) {\r\n                this._lastUpdateTime = time;\r\n                this.updatePositionImpl(maze);\r\n            }\r\n        }\r\n\r\n        set x(x: number) {\r\n            this.bounds.x = x;\r\n        }\r\n\r\n        set y(y: number) {\r\n            this.bounds.y = y;\r\n        }\r\n\r\n        abstract updatePositionImpl(maze: Maze): void;\r\n    }\r\n}\r\n"]}