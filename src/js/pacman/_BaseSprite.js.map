{"version":3,"sources":["pacman/_BaseSprite.ts"],"names":["pacman","pacman._BaseSprite","pacman._BaseSprite.constructor","pacman._BaseSprite.atIntersection","pacman._BaseSprite.getCanMoveDown","pacman._BaseSprite.getCanMoveLeft","pacman._BaseSprite.getCanMoveRight","pacman._BaseSprite.getCanMoveUp","pacman._BaseSprite.centerX","pacman._BaseSprite.centerY","pacman._BaseSprite.column","pacman._BaseSprite.getFrame","pacman._BaseSprite.getFrameCount","pacman._BaseSprite.intersectBounds","pacman._BaseSprite.moveAmount","pacman._BaseSprite.TILE_SIZE","pacman._BaseSprite.width","pacman._BaseSprite.row","pacman._BaseSprite.x","pacman._BaseSprite.y","pacman._BaseSprite.goDownIfPossible","pacman._BaseSprite.goLeftIfPossible","pacman._BaseSprite.goRightIfPossible","pacman._BaseSprite.goUpIfPossible","pacman._BaseSprite.incX","pacman._BaseSprite.incY","pacman._BaseSprite.intersects","pacman._BaseSprite.reset","pacman._BaseSprite.SCREEN_WIDTH","pacman._BaseSprite.setLocation","pacman._BaseSprite.updateFrame","pacman._BaseSprite.updatePosition"],"mappings":"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","file":"pacman/_BaseSprite.js","sourcesContent":["module pacman {\r\n    'use strict';\r\n\r\n    export abstract class _BaseSprite {\r\n\r\n        bounds: gtp.Rectangle;\r\n        private _intersectBounds: gtp.Rectangle;\r\n        direction: Direction;\r\n        _frame: number;\r\n        private _frameCount: number;\r\n        private _lastUpdateTime: number;\r\n\r\n        constructor(frameCount: number) {\r\n            this.bounds = new gtp.Rectangle(0, 0, PacmanGame.SPRITE_SIZE, PacmanGame.SPRITE_SIZE);\r\n            this._intersectBounds = new gtp.Rectangle();\r\n            this.direction = Direction.EAST;\r\n            this._frame = 0;\r\n            this._frameCount = frameCount;\r\n            this._lastUpdateTime = 0;\r\n        }\r\n\r\n        atIntersection(maze: Maze): boolean {\r\n            // TODO: Optimize me\r\n            switch (this.direction) {\r\n                case Direction.NORTH:\r\n                case Direction.SOUTH:\r\n                    return this.getCanMoveLeft(maze) || this.getCanMoveRight(maze);\r\n                case Direction.EAST:\r\n                case Direction.WEST:\r\n                    return this.getCanMoveUp(maze) || this.getCanMoveDown(maze);\r\n            }\r\n            return false;\r\n        }\r\n\r\n        getCanMoveDown(maze: Maze) {\r\n            let x: number = this.centerX;\r\n            let y: number = this.centerY;\r\n            let xRemainder: number = x % this.TILE_SIZE;\r\n            let yRemainder: number = y % this.TILE_SIZE; //(y+TILE_SIZE) % this.TILE_SIZE;\r\n            if (xRemainder === 0 && yRemainder === 0) {\r\n                let row: number = this.row;\r\n                let col: number = this.column;\r\n                return row < 30 && maze.isWalkable(row + 1, col);\r\n            }\r\n            return this.direction === Direction.NORTH || this.direction === Direction.SOUTH;\r\n        }\r\n\r\n        getCanMoveLeft(maze: Maze) {\r\n            let x: number = this.bounds.x;\r\n            if (x < 0) {\r\n                return true; // Going through tunnel.\r\n            }\r\n            x +=  this.TILE_SIZE / 2;\r\n            let y: number = this.centerY;\r\n            let xRemainder: number = x % this.TILE_SIZE; //(x-TILE_SIZE) % this.TILE_SIZE;\r\n            let yRemainder: number = y % this.TILE_SIZE;\r\n            if (xRemainder === 0 && yRemainder === 0) {\r\n                let row: number = this.row;\r\n                let col: number = this.column;\r\n                return col > 0 && maze.isWalkable(row, col - 1);\r\n            }\r\n            return this.direction === Direction.EAST || this.direction === Direction.WEST;\r\n        }\r\n\r\n        getCanMoveRight(maze: Maze) {\r\n            let x: number = this.bounds.x;\r\n            if (x + this.width > this.SCREEN_WIDTH) {\r\n                return true; // Going through tunnel.\r\n            }\r\n            x +=  this.TILE_SIZE / 2;\r\n            let y: number = this.centerY;\r\n            let xRemainder: number = x % this.TILE_SIZE; //(x+TILE_SIZE) % this.TILE_SIZE;\r\n            let yRemainder: number = y % this.TILE_SIZE;\r\n            if (xRemainder === 0 && yRemainder === 0) {\r\n                let row: number = this.row;\r\n                let col: number = this.column;\r\n                return col < 27 && maze.isWalkable(row, col + 1);\r\n            }\r\n            return this.direction === Direction.EAST || this.direction === Direction.WEST;\r\n        }\r\n\r\n        getCanMoveUp(maze: Maze) {\r\n            let x: number = this.centerX;\r\n            let y: number = this.centerY;\r\n            if ((x % 1) !== 0 || (y % 1) !== 0) {\r\n                console.error('Unexpected condition: x === ' + x + ', y === ' + y);\r\n            }\r\n            let xRemainder: number = x % this.TILE_SIZE;\r\n            let yRemainder: number = y % this.TILE_SIZE; //(y-TILE_SIZE) % this.TILE_SIZE;\r\n            if (xRemainder === 0 && yRemainder === 0) {\r\n                let row: number = this.row;\r\n                let col: number = this.column;\r\n                return row > 0 && maze.isWalkable(row - 1, col);\r\n            }\r\n            return this.direction === Direction.NORTH || this.direction === Direction.SOUTH;\r\n        }\r\n\r\n        get centerX(): number {\r\n            return this.bounds.x +  this.TILE_SIZE / 2;\r\n        }\r\n\r\n        get centerY(): number {\r\n            return this.bounds.y +  this.TILE_SIZE / 2;\r\n        }\r\n\r\n        get column(): number {\r\n\r\n            let col: number = Math.floor(this.centerX / this.TILE_SIZE);\r\n\r\n            // Do \"bounds checking\" to correct for when sprites are going through\r\n            // tunnels\r\n            if (col < 0) {\r\n                col += Maze.TILE_COUNT_HORIZONTAL;\r\n            }\r\n            else if (col >= Maze.TILE_COUNT_HORIZONTAL) {\r\n                col -= Maze.TILE_COUNT_HORIZONTAL;\r\n            }\r\n\r\n            return col;\r\n        }\r\n\r\n        getFrame() {\r\n            return this._frame;\r\n        }\r\n\r\n        getFrameCount() {\r\n            return this._frameCount;\r\n        }\r\n\r\n        private get intersectBounds(): gtp.Rectangle {\r\n            this._intersectBounds.set(this.bounds.x + 2, this.bounds.y - 2,\r\n                this.bounds.w - 4, this.bounds.h - 4);\r\n            return this._intersectBounds;\r\n        }\r\n\r\n        get moveAmount(): number {\r\n            return 1; // TODO: Perhaps this is no longer needed?\r\n        }\r\n\r\n        get TILE_SIZE(): number {\r\n            return 8; // TODO: Move this somewhere more generic\r\n        }\r\n\r\n        get width(): number {\r\n            return this.bounds.w;\r\n        }\r\n\r\n        get row(): number {\r\n            return Math.floor(this.centerY / this.TILE_SIZE);\r\n        }\r\n\r\n        /**\r\n         * Returns the number of milliseconds that should pass between the times\r\n         * this sprite moves.\r\n         * @return {number} The number of milliseconds.\r\n         */\r\n        abstract getUpdateDelayMillis(): number;\r\n\r\n        get x(): number {\r\n            return this.bounds.x;\r\n        }\r\n\r\n        get y(): number {\r\n            return this.bounds.y;\r\n        }\r\n\r\n        goDownIfPossible(maze: Maze, moveAmount: number): boolean {\r\n            if (this.getCanMoveDown(maze)) {\r\n                this.direction = Direction.SOUTH;\r\n                this.incY(moveAmount);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        goLeftIfPossible(maze: Maze, moveAmount: number): boolean {\r\n            if (this.getCanMoveLeft(maze)) {\r\n                this.direction = Direction.WEST; // May be redundant.\r\n                this.incX(-moveAmount);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        goRightIfPossible(maze: Maze, moveAmount: number): boolean {\r\n            if (this.getCanMoveRight(maze)) {\r\n                this.direction = Direction.EAST; // May be redundant.\r\n                this.incX(moveAmount);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        goUpIfPossible(maze: Maze, moveAmount: number): boolean {\r\n            if (this.getCanMoveUp(maze)) {\r\n                this.direction = Direction.NORTH;\r\n                this.incY(-moveAmount);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        incX(amount: number) {\r\n            this.bounds.x += amount;\r\n            if (this.bounds.x + this.width <= 0) { // Going through tunnel\r\n                this.bounds.x += this.SCREEN_WIDTH;\r\n            }\r\n            else if (this.bounds.x >= this.SCREEN_WIDTH) {\r\n                this.bounds.x -= this.SCREEN_WIDTH;\r\n            }\r\n        }\r\n\r\n        incY(amount: number) {\r\n            this.bounds.y += amount;\r\n        }\r\n\r\n        /**\r\n         * Returns whether this sprite intersects another.\r\n         *\r\n         * @param sprite2 The other sprite.\r\n         * @return Whether these two sprites intersect.\r\n         */\r\n        intersects(sprite2: _BaseSprite): boolean {\r\n            //return bounds.intersects(sprite2.bounds);\r\n            return this.intersectBounds.intersects(sprite2.intersectBounds);\r\n        }\r\n\r\n        reset() {\r\n            this._lastUpdateTime = 0;\r\n        }\r\n\r\n        get SCREEN_WIDTH(): number { // TODO: Move somewhere more generic\r\n            return 224;\r\n        }\r\n\r\n        setLocation(x: number,  y: number) {\r\n            this.bounds.x = x;\r\n            this.bounds.y = y;\r\n        }\r\n\r\n        updateFrame() {\r\n            this._frame = (this._frame + 1) % this.getFrameCount();\r\n        }\r\n\r\n        updatePosition(maze: Maze, time: number) {\r\n            if (time > this._lastUpdateTime + this.getUpdateDelayMillis()) {\r\n                this._lastUpdateTime = time;\r\n                this.updatePositionImpl(maze);\r\n            }\r\n        }\r\n\r\n        set x(x: number) {\r\n            this.bounds.x = x;\r\n        }\r\n\r\n        set y(y: number) {\r\n            this.bounds.y = y;\r\n        }\r\n\r\n        abstract updatePositionImpl(maze: Maze): void;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}