{"version":3,"sources":["pacman/_BaseSprite.ts"],"names":["pacman","pacman._BaseSprite","pacman._BaseSprite.constructor","pacman._BaseSprite.atIntersection","pacman._BaseSprite.getCanMoveDown","pacman._BaseSprite.getCanMoveLeft","pacman._BaseSprite.getCanMoveRight","pacman._BaseSprite.getCanMoveUp","pacman._BaseSprite.centerX","pacman._BaseSprite.centerY","pacman._BaseSprite.column","pacman._BaseSprite.getFrame","pacman._BaseSprite.getFrameCount","pacman._BaseSprite.moveAmount","pacman._BaseSprite.TILE_SIZE","pacman._BaseSprite.width","pacman._BaseSprite.row","pacman._BaseSprite.x","pacman._BaseSprite.y","pacman._BaseSprite.goDownIfPossible","pacman._BaseSprite.goLeftIfPossible","pacman._BaseSprite.goRightIfPossible","pacman._BaseSprite.goUpIfPossible","pacman._BaseSprite.incX","pacman._BaseSprite.incY","pacman._BaseSprite.reset","pacman._BaseSprite.SCREEN_WIDTH","pacman._BaseSprite.setLocation","pacman._BaseSprite.updateFrame","pacman._BaseSprite.updatePosition"],"mappings":"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CAACA,CAACA;gBAC/BA,IAAIA,CAACA,SAASA,GAAGA,gBAASA,CAACA,KAAKA,CAACA;gBACjCA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;gBACtBA,MAAMA,CAACA,IAAIA,CAACA;YACbA,CAACA;YACDA,MAAMA,CAACA,KAAKA,CAACA;QACdA,CAACA;QAEDlB,sCAAgBA,GAAhBA,UAAiBA,IAAUA,EAAEA,UAAkBA;YAC9CmB,EAAEA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/BA,IAAIA,CAACA,SAASA,GAAGA,gBAASA,CAACA,IAAIA,CAACA,CAACA,oBAAoBA;gBACrDA,IAAIA,CAACA,IAAIA,CAACA,CAACA,UAAUA,CAACA,CAACA;gBACvBA,MAAMA,CAACA,IAAIA,CAACA;YACbA,CAACA;YACDA,MAAMA,CAACA,KAAKA,CAACA;QACdA,CAACA;QAEDnB,uCAAiBA,GAAjBA,UAAkBA,IAAUA,EAAEA,UAAkBA;YAC/CoB,EAAEA,CAACA,CAACA,IAAIA,CAACA,eAAeA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAChCA,IAAIA,CAACA,SAASA,GAAGA,gBAASA,CAACA,IAAIA,CAACA,CAACA,oBAAoBA;gBACrDA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;gBACtBA,MAAMA,CAACA,IAAIA,CAACA;YACbA,CAACA;YACDA,MAAMA,CAACA,KAAKA,CAACA;QACdA,CAACA;QAEDpB,oCAAcA,GAAdA,UAAeA,IAAUA,EAAEA,UAAkBA;YAC5CqB,EAAEA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC7BA,IAAIA,CAACA,SAASA,GAAGA,gBAASA,CAACA,KAAKA,CAACA;gBACjCA,IAAIA,CAACA,IAAIA,CAACA,CAACA,UAAUA,CAACA,CAACA;gBACvBA,MAAMA,CAACA,IAAIA,CAACA;YACbA,CAACA;YACDA,MAAMA,CAACA,KAAKA,CAACA;QACdA,CAACA;QAEArB,0BAAIA,GAAJA,UAAKA,MAAcA;YACjBsB,IAAIA,CAACA,MAAMA,CAACA,CAACA,IAAIA,MAAMA,CAACA;YACxBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA,KAAKA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACpCA,IAAIA,CAACA,MAAMA,CAACA,CAACA,IAAIA,IAAIA,CAACA,YAAYA,CAACA;YACrCA,CAACA;YACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,IAAIA,IAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA;gBAC5CA,IAAIA,CAACA,MAAMA,CAACA,CAACA,IAAIA,IAAIA,CAACA,YAAYA,CAACA;YACrCA,CAACA;QACHA,CAACA;QAEDtB,0BAAIA,GAAJA,UAAKA,MAAcA;YACjBuB,IAAIA,CAACA,MAAMA,CAACA,CAACA,IAAIA,MAAMA,CAACA;QAC1BA,CAACA;QAEDvB,2BAAKA,GAALA;YACGwB,IAAIA,CAACA,eAAeA,GAAGA,CAACA,CAACA;QAC5BA,CAACA;QAEDxB,sBAAIA,qCAAYA;iBAAhBA;gBACEyB,MAAMA,CAACA,GAAGA,CAACA;YACbA,CAACA;;;WAAAzB;QAEDA,iCAAWA,GAAXA,UAAYA,CAASA,EAAGA,CAASA;YAC9B0B,IAAIA,CAACA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;YAClBA,IAAIA,CAACA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;QACrBA,CAACA;QAED1B,iCAAWA,GAAXA;YACE2B,IAAIA,CAACA,MAAMA,GAAGA,CAACA,IAAIA,CAACA,MAAMA,GAAGA,CAACA,CAACA,GAAGA,IAAIA,CAACA,aAAaA,EAAEA,CAACA;QACzDA,CAACA;QAED3B,oCAAcA,GAAdA,UAAeA,IAAUA,EAAEA,IAAYA;YACrC4B,EAAEA,CAACA,CAACA,IAAIA,GAAGA,IAAIA,CAACA,eAAeA,GAAGA,IAAIA,CAACA,oBAAoBA,EAAEA,CAACA,CAACA,CAACA;gBAC9DA,IAAIA,CAACA,eAAeA,GAAGA,IAAIA,CAACA;gBAC5BA,IAAIA,CAACA,kBAAkBA,CAACA,IAAIA,CAACA,CAACA;YAChCA,CAACA;QACHA,CAACA;QAWH5B,kBAACA;IAADA,CA7OAD,AA6OCC,IAAAD;IA7OqBA,kBAAWA,cA6OhCA,CAAAA;AACHA,CAACA,EAjPM,MAAM,KAAN,MAAM,QAiPZ","file":"pacman/_BaseSprite.js","sourcesContent":["module pacman {\r\n  'use strict';\r\n\r\n  export abstract class _BaseSprite {\r\n\r\n    bounds: gtp.Rectangle;\r\n    _intersectBounds: gtp.Rectangle;\r\n    direction: Direction;\r\n    _frame: number;\r\n    _frameCount: number;\r\n    _lastUpdateTime: number;\r\n\r\n    constructor(frameCount: number) {\r\n      this.bounds = new gtp.Rectangle();\r\n      this._intersectBounds = new gtp.Rectangle();\r\n      this.direction = Direction.EAST;\r\n      this._frame = 0;\r\n      this._frameCount = frameCount;\r\n      this._lastUpdateTime = 0;\r\n    }\r\n\r\n    atIntersection(maze: Maze): boolean {\r\n      // TODO: Optimize me\r\n      switch (this.direction) {\r\n        case Direction.NORTH:\r\n        case Direction.SOUTH:\r\n          return this.getCanMoveLeft(maze) || this.getCanMoveRight(maze);\r\n        case Direction.EAST:\r\n        case Direction.WEST:\r\n          return this.getCanMoveUp(maze) || this.getCanMoveDown(maze);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    getCanMoveDown(maze: Maze) {\r\n      let x: number = this.centerX;\r\n  \t\tlet y: number = this.centerY;\r\n  \t\tlet xRemainder: number = x % this.TILE_SIZE;\r\n  \t\tlet yRemainder: number = y % this.TILE_SIZE;//(y+TILE_SIZE) % this.TILE_SIZE;\r\n  \t\tif (xRemainder === 0 && yRemainder === 0) {\r\n  \t\t\tlet row: number = this.row;\r\n  \t\t\tlet col: number = this.column;\r\n  \t\t\treturn row<30 && maze.isWalkable(row + 1, col);\r\n  \t\t}\r\n  \t\treturn this.direction == Direction.NORTH || this.direction == Direction.SOUTH;\r\n  \t}\r\n\r\n  \tgetCanMoveLeft(maze: Maze) {\r\n  \t\tlet x: number = this.bounds.x;\r\n  \t\tif (x<0) {\r\n  \t\t\treturn true; // Going through tunnel.\r\n  \t\t}\r\n  \t\tx +=  this.TILE_SIZE / 2;\r\n  \t\tlet y: number = this.centerY;\r\n  \t\tlet xRemainder: number = x % this.TILE_SIZE;//(x-TILE_SIZE) % this.TILE_SIZE;\r\n  \t\tlet yRemainder: number = y % this.TILE_SIZE;\r\n  \t\tif (xRemainder === 0 && yRemainder === 0) {\r\n        let row: number = this.row;\r\n        let col: number = this.column;\r\n        return col>0 && maze.isWalkable(row, col - 1);\r\n  \t\t}\r\n      return this.direction == Direction.EAST || this.direction == Direction.WEST;\r\n  \t}\r\n\r\n  \tgetCanMoveRight(maze: Maze) {\r\n  \t\tlet x: number = this.bounds.x;\r\n  \t\tif (x + this.width > this.SCREEN_WIDTH) {\r\n  \t\t\treturn true; // Going through tunnel.\r\n  \t\t}\r\n  \t\tx +=  this.TILE_SIZE / 2;\r\n  \t\tlet y: number = this.centerY;\r\n  \t\tlet xRemainder: number = x % this.TILE_SIZE;//(x+TILE_SIZE) % this.TILE_SIZE;\r\n  \t\tlet yRemainder: number = y % this.TILE_SIZE;\r\n  \t\tif (xRemainder === 0 && yRemainder === 0) {\r\n        let row: number = this.row;\r\n  \t\t\tlet col: number = this.column;\r\n  \t\t\treturn col<27 && maze.isWalkable(row, col + 1);\r\n  \t\t}\r\n      return this.direction == Direction.EAST || this.direction == Direction.WEST;\r\n  \t}\r\n\r\n  \tgetCanMoveUp(maze: Maze) {\r\n  \t\tlet x: number = this.centerX;\r\n  \t\tlet y: number = this.centerY;\r\n  \t\tlet xRemainder: number = x % this.TILE_SIZE;\r\n  \t\tlet yRemainder: number = y % this.TILE_SIZE;//(y-TILE_SIZE) % this.TILE_SIZE;\r\n  \t\tif (xRemainder === 0 && yRemainder === 0) {\r\n        let row: number = this.row;\r\n  \t\t\tlet col: number = this.column;\r\n  \t\t\treturn row>0 && maze.isWalkable(row - 1, col);\r\n  \t\t}\r\n      return this.direction == Direction.NORTH || this.direction == Direction.SOUTH;\r\n  \t}\r\n\r\n    get centerX(): number {\r\n      return this.bounds.x +  this.TILE_SIZE / 2;\r\n    }\r\n\r\n    get centerY(): number {\r\n      return this.bounds.y +  this.TILE_SIZE / 2;\r\n    }\r\n\r\n    get column(): number {\r\n\r\n      var col: number = Math.floor(this.centerX / this.TILE_SIZE);\r\n\r\n      // Do \"bounds checking\" to correct for when sprites are going through\r\n      // tunnels\r\n      if (col < 0) {\r\n        col += Maze.TILE_COUNT_HORIZONTAL;\r\n      }\r\n      else if (col >= Maze.TILE_COUNT_HORIZONTAL) {\r\n        col -= Maze.TILE_COUNT_HORIZONTAL;\r\n      }\r\n\r\n      return col;\r\n    }\r\n\r\n    getFrame() {\r\n       return this._frame;\r\n    }\r\n\r\n    getFrameCount() {\r\n       return this._frameCount;\r\n    }\r\n\r\n    get moveAmount(): number {\r\n      return 1; // TODO: Perhaps this is no longer needed?\r\n    }\r\n\r\n    get TILE_SIZE(): number {\r\n      return 8; // TODO: Move this somewhere more generic\r\n    }\r\n\r\n    get width(): number {\r\n      return this.bounds.w;\r\n    }\r\n\r\n    get row(): number {\r\n      return Math.floor(this.centerY / this.TILE_SIZE);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of milliseconds that should pass between the times\r\n     * this sprite moves.\r\n     * @return {number} The number of milliseconds.\r\n     */\r\n    abstract getUpdateDelayMillis(): number;\r\n\r\n    get x(): number {\r\n      return this.bounds.x;\r\n    }\r\n\r\n    get y(): number {\r\n      return this.bounds.y;\r\n    }\r\n\r\n    goDownIfPossible(maze: Maze, moveAmount: number): boolean {\r\n  \t\tif (this.getCanMoveDown(maze)) {\r\n  \t\t\tthis.direction = Direction.SOUTH;\r\n  \t\t\tthis.incY(moveAmount);\r\n  \t\t\treturn true;\r\n  \t\t}\r\n  \t\treturn false;\r\n  \t}\r\n\r\n  \tgoLeftIfPossible(maze: Maze, moveAmount: number): boolean {\r\n  \t\tif (this.getCanMoveLeft(maze)) {\r\n  \t\t\tthis.direction = Direction.WEST; // May be redundant.\r\n  \t\t\tthis.incX(-moveAmount);\r\n  \t\t\treturn true;\r\n  \t\t}\r\n  \t\treturn false;\r\n  \t}\r\n\r\n  \tgoRightIfPossible(maze: Maze, moveAmount: number): boolean {\r\n  \t\tif (this.getCanMoveRight(maze)) {\r\n  \t\t\tthis.direction = Direction.EAST; // May be redundant.\r\n  \t\t\tthis.incX(moveAmount);\r\n  \t\t\treturn true;\r\n  \t\t}\r\n  \t\treturn false;\r\n  \t}\r\n\r\n  \tgoUpIfPossible(maze: Maze, moveAmount: number): boolean {\r\n  \t\tif (this.getCanMoveUp(maze)) {\r\n  \t\t\tthis.direction = Direction.NORTH;\r\n  \t\t\tthis.incY(-moveAmount);\r\n  \t\t\treturn true;\r\n  \t\t}\r\n  \t\treturn false;\r\n  \t}\r\n\r\n    incX(amount: number) {\r\n      this.bounds.x += amount;\r\n      if (this.bounds.x + this.width <= 0) { // Going through tunnel\r\n        this.bounds.x += this.SCREEN_WIDTH;\r\n      }\r\n      else if (this.bounds.x >= this.SCREEN_WIDTH) {\r\n        this.bounds.x -= this.SCREEN_WIDTH;\r\n      }\r\n    }\r\n\r\n    incY(amount: number) {\r\n      this.bounds.y += amount;\r\n    }\r\n\r\n    reset() {\r\n       this._lastUpdateTime = 0;\r\n    }\r\n\r\n    get SCREEN_WIDTH(): number { // TODO: Move somewhere more generic\r\n      return 224;\r\n    }\r\n\r\n    setLocation(x: number,  y: number) {\r\n       this.bounds.x = x;\r\n       this.bounds.y = y;\r\n    }\r\n\r\n    updateFrame() {\r\n      this._frame = (this._frame + 1) % this.getFrameCount();\r\n    }\r\n\r\n    updatePosition(maze: Maze, time: number) {\r\n      if (time > this._lastUpdateTime + this.getUpdateDelayMillis()) {\r\n        this._lastUpdateTime = time;\r\n        this.updatePositionImpl(maze);\r\n      }\r\n    }\r\n\r\n    set x(x: number) {\r\n      this.bounds.x = x;\r\n    }\r\n\r\n    set y(y: number) {\r\n      this.bounds.y = y;\r\n    }\r\n\r\n    abstract updatePositionImpl(maze: Maze): void;\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}