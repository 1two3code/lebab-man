{"version":3,"sources":["pacman/Fruit.ts"],"names":["pacman","pacman.Fruit","pacman.Fruit.constructor","pacman.Fruit.pointsIndex","pacman.Fruit.getUpdateDelayMillis","pacman.Fruit.paint","pacman.Fruit.updatePositionImpl"],"mappings":";;;;;AAAA,IAAO,MAAM,CAkEZ;AAlED,WAAO,MAAM,EAAC,CAAC;IACXA,YAAYA,CAACA;IAEbA;QAA2BC,yBAAWA;QAYlCA;YACIC,kBAAMA,CAACA,CAACA,CAACA;YAETA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,CAACA,kBAAkBA,EAAEA,GAAGA,CAACA,CAACA;YAC/CA,IAAIA,KAAKA,GAAWA,IAAIA,CAACA,KAAKA,CAACA;YAC/BA,EAAEA,CAACA,CAACA,KAAKA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACZA,KAAKA,GAAGA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA;YAC9BA,CAACA;YAEDA,IAAIA,CAACA,IAAIA,GAAGA,KAAKA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YAC9BA,IAAIA,CAACA,IAAIA,GAAGA,KAAKA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YAC9BA,IAAIA,CAACA,YAAYA,GAAGA,KAAKA,CAACA,SAASA,CAACA,KAAKA,CAACA,CAACA;QAC/CA,CAACA;QASDD,sBAAIA,8BAAWA;YAPfA;;;;;;eAMGA;iBACHA;gBACIE,MAAMA,CAACA,IAAIA,CAACA,YAAYA,CAACA;YAC7BA,CAACA;;;WAAAF;QAEDA;;;;;WAKGA;QACHA,oCAAoBA,GAApBA;YACIG,MAAMA,CAACA,YAAYA,CAACA,CAACA,qCAAqCA;QAC9DA,CAACA;QAEDH;;;;WAIGA;QACHA,qBAAKA,GAALA,UAAMA,GAA6BA;YAC/BI,IAAIA,WAAWA,GAAWA,iBAAUA,CAACA,WAAWA,CAACA;YACjDA,IAAIA,IAAIA,GAAWA,IAAIA,CAACA,IAAIA,GAAGA,WAAWA,CAACA;YAC3CA,IAAIA,IAAIA,GAAWA,IAAIA,CAACA,IAAIA,GAAGA,WAAWA,CAACA;YAC3CA,IAAIA,CAACA,UAAUA,CAACA,IAAIA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA,EAAEA,IAAIA,EAAEA,IAAIA,CAACA,CAACA;QAChDA,CAACA;QAEDJ,kCAAkBA,GAAlBA,UAAmBA,IAAUA;YACzBK,kCAAkCA;QACtCA,CAACA;QAvDDL,2DAA2DA;QAC3DA,wDAAwDA;QACzCA,UAAIA,GAAaA,CAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,CAAEA,CAACA;QACpDA,UAAIA,GAAaA,CAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAAEA,CAACA;QAC5CA,eAASA,GAAaA,CAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,EAAEA,CAAEA,CAACA;QAoDtEA,YAACA;IAADA,CA9DAD,AA8DCC,EA9D0BD,kBAAWA,EA8DrCA;IA9DYA,YAAKA,QA8DjBA,CAAAA;AACLA,CAACA,EAlEM,MAAM,KAAN,MAAM,QAkEZ","file":"pacman/Fruit.js","sourcesContent":["module pacman {\r\n    'use strict';\r\n\r\n    export class Fruit extends _BaseSprite {\r\n\r\n        private _row: number;\r\n        private _col: number;\r\n        private _pointsIndex: number;\r\n\r\n        // 0=Cherry, 1=Strawberry, 2=Peach, 3=Yellow bell, 4=Apple,\r\n        // 5=Green thing (grapes?), 6=Space Invaders ship, 7=Key\r\n        private static COLS: number[] = [ 12, 13, 12, 13, 13, 12, 13, 13 ];\r\n        private static ROWS: number[] = [ 4, 4, 5, 5, 2, 6, 6, 3 ];\r\n        private static PTS_INDEX: number[] = [ 0, 2, 4, 5, 10, 7, 9, 11 ];\r\n\r\n        constructor() {\r\n            super(1);\r\n\r\n            this.setLocation(game.PENALTY_BOX_EXIT_X, 140);\r\n            let level: number = game.level;\r\n            if (level > 7) { // Level 8+ => any fruit is possible\r\n                level = game.randomInt(8);\r\n            }\r\n\r\n            this._col = Fruit.COLS[level];\r\n            this._row = Fruit.ROWS[level];\r\n            this._pointsIndex = Fruit.PTS_INDEX[level];\r\n        }\r\n\r\n        /**\r\n         * Returns the index into the \"points\" array that contains this\r\n         * fruit's point value.\r\n         *\r\n         * @return {number} The index into the \"points\" array that contains this\r\n         *         fruit's point value.\r\n         */\r\n        get pointsIndex(): number {\r\n            return this._pointsIndex;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of milliseconds that should pass between the times\r\n         * this fruit moves.\r\n         *\r\n         * @return The update delay, in milliseconds.\r\n         */\r\n        getUpdateDelayMillis(): number {\r\n            return 100000000000; // Make large, as fruit doesn't move.\r\n        }\r\n\r\n        /**\r\n         * Paints this sprite at its current location.\r\n         *\r\n         * @param {CanvasRenderingContext2D} ctx The rendering context.\r\n         */\r\n        paint(ctx: CanvasRenderingContext2D) {\r\n            let SPRITE_SIZE: number = PacmanGame.SPRITE_SIZE;\r\n            let srcX: number = this._col * SPRITE_SIZE;\r\n            let srcY: number = this._row * SPRITE_SIZE;\r\n            game.drawSprite(this.x, this.y, srcX, srcY);\r\n        }\r\n\r\n        updatePositionImpl(maze: Maze) {\r\n            // Do nothing; fruit doesn't move.\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}