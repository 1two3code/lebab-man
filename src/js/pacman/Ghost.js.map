{"version":3,"sources":["pacman/Ghost.ts"],"names":["pacman","pacman.MotionState","pacman.Ghost","pacman.Ghost.constructor","pacman.Ghost.changeDirectionFallback","pacman.Ghost.continueInCurrentDirection","pacman.Ghost._getBlueTimeForLevel","pacman.Ghost.getFirstExitDelayNanos","pacman.Ghost.getFrameCount","pacman.Ghost.motionState","pacman.Ghost.getUpdateDelayMillis","pacman.Ghost.isBlue","pacman.Ghost.isEyes","pacman.Ghost.paint","pacman.Ghost.possiblyTurnBlue","pacman.Ghost.reset","pacman.Ghost.setCorner","pacman.Ghost._updatePositionBlue","pacman.Ghost._updatePositionEyes","pacman.Ghost._updatePositionEyesEnteringBox","pacman.Ghost.updatePositionImpl","pacman.Ghost.updatePositionInBox","pacman.Ghost.updatePositionLeavingBox","pacman.Ghost.updatePositionScattering"],"mappings":";;;;;AAAA,IAAO,MAAM,CAivBZ;AAjvBD,WAAO,QAAM,EAAC,CAAC;IACbA,YAAYA,CAACA;IAEbA,WAAYA,WAAWA;QACrBC,iDAAUA,CAAAA;QACVA,2DAAeA,CAAAA;QACfA,iEAAkBA,CAAAA;QAClBA,yDAAcA,CAAAA;QACdA,6CAAQA,CAAAA;QACRA,6CAAQA,CAAAA;QACRA,uEAAqBA,CAAAA;IACvBA,CAACA,EARWD,oBAAWA,KAAXA,oBAAWA,QAQtBA;IARDA,IAAYA,WAAWA,GAAXA,oBAQXA,CAAAA;IAEDA;QAAoCE,yBAAWA;QA6D7CA,eAAYA,IAAgBA,EAAEA,YAAoBA,EAAEA,gBAAwBA;YAC1EC,kBAAMA,CAACA,CAACA,CAACA;YACTA,IAAIA,CAACA,IAAIA,GAAGA,IAAIA,CAACA;YACjBA,IAAIA,CAACA,OAAOA,GAAGA,IAAIA,GAAGA,CAACA,KAAKA,EAAEA,CAACA;YAC/BA,IAAIA,CAACA,aAAaA,GAAGA,YAAYA,CAACA;YAClCA,IAAIA,CAACA,iBAAiBA,GAAGA,gBAAgBA,CAACA;YAC1CA,IAAIA,CAACA,KAAKA,EAAEA,CAACA;QACfA,CAACA;QAEDD,uCAAuBA,GAAvBA,UAAwBA,IAAUA;YAEhCE,IAAIA,UAAUA,GAAWA,IAAIA,CAACA,UAAUA,CAACA;YACzCA,IAAIA,IAAIA,GAAWA,GAAGA,CAACA,KAAKA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA;YAE1CA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA;gBAEbA,KAAKA,CAACA;oBACJA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;wBAC3CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;4BAC7CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;gCAC9CA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA;4BAC1CA,CAACA;wBACHA,CAACA;oBACHA,CAACA;oBACDA,KAAKA,CAACA;gBAERA,KAAKA,CAACA;oBACJA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;wBAC7CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;4BAC3CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;gCAC7CA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA;4BAC3CA,CAACA;wBACHA,CAACA;oBACHA,CAACA;oBACDA,KAAKA,CAACA;gBAERA,KAAKA,CAACA;oBACJA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;wBAC7CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;4BAC7CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;gCAC9CA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA;4BACxCA,CAACA;wBACHA,CAACA;oBACHA,CAACA;oBACDA,KAAKA,CAACA;gBAERA,KAAKA,CAACA;oBACJA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;wBAC9CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;4BAC3CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;gCAC7CA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA;4BAC1CA,CAACA;wBACHA,CAACA;oBACHA,CAACA;oBACDA,KAAKA,CAACA;YACVA,CAACA;QAEHA,CAACA;QAEDF;;;;WAIEA;QACHA,0CAA0BA,GAA1BA,UAA2BA,UAAkBA;YAC5CG,MAAMA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA;gBACxBA,KAAKA,kBAASA,CAACA,KAAKA;oBACnBA,IAAIA,CAACA,IAAIA,CAACA,CAACA,UAAUA,CAACA,CAACA;oBACvBA,KAAKA,CAACA;gBACPA,KAAKA,kBAASA,CAACA,IAAIA;oBAClBA,IAAIA,CAACA,IAAIA,CAACA,CAACA,UAAUA,CAACA,CAACA;oBACvBA,KAAKA,CAACA;gBACPA,KAAKA,kBAASA,CAACA,KAAKA;oBACnBA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;oBACtBA,KAAKA,CAACA;gBACPA,KAAKA,kBAASA,CAACA,IAAIA;oBAClBA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;oBACtBA,KAAKA,CAACA;YACRA,CAACA;QACFA,CAACA;QAEAH;;;;;;WAMEA;QACKA,oCAAoBA,GAA5BA,UAA6BA,KAAaA;YACzCI,MAAMA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;gBACfA,KAAKA,CAACA,CAACA;gBACPA,KAAKA,CAACA;oBACLA,MAAMA,CAACA,IAAIA,CAACA;gBACbA,KAAKA,CAACA,CAACA;gBACPA,KAAKA,CAACA;oBACLA,MAAMA,CAACA,IAAIA,CAACA;gBACbA,KAAKA,CAACA,CAACA;gBACPA,KAAKA,CAACA;oBACLA,MAAMA,CAACA,IAAIA,CAACA;gBACbA,KAAKA,CAACA,CAACA;gBACPA,KAAKA,CAACA;oBACLA,MAAMA,CAACA,IAAIA,C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ACA,cAAcA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA;oBAC7DA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;wBAC5CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;4BAC9CA,EAAEA,CAACA,CAACA,MAAMA,GAAGA,GAAGA,CAACA,CAACA,CAACA;gCAClBA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;oCAC/CA,IAAIA,CAACA,SAASA,GAAGA,kBAASA,CAACA,IAAIA,CAACA;oCAChCA,IAAIA,CAACA,IAAIA,CAACA,CAACA,UAAUA,CAACA,CAACA,CAACA,0BAA0BA;gCACnDA,CAACA;4BACFA,CAACA;4BACDA,IAAIA,CAACA,CAACA;gCACLA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;oCAC9CA,IAAIA,CAACA,SAASA,GAAGA,kBAASA,CAACA,IAAIA,CAACA;oCAChCA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA,CAACA,0BAA0BA;gCAClDA,CAACA;4BACFA,CAACA;wBACFA,CAACA;oBACFA,CAACA;oBACDA,KAAKA,GAAGA,IAAIA,CAACA;gBACdA,CAACA;gBAIDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,GAAGA,KAAKA,MAAMA,IAAIA,IAAIA,CAACA,iBAAiBA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA;oBACrEA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;wBAC9CA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;4BAC/CA,EAAEA,CAACA,CAACA,MAAMA,GAACA,GAAGA,CAACA,CAACA,CAACA;gCAChBA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;oCAC9CA,IAAIA,CAACA,SAASA,GAAGA,kBAASA,CAACA,KAAKA,CAACA;oCACjCA,IAAIA,CAACA,IAAIA,CAACA,CAACA,UAAUA,CAACA,CAACA,CAACA,0BAA0BA;gCACnDA,CAACA;4BACFA,CAACA;4BACDA,IAAIA,CAACA,CAACA;gCACLA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,CAACA,CAACA;oCAC5CA,IAAIA,CAACA,SAASA,GAAGA,kBAASA,CAACA,KAAKA,CAACA;oCACjCA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA,CAACA,0BAA0BA;gCAClDA,CAACA;4BACFA,CAACA;wBACFA,CAACA;oBACFA,CAACA;oBACDA,KAAKA,GAAGA,IAAIA,CAACA;gBACdA,CAACA;gBAEDA,EAAEA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;oBACZA,IAAIA,CAACA,uBAAuBA,CAACA,IAAIA,CAACA,CAACA;gBACpCA,CAACA;YAEFA,CAACA;YAIDA,IAAIA,CAACA,CAACA;gBACLA,IAAIA,CAACA,0BAA0BA,CAACA,UAAUA,CAACA,CAACA;YAC7CA,CAACA;YAEDA,iEAAiEA;YACjEA,eAAeA;YACfA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,IAAIA,IAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA;gBACxCA,IAAIA,CAACA,WAAWA,GAAGA,IAAIA,CAACA,cAAcA,CAACA;YACxCA,CAACA;QAEFA,CAACA;QAWDf;;;;;WAKGA;QACKA,mCAAmBA,GAA3BA,UAA4BA,IAAUA;YAErCgB,SAASA;Y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AAKA,kBAASA,CAACA,IAAIA,CAACA,CAACA,gBAAgBA;gBACrCA,KAAKA,kBAASA,CAACA,KAAKA;oBACnBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,GAAGA,GAAGA,CAACA,CAACA,CAACA;wBAClBA,IAAIA,CAACA,IAAIA,CAACA,CAACA,UAAUA,CAACA,CAACA;oBACxBA,CAACA;oBACDA,IAAIA,CAACA,CAACA;wBACLA,IAAIA,CAACA,SAASA,GAAGA,kBAASA,CAACA,KAAKA,CAACA;oBAClCA,CAACA;oBACDA,KAAKA,CAACA;gBACPA,KAAKA,kBAASA,CAACA,IAAIA,CAACA,CAACA,gBAAgBA;gBACrCA,KAAKA,kBAASA,CAACA,KAAKA;oBACnBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,GAAGA,GAAGA,CAACA,CAACA,CAACA;wBAClBA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;oBACvBA,CAACA;oBACDA,IAAIA,CAACA,CAACA;wBACLA,IAAIA,CAACA,SAASA,GAAGA,kBAASA,CAACA,KAAKA,CAACA;oBAClCA,CAACA;oBACDA,KAAKA,CAACA;YACRA,CAACA;YAEDA,iEAAiEA;YACjEA,eAAeA;YACfA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,IAAIA,IAAIA,CAACA,sBAAsBA,EAAEA,CAACA,CAACA,CAACA;gBACpDA,IAAIA,CAACA,WAAWA,GAAGA,WAAWA,CAACA,WAAWA,CAACA;gBAAAA,CAACA;YAC7CA,CAACA;QAEFA,CAACA;QAGDnB;;;;WAIGA;QACHA,wCAAwBA,GAAxBA,UAAyBA,IAAUA;YAElCoB,IAAIA,UAAUA,GAAWA,CAACA,CAACA,CAAAA,kBAAkBA;YAE7CA,IAAIA,CAACA,GAAWA,IAAIA,CAACA,CAACA,CAACA;YACvBA,EAAEA,CAACA,CAACA,CAACA,GAAGA,IAAIA,CAACA,kBAAkBA,CAACA,CAACA,CAACA;gBACjCA,IAAIA,CAACA,SAASA,GAAGA,kBAASA,CAACA,IAAIA,CAACA,CAACA,mBAAmBA;gBACpD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","file":"pacman/Ghost.js","sourcesContent":["module pacman {\r\n  'use strict';\r\n\r\n  export enum MotionState {\r\n    IN_BOX = 0,\r\n    LEAVING_BOX = 1,\r\n    CHASING_PACMAN = 2,\r\n    SCATTERING = 3,\r\n    BLUE = 4,\r\n    EYES = 5,\r\n    EYES_ENTERING_BOX = 6\r\n  }\r\n\r\n  export abstract class Ghost extends _BaseSprite {\r\n\r\n    /**\r\n     * TODO: Remove the need for this variable!  Yucky!\r\n     */\r\n    game: PacmanGame;\r\n\r\n    /**\r\n  \t * The ghost's current motion state.\r\n  \t */\r\n  \tprivate _motionState: number;\r\n\r\n  \t/**\r\n  \t * The \"corner\" this ghost will retreat to when in \"scatter\" mode.\r\n  \t */\r\n  \tprivate _corner: gtp.Point;\r\n\r\n  \t/**\r\n  \t * The number of times this ghost has been in \"scatter\" mode for this\r\n  \t * level and PacMan life.\r\n  \t */\r\n  \tprivate _scatterCount: number;\r\n\r\n  \t/**\r\n  \t * If in scatter mode, this is the time at which the mode should switch\r\n  \t * to \"chasing PacMan\" mode.  If not in scatter mode, this value is\r\n  \t * invalid.\r\n  \t */\r\n  \tprivate _exitScatteringTime: number;\r\n\r\n  \t/**\r\n  \t * The time at which this ghost should switch from \"chasing PacMan\" mode\r\n  \t * to scatter mode.  If not in the \"chasing PacMan\" motion state,\r\n  \t * this value is invalid.\r\n  \t */\r\n  \tstartScatteringTime: number;\r\n\r\n  \t/**\r\n  \t * The time at which a ghost should switch from \"blue mode\" to their\r\n  \t * previous state (chasing PacMan or scattering).  If not in the \"blue\"\r\n  \t * motion state, this value is invalid.\r\n  \t */\r\n  \texitBlueTime: number;\r\n\r\n  \t/**\r\n  \t * The motion state to revert back to when a ghost leaves \"blue mode.\"\r\n  \t * If a ghost is not in \"blue mode,\" this value is invalid.\r\n  \t */\r\n  \tprivate _previousState: number;\r\n\r\n  \t/**\r\n  \t * The y-coordinate of the sprites in the sprite sheet to use.\r\n  \t */\r\n  \tprivate _spriteSheetY: number;\r\n\r\n  \t/**\r\n  \t * The number of seconds this ghost will wait before leaving the penalty\r\n  \t * box for the first time.\r\n  \t */\r\n  \tprivate _exitDelaySeconds: number;\r\n\r\n    constructor(game: PacmanGame, spriteSheetY: number, exitDelaySeconds: number) {\r\n      super(2);\r\n      this.game = game;\r\n      this._corner = new gtp.Point();\r\n      this._spriteSheetY = spriteSheetY;\r\n      this._exitDelaySeconds = exitDelaySeconds;\r\n      this.reset();\r\n    }\r\n\r\n    changeDirectionFallback(maze: Maze) {\r\n\r\n      let moveAmount: number = this.moveAmount;\r\n      var temp: number = gtp.Utils.randomInt(4);\r\n\r\n      switch (temp) {\r\n\r\n        case 0:\r\n          if (!this.goUpIfPossible(maze, moveAmount)) {\r\n            if (!this.goLeftIfPossible(maze, moveAmount)) {\r\n              if (!this.goRightIfPossible(maze, moveAmount)) {\r\n                this.goDownIfPossible(maze, moveAmount);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n\r\n        case 1:\r\n          if (!this.goLeftIfPossible(maze, moveAmount)) {\r\n            if (!this.goUpIfPossible(maze, moveAmount)) {\r\n              if (!this.goDownIfPossible(maze, moveAmount)) {\r\n                this.goRightIfPossible(maze, moveAmount);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n\r\n        case 2:\r\n          if (!this.goDownIfPossible(maze, moveAmount)) {\r\n            if (!this.goLeftIfPossible(maze, moveAmount)) {\r\n              if (!this.goRightIfPossible(maze, moveAmount)) {\r\n                this.goUpIfPossible(maze, moveAmount);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n\r\n        case 3:\r\n          if (!this.goRightIfPossible(maze, moveAmount)) {\r\n            if (!this.goUpIfPossible(maze, moveAmount)) {\r\n              if (!this.goDownIfPossible(maze, moveAmount)) {\r\n                this.goLeftIfPossible(maze, moveAmount);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n      }\r\n\r\n    }\r\n\r\n    /**\r\n  \t * Moves this ghost in its current direction by the specified amount.\r\n  \t *\r\n  \t * @param {number} moveAmount The amount to move.\r\n  \t */\r\n  \tcontinueInCurrentDirection(moveAmount: number) {\r\n  \t\tswitch (this.direction) {\r\n  \t\t\tcase Direction.NORTH:\r\n  \t\t\t\tthis.incY(-moveAmount);\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase Direction.WEST:\r\n  \t\t\t\tthis.incX(-moveAmount);\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase Direction.SOUTH:\r\n  \t\t\t\tthis.incY(moveAmount);\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase Direction.EAST:\r\n  \t\t\t\tthis.incX(moveAmount);\r\n  \t\t\t\tbreak;\r\n  \t\t}\r\n  \t}\r\n\r\n    /**\r\n  \t * Returns the length of play time a ghost should stay blue, in\r\n  \t * milliseconds.\r\n  \t *\r\n  \t * @param {number} level The current game level.\r\n  \t * @return {numbe} The length of time a ghost should stay blue.\r\n  \t */\r\n  \tprivate _getBlueTimeForLevel(level: number): number {\r\n  \t\tswitch (level) {\r\n  \t\t\tcase 0:\r\n  \t\t\tcase 1:\r\n  \t\t\t\treturn 8000;\r\n  \t\t\tcase 2:\r\n  \t\t\tcase 3:\r\n  \t\t\t\treturn 6000;\r\n  \t\t\tcase 4:\r\n  \t\t\tcase 5:\r\n  \t\t\t\treturn 4000;\r\n  \t\t\tcase 6:\r\n  \t\t\tcase 7:\r\n  \t\t\t\treturn 2000;\r\n  \t\t\tdefault:\r\n  \t\t\t\treturn 0;\r\n  \t\t}\r\n  \t}\r\n\r\n    /**\r\n  \t * Returns the amount of time, in milliseconds, that this ghost will wait\r\n  \t * for before leaving the penalty box for the first time.\r\n  \t *\r\n  \t * @return {number} The delay, in milliseconds.\r\n  \t */\r\n  \tgetFirstExitDelayNanos(): number {\r\n  \t\treturn this._exitDelaySeconds * 1000;\r\n  \t}\r\n\r\n  \tgetFrameCount(): number {\r\n  \t\treturn 2;\r\n  \t}\r\n\r\n  \tget motionState(): MotionState {\r\n  \t\treturn this._motionState;\r\n  \t}\r\n\r\n    /**\r\n  \t * Returns the number of milliseconds that should pass between the times\r\n  \t * this ghost moves.  This value is dependant on the ghost's current\r\n  \t * state.\r\n  \t *\r\n  \t * @return The update delay, in milliseconds.\r\n  \t */\r\n  \tgetUpdateDelayMillis(): number {\r\n  \t\tswitch (this._motionState) {\r\n  \t\t\tcase MotionState.BLUE:\r\n  \t\t\t\treturn 25;\r\n  \t\t\tcase MotionState.EYES:\r\n  \t\t\tcase MotionState.EYES_ENTERING_BOX:\r\n  \t\t\t\treturn 10;\r\n  \t\t\tdefault: // Chasing PacMan, in penalty box, etc.\r\n  \t\t\t\treturn 10;\r\n  \t\t}\r\n  \t}\r\n\r\n  \t/**\r\n  \t * Returns whether this ghost is in a \"blue\" motion state.\r\n  \t *\r\n  \t * @return {boolean} Whether this ghost is blue.\r\n  \t * @see #isEyes()\r\n  \t */\r\n  \tisBlue(): boolean {\r\n      return this._motionState === MotionState.BLUE;\r\n  \t}\r\n\r\n    /**\r\n  \t * Returns whether this ghost is in a \"eyes\" motion state.\r\n  \t *\r\n  \t * @return Whether this ghost is in an \"eyes\" state.\r\n  \t * @see #isBlue()\r\n  \t */\r\n  \tisEyes(): boolean {\r\n  \t\treturn this._motionState === MotionState.EYES ||\r\n  \t\t\t\tthis._motionState === MotionState.EYES_ENTERING_BOX;\r\n  \t}\r\n\r\n  \t/**\r\n  \t * Paints this sprite at its current location.\r\n  \t *\r\n  \t * @param {CanvasRenderingContext2D} ctx The rendering context to use.\r\n  \t */\r\n  \tpaint(ctx: CanvasRenderingContext2D) {\r\n\r\n  \t\tlet destX: number = this.bounds.x;\r\n  \t\tlet destY: number = this.bounds.y;\r\n      let SPRITE_SIZE = 16;\r\n\r\n  \t\tswitch (this._motionState) {\r\n\r\n  \t\t\tcase MotionState.BLUE:\r\n          let srcX: number = (10 + this.getFrame()) * SPRITE_SIZE;\r\n          let srcY: number = 3 * SPRITE_SIZE;\r\n          let playTime: number = game.playTime;\r\n  \t\t\t\tif ((this.exitBlueTime - playTime) <= 1000) { // 1 sec. remaining\r\n  \t\t\t\t\tif (((playTime / 250) & 1) !== 0) {\r\n  \t\t\t\t\t\tsrcY += SPRITE_SIZE; // Flash 4 times in last second\r\n  \t\t\t\t\t}\r\n  \t\t\t\t}\r\n          game.drawSprite(destX, destY, srcX, srcY);\r\n  \t\t\t\tbreak;\r\n\r\n  \t\t\tcase MotionState.EYES:\r\n  \t\t\tcase MotionState.EYES_ENTERING_BOX:\r\n  \t\t\t\tsrcX = this.direction * SPRITE_SIZE;\r\n  \t\t\t\tsrcY = 4*SPRITE_SIZE;\r\n          game.drawSprite(destX, destY, srcX, srcY);\r\n  \t\t\t\tbreak;\r\n\r\n  \t\t\tdefault:\r\n  \t\t\t\tsrcX = this.direction * SPRITE_SIZE * this.getFrameCount() +\r\n  \t\t\t\t\t\tthis.getFrame() * SPRITE_SIZE;\r\n  \t\t\t\tsrcY = this._spriteSheetY;\r\n          game.drawSprite(destX, destY, srcX, srcY);\r\n  \t\t\t\tbreak;\r\n\r\n  \t\t}\r\n    }\r\n\r\n    /**\r\n  \t * Turns this ghost \"blue,\" if it is not in the penalty box and is not\r\n  \t * currently floating eyes.\r\n  \t */\r\n  \tpossiblyTurnBlue(): boolean {\r\n  \t\tswitch (this._motionState) {\r\n  \t\t\tcase MotionState.CHASING_PACMAN:\r\n  \t\t\tcase MotionState.SCATTERING:\r\n  \t\t\tcase MotionState.BLUE:\r\n  \t\t\t\tthis.motionState = MotionState.BLUE;\r\n  \t\t\t\treturn true;\r\n  \t\t\tdefault:\r\n  \t\t\t\t// Do nothing; in other states, we don't turn blue.\r\n  \t\t\t\treturn false;\r\n  \t\t}\r\n  \t}\r\n\r\n  \t/**\r\n  \t * Resets the ghost's internal state so that:\r\n  \t *\r\n  \t * <ol>\r\n  \t *    <li>It is in the penalty box (except for Blinky).\r\n  \t *    <li>It's no longer blinking.\r\n  \t *    <li>Its direction is set appropriately.\r\n  \t * </ol>\r\n  \t *\r\n  \t * This method should be called on loading a new level, PacMan dying, etc.\r\n  \t * Subclasses should be sure to call the super's implementation when\r\n  \t * overriding.\r\n  \t */\r\n  \treset() {\r\n  \t\tsuper.reset();\r\n  \t\tthis._scatterCount = 0;\r\n  \t}\r\n\r\n    /**\r\n  \t * Sets the coordinates of the \"corner\" this ghost goes to when in scatter\r\n  \t * mode.\r\n  \t *\r\n  \t * @param {gtp.Point} corner The corner to go to.\r\n  \t */\r\n  \tsetCorner(corner: gtp.Point) {\r\n  \t\tthis._corner.x = corner.x;\r\n      this._corner.y = corner.y;\r\n  \t}\r\n\r\n    set motionState(motionState: MotionState) {\r\n\r\n  \t\t// Ghosts stay in \"scatter mode\" for varying lengths of time:\r\n  \t\t// The first (just out of the penalty box) and second times, it lasts\r\n  \t\t// for 7 seconds.  The third and fourth times, it lasts for 5 seconds.\r\n  \t\t// Ghosts don't enter scatter mode a 5th time; they just relentlessly\r\n  \t\t// attack PacMan.\r\n  \t\tif (this._motionState === MotionState.SCATTERING) {\r\n  \t\t\tswitch (this._scatterCount++) {\r\n  \t\t\t\tcase 0:\r\n  \t\t\t\tcase 1:\r\n  \t\t\t\t\tthis._exitScatteringTime = game.playTime + 7000;\r\n  \t\t\t\t\tthis._motionState = motionState;\r\n  \t\t\t\t\tbreak;\r\n  \t\t\t\tcase 2:\r\n  \t\t\t\tcase 3:\r\n  \t\t\t\t\tthis._exitScatteringTime = game.playTime + 5000;\r\n  \t\t\t\t\tthis._motionState = motionState;\r\n  \t\t\t\t\tbreak;\r\n  \t\t\t\tdefault:\r\n  \t\t\t\t\tthis._motionState = MotionState.CHASING_PACMAN;\r\n  \t\t\t\t\tbreak;\r\n  \t\t\t}\r\n  \t\t}\r\n\r\n  \t\telse if (this._motionState === MotionState.BLUE) {\r\n  \t\t\tlet blueTime: number  = this._getBlueTimeForLevel(game.level);\r\n  \t\t\tlet playTime: number = game.playTime;\r\n  \t\t\tthis.exitBlueTime = playTime + blueTime;\r\n  \t\t\t// Remember previous state and modify its \"end time\" to\r\n  \t\t\t// include the blue time.\r\n  \t\t\tswitch (this._motionState) {\r\n  \t\t\t\tcase MotionState.CHASING_PACMAN:\r\n  \t\t\t\t\tthis._previousState = this._motionState;\r\n  \t\t\t\t\tthis.startScatteringTime += blueTime;\r\n  \t\t\t\t\tbreak;\r\n  \t\t\t\tcase MotionState.SCATTERING:\r\n  \t\t\t\t\tthis._previousState = this._motionState;\r\n  \t\t\t\t\tthis._exitScatteringTime += blueTime;\r\n  \t\t\t\t\tbreak;\r\n  \t\t\t\tcase MotionState.BLUE:\r\n  \t\t\t\t\t// Keep previous \"previousState\".\r\n  \t\t\t\t\tlet prevBlueTimeRemaining: number = this.exitBlueTime - playTime;\r\n  \t\t\t\t\tswitch (this._previousState) {\r\n  \t\t\t\t\t\tcase MotionState.CHASING_PACMAN:\r\n  \t\t\t\t\t\t\tthis.startScatteringTime += prevBlueTimeRemaining + blueTime;\r\n  \t\t\t\t\t\t\tbreak;\r\n  \t\t\t\t\t\tcase MotionState.SCATTERING:\r\n  \t\t\t\t\t\t\tthis._exitScatteringTime += prevBlueTimeRemaining + blueTime;\r\n  \t\t\t\t\t\t\tbreak;\r\n  \t\t\t\t\t}\r\n  \t\t\t\t\tbreak;\r\n  \t\t\t\tdefault:\r\n  \t\t\t\t\tthrow 'Unexpected state: ' + this._motionState;\r\n  \t\t\t}\r\n  \t\t\tthis._motionState = motionState;\r\n  \t\t}\r\n\r\n  \t\t// Any states other than \"scatter mode\" and \"blue\" aren't special.\r\n  \t\telse {\r\n  \t\t\tif (this._motionState === MotionState.CHASING_PACMAN) {\r\n  \t\t\t\tthis.startScatteringTime = game.playTime + 20000;\r\n  \t\t\t}\r\n  \t\t\tthis._motionState = motionState;\r\n  \t\t}\r\n\r\n      this.game.checkLoopedSound();\r\n  \t}\r\n\r\n    /**\r\n  \t * Updates this ghost's position when they are \"blue.\"\r\n  \t *\r\n  \t * @param {Maze} maze The maze in which the ghost is moving.\r\n  \t */\r\n  \t_updatePositionBlue(maze: Maze) {\r\n\r\n  \t\t// Logic:\r\n  \t\t// If PacMan has a clear shot to us, try to go in a direction other\r\n  \t\t// than PacMan before resorting to going straight for him.  If\r\n  \t\t// PacMan does NOT have a clear shot, just pick a random direction.\r\n\r\n  \t\tlet moveAmount: number = this.moveAmount;\r\n\r\n  \t\t// If we're at an intersection and can change direction...\r\n  \t\tif (this.atIntersection(maze)) {\r\n\r\n  \t\t\tlet pacman: Pacman = game.pacman;\r\n  \t\t\tlet pacRow: number = pacman.row;\r\n  \t\t\tlet pacCol: number = pacman.column;\r\n  \t\t\tlet row: number = this.row;\r\n  \t\t\tlet col: number = this.column;\r\n  \t\t\tlet moved: boolean = false;\r\n\r\n  \t\t\t// If PacMan has a straight shot to us in our row, try to go\r\n  \t\t\t// in a direction other than towards PacMan.\r\n  \t\t\tif (row === pacRow && maze.isClearShotRow(row, col, pacCol)) {\r\n  \t\t\t\tif (!this.goUpIfPossible(maze, moveAmount)) {\r\n  \t\t\t\t\tif (!this.goDownIfPossible(maze, moveAmount)) {\r\n  \t\t\t\t\t\tif (pacCol < col) { // PacMan is to our left.\r\n  \t\t\t\t\t\t\tif (!this.goRightIfPossible(maze, moveAmount)) {\r\n  \t\t\t\t\t\t\t\tthis.direction = Direction.WEST;\r\n  \t\t\t\t\t\t\t\tthis.incX(-moveAmount); // Must go towards PacMan.\r\n  \t\t\t\t\t\t\t}\r\n  \t\t\t\t\t\t}\r\n  \t\t\t\t\t\telse { // PacMan is to our right.\r\n  \t\t\t\t\t\t\tif (!this.goLeftIfPossible(maze, moveAmount)) {\r\n  \t\t\t\t\t\t\t\tthis.direction = Direction.EAST;\r\n  \t\t\t\t\t\t\t\tthis.incX(moveAmount); // Must go towards PacMan.\r\n  \t\t\t\t\t\t\t}\r\n  \t\t\t\t\t\t}\r\n  \t\t\t\t\t}\r\n  \t\t\t\t}\r\n  \t\t\t\tmoved = true;\r\n  \t\t\t}\r\n\r\n  \t\t\t// If PacMan has a clear shot to us in our column, try to go\r\n  \t\t\t// in a direction other than towards PacMan.\r\n  \t\t\telse if (col === pacCol && maze.isClearShotColumn(col, row, pacRow)) {\r\n  \t\t\t\tif (!this.goLeftIfPossible(maze, moveAmount)) {\r\n  \t\t\t\t\tif (!this.goRightIfPossible(maze, moveAmount)) {\r\n  \t\t\t\t\t\tif (pacRow<row) { // PacMan is above us.\r\n  \t\t\t\t\t\t\tif (!this.goDownIfPossible(maze, moveAmount)) {\r\n  \t\t\t\t\t\t\t\tthis.direction = Direction.NORTH;\r\n  \t\t\t\t\t\t\t\tthis.incY(-moveAmount); // Must go towards PacMan.\r\n  \t\t\t\t\t\t\t}\r\n  \t\t\t\t\t\t}\r\n  \t\t\t\t\t\telse { // PacMan is below us.\r\n  \t\t\t\t\t\t\tif (!this.goUpIfPossible(maze, moveAmount)) {\r\n  \t\t\t\t\t\t\t\tthis.direction = Direction.SOUTH;\r\n  \t\t\t\t\t\t\t\tthis.incY(moveAmount); // Must go towards PacMan.\r\n  \t\t\t\t\t\t\t}\r\n  \t\t\t\t\t\t}\r\n  \t\t\t\t\t}\r\n  \t\t\t\t}\r\n  \t\t\t\tmoved = true;\r\n  \t\t\t}\r\n\r\n  \t\t\tif (!moved) {\r\n  \t\t\t\tthis.changeDirectionFallback(maze);\r\n  \t\t\t}\r\n\r\n  \t\t}\r\n\r\n  \t\t// Not at an intersection, so we should be able to keep going\r\n  \t\t// in our current direction.\r\n  \t\telse {\r\n  \t\t\tthis.continueInCurrentDirection(moveAmount);\r\n  \t\t}\r\n\r\n  \t\t// Use game.playTime to ensure proper exit delay, even if game is\r\n  \t\t// paused, etc.\r\n  \t\tif (game.playTime >= this.exitBlueTime) {\r\n  \t\t\tthis.motionState = this._previousState;\r\n  \t\t}\r\n\r\n  \t}\r\n\r\n\r\n  \t/**\r\n  \t * Updates this ghost's position when they are chasing PacMan.\r\n  \t *\r\n  \t * @param maze The maze in which the actor is moving.\r\n  \t */\r\n  \tabstract updatePositionChasingPacman(maze: Maze): void;\r\n\r\n\r\n  \t/**\r\n  \t * Updates this ghost's position when it is a set of \"eyes\" heading back\r\n  \t * to the penalty box.\r\n  \t *\r\n  \t * @param maze The maze in which the ghost is moving.\r\n  \t */\r\n  \tprivate _updatePositionEyes(maze: Maze) {\r\n\r\n  \t\t// Logic:\r\n  \t\t// At intersections, do a breadth-first search to find the shortest\r\n  \t\t// path to the penalty box, and head in that direction.\r\n\r\n  \t\t// let moveAmount: number = getMoveAmount();\r\n      //\r\n  \t\t// if (this.atIntersection(maze)) {\r\n      //\r\n  \t\t// \t// NOTE: game.PENALTY_BOX_X is actually in-between two columns, so we\r\n  \t\t// \t// pick the \"farther\" one to travel to, so we can be sure that\r\n  \t\t// \t// the ghost will always enter the box correctly.\r\n      //\r\n  \t\t// \tlet fromRow: number = this.getRow();\r\n  \t\t// \tlet fromCol: number = this.getColumn();\r\n  \t\t// \tlet toRow: number = (game.PENALTY_BOX_EXIT_Y+16)/TILE_SIZE; // yToRow(game.PENALTY_BOX_EXIT_Y);\r\n  \t\t// \tlet toCol: number = (game.PENALTY_BOX_EXIT_X)/TILE_SIZE; //xToColumn(game.PENALTY_BOX_EXIT_X);\r\n  \t\t// \tif (fromCol <= toCol) {\r\n  \t\t// \t\ttoCol++; // Approaching from the left.\r\n  \t\t// \t}\r\n      //\r\n  \t\t// \tlet node: MazeNode = maze.getPathBreadthFirst(fromRow, fromCol, toRow, toCol);\r\n  \t\t// \tif (node==null) { // i.e. ghost is actually at the penalty box.\r\n  \t\t// \t\t// Should never happen; we should always catch the ghost\r\n  \t\t// \t\t// before getting to its destination in the \"else\" below.\r\n  \t\t// \t\tsetMotionState(MotionState.EYES_ENTERING_BOX);\r\n  \t\t// \t}\r\n  \t\t// \telse {\r\n  \t\t// \t\tif (node.col<fromCol) {\r\n  \t\t// \t\t\tsetDirection(DIR_LEFT);\r\n  \t\t// \t\t\tincX(-moveAmount);\r\n  \t\t// \t\t}\r\n  \t\t// \t\telse if (node.col>fromCol) {\r\n  \t\t// \t\t\tsetDirection(DIR_RIGHT);\r\n  \t\t// \t\t\tincX(moveAmount);\r\n  \t\t// \t\t}\r\n  \t\t// \t\telse if (node.row<fromRow) {\r\n  \t\t// \t\t\tsetDirection(DIR_UP);\r\n  \t\t// \t\t\tincY(-moveAmount);\r\n  \t\t// \t\t}\r\n  \t\t// \t\telse if (node.row>fromRow) {\r\n  \t\t// \t\t\tsetDirection(DIR_DOWN);\r\n  \t\t// \t\t\tincY(moveAmount);\r\n  \t\t// \t\t}\r\n  \t\t// \t}\r\n      //\r\n  \t\t// }\r\n      //\r\n  \t\t// // Not at an intersection, so we should be able to keep going\r\n  \t\t// // in our current direction.\r\n  \t\t// else {\r\n      //\r\n  \t\t// \tlet fromRow: number = getRow();\r\n  \t\t// \tlet toRow: number = (game.PENALTY_BOX_EXIT_Y+16)/TILE_SIZE; // yToRow(game.PENALTY_BOX_EXIT_Y);\r\n      //\r\n  \t\t// \tif (fromRow==toRow && this.x==game.PENALTY_BOX_EXIT_X) {\r\n  \t\t// \t\tsetMotionState(MotionState.EYES_ENTERING_BOX);\r\n  \t\t// \t}\r\n  \t\t// \telse {\r\n  \t\t// \t\tcontinueInCurrentDirection(moveAmount);\r\n  \t\t// \t}\r\n      //\r\n  \t\t// }\r\n\r\n  \t}\r\n\r\n\r\n  \t/**\r\n  \t * Updates this ghost's position when it is a set of \"eyes\" re-entering\r\n  \t * the penalty box.\r\n  \t *\r\n  \t * @param maze The maze in which the ghost is moving.\r\n  \t */\r\n  \tprivate _updatePositionEyesEnteringBox(maze: Maze) {\r\n\r\n  \t\tlet moveAmount: number = 1;//getMoveAmount();\r\n\r\n  \t\tlet y: number = this.y;\r\n  \t\tif (y < game.PENALTY_BOX_EXIT_Y + 3 * game.SPRITE_SIZE / 2) {\r\n  \t\t\tthis.direction = Direction.SOUTH; // May be redundant.\r\n  \t\t\tthis.incY(moveAmount);\r\n  \t\t}\r\n  \t\telse {\r\n  \t\t\tthis.motionState = MotionState.LEAVING_BOX;;\r\n  \t\t}\r\n\r\n  \t}\r\n\r\n\r\n  \t/**\r\n  \t * Updates a ghost's position according to its AI.\r\n  \t *\r\n  \t * @param maze The maze in which the ghost is floating.\r\n  \t */\r\n  \tupdatePositionImpl(maze: Maze) {\r\n\r\n  \t\tswitch (this._motionState) {\r\n  \t\t\tcase MotionState.IN_BOX:\r\n  \t\t\t\tthis.updatePositionInBox(maze);\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase MotionState.LEAVING_BOX:\r\n  \t\t\t\tthis.updatePositionLeavingBox(maze);\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase MotionState.SCATTERING:\r\n  \t\t\t\tthis.updatePositionScattering(maze);\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase MotionState.CHASING_PACMAN:\r\n  \t\t\t\tthis.updatePositionChasingPacman(maze);\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase MotionState.BLUE:\r\n  \t\t\t\tthis._updatePositionBlue(maze);\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase MotionState.EYES:\r\n  \t\t\t\tthis._updatePositionEyes(maze);\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase MotionState.EYES_ENTERING_BOX:\r\n  \t\t\t\tthis._updatePositionEyesEnteringBox(maze);\r\n  \t\t\t\tbreak;\r\n  \t\t}\r\n\r\n  \t}\r\n\r\n\r\n  \t/**\r\n  \t * Updates an actor's position.\r\n  \t *\r\n  \t * @param maze The maze in which the actor is moving.\r\n  \t */\r\n  \tupdatePositionInBox(maze: Maze) {\r\n\r\n  \t\tlet moveAmount: number = 1;//ghost.getMoveAmount();\r\n\r\n  \t\tswitch (this.direction) {\r\n  \t\t\tcase Direction.WEST: // Never happens\r\n  \t\t\tcase Direction.NORTH:\r\n  \t\t\t\tif (this.y > 224) {\r\n  \t\t\t\t\tthis.incY(-moveAmount);\r\n  \t\t\t\t}\r\n  \t\t\t\telse {\r\n  \t\t\t\t\tthis.direction = Direction.SOUTH;\r\n  \t\t\t\t}\r\n  \t\t\t\tbreak;\r\n  \t\t\tcase Direction.EAST: // Never happens\r\n  \t\t\tcase Direction.SOUTH:\r\n  \t\t\t\tif (this.y < 240) {\r\n  \t\t\t\t\tthis.incY(moveAmount);\r\n  \t\t\t\t}\r\n  \t\t\t\telse {\r\n  \t\t\t\t\tthis.direction = Direction.NORTH;\r\n  \t\t\t\t}\r\n  \t\t\t\tbreak;\r\n  \t\t}\r\n\r\n  \t\t// Use game.playTime to ensure proper exit delay, even if game is\r\n  \t\t// paused, etc.\r\n  \t\tif (game.playTime >= this.getFirstExitDelayNanos()) {\r\n  \t\t\tthis.motionState = MotionState.LEAVING_BOX;;\r\n  \t\t}\r\n\r\n  \t}\r\n\r\n\r\n  \t/**\r\n  \t * Updates an actor's position.\r\n  \t *\r\n  \t * @param maze The maze in which the actor is moving.\r\n  \t */\r\n  \tupdatePositionLeavingBox(maze: Maze) {\r\n\r\n  \t\tlet moveAmount: number = 1;//getMoveAmount();\r\n\r\n  \t\tlet x: number = this.x;\r\n  \t\tif (x < game.PENALTY_BOX_EXIT_X) {\r\n  \t\t\tthis.direction = Direction.EAST; // May be redundant\r\n  \t\t\tthis.incX(moveAmount);\r\n  \t\t}\r\n  \t\telse if (x > game.PENALTY_BOX_EXIT_X) {\r\n  \t\t\tthis.direction = Direction.WEST; // May be redundant\r\n  \t\t\tthis.incX(-moveAmount);\r\n  \t\t}\r\n  \t\telse {\r\n  \t\t\tlet y: number = this.y - moveAmount;\r\n  \t\t\tthis.y = y;\r\n  \t\t\tif (y === game.PENALTY_BOX_EXIT_Y) {\r\n  \t\t\t\tthis.motionState = MotionState.SCATTERING;;\r\n  \t\t\t\tthis.direction = Direction.WEST;\r\n  \t\t\t}\r\n  \t\t\telse {\r\n  \t\t\t\tthis.direction = Direction.NORTH; // May be redundant\r\n  \t\t\t}\r\n  \t\t}\r\n\r\n  \t}\r\n\r\n\r\n  \t/**\r\n  \t * Updates an actor's position.\r\n  \t *\r\n  \t * @param maze The maze in which the actor is moving.\r\n  \t */\r\n  \tupdatePositionScattering(maze: Maze) {\r\n\r\n  \t\t// Logic:\r\n  \t\t// At intersections, do a breadth-first search to find the shortest\r\n  \t\t// path to our corner, and head in that direction.\r\n\r\n  \t\tlet moveAmount: number = this.moveAmount;\r\n\r\n  \t\tif (this.atIntersection(maze)) {\r\n\r\n  \t\t\tlet fromRow: number = this.row;\r\n  \t\t\tlet fromCol: number = this.column;\r\n  \t\t\tlet toRow: number = this._corner.x;\r\n  \t\t\tlet toCol: number = this._corner.y;\r\n  \t\t\tlet node: MazeNode = maze.getPathBreadthFirst(fromRow, fromCol, toRow, toCol);\r\n  \t\t\tif (!node) { // i.e. ghost is actually in the corner.\r\n  \t\t\t\tthis.changeDirectionFallback(maze);\r\n  \t\t\t}\r\n  \t\t\telse {\r\n  \t\t\t\tif (node.col < fromCol) {\r\n  \t\t\t\t\tthis.direction = Direction.WEST;\r\n  \t\t\t\t\tthis.incX(-moveAmount);\r\n  \t\t\t\t}\r\n  \t\t\t\telse if (node.col>fromCol) {\r\n  \t\t\t\t\tthis.direction = Direction.EAST;\r\n  \t\t\t\t\tthis.incX(moveAmount);\r\n  \t\t\t\t}\r\n  \t\t\t\telse if (node.row<fromRow) {\r\n  \t\t\t\t\tthis.direction = Direction.NORTH;\r\n  \t\t\t\t\tthis.incY(-moveAmount);\r\n  \t\t\t\t}\r\n  \t\t\t\telse if (node.row>fromRow) {\r\n  \t\t\t\t\tthis.direction = Direction.SOUTH;\r\n  \t\t\t\t\tthis.incY(moveAmount);\r\n  \t\t\t\t}\r\n  \t\t\t}\r\n\r\n  \t\t}\r\n\r\n  \t\t// Not at an intersection, so we should be able to keep going\r\n  \t\t// in our current direction.\r\n  \t\telse {\r\n  \t\t\tthis.continueInCurrentDirection(moveAmount);\r\n  \t\t}\r\n\r\n  \t\tif (game.playTime >= this._exitScatteringTime) {\r\n  \t\t\tthis.motionState = MotionState.CHASING_PACMAN;\r\n  \t\t}\r\n\r\n  \t}\r\n\r\n\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}