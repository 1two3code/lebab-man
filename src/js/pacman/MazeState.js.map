{"version":3,"sources":["../app/pacman/MazeState.ts"],"names":[],"mappings":"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","file":"MazeState.js","sourcesContent":["module pacman {\r\n    'use strict';\r\n\r\n    type Substate = 'READY' | 'IN_GAME' | 'DYING' | 'GAME_OVER';\r\n\r\n    export class MazeState extends _BaseState {\r\n\r\n        private _mazeFile: number[][];\r\n        private _maze: Maze;\r\n        private _firstTimeThrough: boolean;\r\n        private _updateScoreIndex: number;\r\n        private _substate: Substate;\r\n        private _substateStartTime: number;\r\n        private _nextUpdateTime: number;\r\n        private _nextDyingFrameTime: number;\r\n        private _lastMazeScreenKeypressTime: number;\r\n\r\n        constructor(mazeFile: number[][]) {\r\n            super();\r\n            this._mazeFile = mazeFile;\r\n        }\r\n\r\n        private static get DYING_FRAME_DELAY_MILLIS(): number {\r\n            return 75;\r\n        }\r\n\r\n        private get _readyDelayMillis(): number {\r\n            return this._firstTimeThrough ? 4500 : 2000;\r\n        }\r\n\r\n        enter() {\r\n\r\n            game.pacman.reset();\r\n            game.resetGhosts();\r\n\r\n            this._maze = new Maze(this._mazeFile);\r\n            this._firstTimeThrough = true;\r\n            this._updateScoreIndex = -1;\r\n\r\n            // Prevents the user's \"Enter\" press to start the game from being\r\n            // picked up by our handleInput().\r\n            this._lastMazeScreenKeypressTime = game.playTime + MazeState.INPUT_REPEAT_MILLIS;\r\n\r\n            this._substate = 'READY';\r\n            this._firstTimeThrough = true;\r\n            this._substateStartTime = 0;\r\n            this._nextDyingFrameTime = 0;\r\n            this._nextUpdateTime = 0;\r\n            this._lastSpriteFrameTime = 0;\r\n        }\r\n\r\n        private _paintExtraLives(ctx: CanvasRenderingContext2D) {\r\n\r\n            // The indentation on either side of the status stuff at the bottom\r\n            // (extra life count, possible fruits, etc.).\r\n            const BOTTOM_INDENT: number = 24;\r\n            const TILE_SIZE: number = 8;\r\n\r\n            const lives: number = game.lives;\r\n            if (lives > 0) {\r\n                let x: number = BOTTOM_INDENT;\r\n                const y: number = game.getHeight() - 2 * TILE_SIZE;\r\n                const w: number = 2 * TILE_SIZE;\r\n                for (let i: number = 0; i < lives; i++) {\r\n                    game.drawSprite(x, y, 12 * 16, 3 * 16);\r\n                    x += w;\r\n                }\r\n            }\r\n        }\r\n\r\n        private _paintPossibleFruits(ctx: CanvasRenderingContext2D) {\r\n\r\n            // The indentation on either side of the status stuff at the bottom\r\n            // (extra life count, possible fruits, etc.).\r\n            const BOTTOM_INDENT: number = 12;\r\n            const TILE_SIZE: number = PacmanGame.TILE_SIZE;\r\n\r\n            let x: number = game.getWidth() - BOTTOM_INDENT - 2 * TILE_SIZE;\r\n            let y: number = game.getHeight() - 2 * TILE_SIZE;\r\n\r\n            switch (game.level) {\r\n                default:\r\n                case 7: // Key\r\n                    game.drawSprite(x - 112, y, 13 * 16, 3 * 16);\r\n                // Fall through\r\n                case 6: // Space Invaders ship\r\n                    game.drawSprite(x - 96, y, 13 * 16, 6 * 16);\r\n                // Fall through\r\n                case 5: // Green thing (grapes?)\r\n                    game.drawSprite(x - 80, y, 12 * 16, 6 * 16);\r\n                // Fall through.\r\n                case 4: // Apple\r\n                    game.drawSprite(x - 64, y, 13 * 16, 2 * 16);\r\n                // Fall through.\r\n                case 3: // Yellow bell\r\n                    game.drawSprite(x - 48, y, 13 * 16, 5 * 16);\r\n                // Fall through.\r\n                case 2: // Peach\r\n                    game.drawSprite(x - 32, y, 12 * 16, 5 * 16);\r\n                // Fall through.\r\n                case 1: // Strawberry\r\n                    game.drawSprite(x - 16, y, 13 * 16, 4 * 16);\r\n                // Fall through.\r\n                case 0: // Cherry\r\n                    game.drawSprite(x, y, 12 * 16, 4 * 16);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        render(ctx: CanvasRenderingContext2D) {\r\n\r\n            super.render(ctx);\r\n            this._maze.render(ctx);\r\n\r\n            // \"window.pacman\" because of hoisting of pacman let below\r\n            let TILE_SIZE: number = 8;\r\n            let mazeY: number = game.getHeight() - 2 * TILE_SIZE -\r\n                Maze.TILE_COUNT_VERTICAL * TILE_SIZE;\r\n            ctx.translate(0, mazeY);\r\n\r\n            game.drawFruit(ctx);\r\n\r\n            const pacman: Pacman = game.pacman;\r\n            if (this._updateScoreIndex === -1) {\r\n                if (this._substate !== 'GAME_OVER') {\r\n                    pacman.render(ctx);\r\n                }\r\n            }\r\n            else {\r\n                const x: number = pacman.bounds.x;\r\n                const y: number = pacman.bounds.y;\r\n                game.paintPointsEarned(ctx, this._updateScoreIndex, x, y);\r\n            }\r\n\r\n            game.drawGhosts(ctx);\r\n\r\n            ctx.translate(0, -mazeY);\r\n\r\n            game.drawScores(ctx);\r\n            this._paintExtraLives(ctx);\r\n            this._paintPossibleFruits(ctx);\r\n\r\n            if (this._substate === 'READY') {\r\n                // These calculations should be fast enough, especially considering\r\n                // that \"READY!\" is only displayed for about 4 seconds.\r\n                let ready: string = 'READY!';\r\n                let x: number = (game.getWidth() - ready.length * 9) / 2;\r\n                // Give \"Ready!\" a little nudge to the right.  This is because the\r\n                // ending '!' doesn't fill up the standard 8 pixels for a character,\r\n                // so \"READY!\" looks slightly too far to the left without it.\r\n                x += 3;\r\n                game.drawString(x, 160, ready);\r\n            }\r\n            else if (this._substate === 'GAME_OVER') {\r\n                let gameOver: string = 'GAME OVER';\r\n                let x: number = (game.getWidth() - gameOver.length * 9) / 2;\r\n                game.drawString(x, 160, gameOver);\r\n            }\r\n\r\n            if (game.paused) {\r\n                ctx.globalAlpha = 0.4;\r\n                ctx.fillStyle = 'black';\r\n                ctx.fillRect(0, 0, game.getWidth(), game.getHeight());\r\n                ctx.globalAlpha = 1;\r\n                ctx.fillRect(50, 100, game.getWidth() - 100, game.getHeight() - 200);\r\n                let paused: string = 'PAUSED';\r\n                let x: number = (game.getWidth() - paused.length * 9) / 2;\r\n                game.drawString(x, (game.getHeight() - 18) / 2, paused);\r\n            }\r\n        }\r\n\r\n        reset() {\r\n            this._maze.reset();\r\n            game.resetPlayTime();\r\n            game.pacman.reset();\r\n            game.resetGhosts(); // Do AFTER resetting playtime!\r\n            this._substate = 'READY';\r\n            this._substateStartTime = 0; // Play time was just reset\r\n            this._lastSpriteFrameTime = 0;\r\n\r\n            // Prevents the user's \"Enter\" press to start the game from being\r\n            // picked up by our handleInput().\r\n            this._lastMazeScreenKeypressTime = game.playTime + MazeState.INPUT_REPEAT_MILLIS;\r\n        }\r\n\r\n        private _handleInput(delta: number, time: number) {\r\n\r\n            this.handleDefaultKeys();\r\n            let input: gtp.InputManager = game.inputManager;\r\n\r\n            // Enter -> Pause.  Don't check for pausing on \"Game Over\" screen as\r\n            // that will carry over into the next game!\r\n            if (this._substate !== 'GAME_OVER' && input.enter(true)) {\r\n                game.paused = !game.paused;\r\n                this._lastMazeScreenKeypressTime = time;\r\n                return;\r\n            }\r\n\r\n            if (!game.paused) {\r\n\r\n                switch (this._substate) {\r\n\r\n                    case 'IN_GAME':\r\n                        game.pacman.handleInput(this._maze);\r\n                        break;\r\n\r\n                    case 'GAME_OVER':\r\n                        if (input.enter(true)) {\r\n                            game.setState(new TitleState(game));\r\n                        }\r\n                        break;\r\n                }\r\n\r\n            }\r\n\r\n            if (time >= this._lastMazeScreenKeypressTime + MazeState.INPUT_REPEAT_MILLIS) {\r\n\r\n                // Hidden options (Z + keypress)\r\n                if (!game.paused && this._substate === 'IN_GAME' &&\r\n                    input.isKeyDown(gtp.Keys.KEY_Z)) {\r\n\r\n                    // Z+X => auto-load next level\r\n                    if (input.isKeyDown(gtp.Keys.KEY_X)) {\r\n                        game.loadNextLevel();\r\n                        this._lastMazeScreenKeypressTime = time;\r\n                    }\r\n\r\n                    // Z+C => auto-death\r\n                    else if (input.isKeyDown(gtp.Keys.KEY_C)) {\r\n                        if ((<any>this._substate) !== 'DYING') { // <any> cast due to what seems to be a bug in tsc\r\n                            game.startPacmanDying();\r\n                            this._substate = 'DYING';\r\n                            this._nextDyingFrameTime = time + MazeState.DYING_FRAME_DELAY_MILLIS;\r\n                            this._lastMazeScreenKeypressTime = time;\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        update(delta: number) {\r\n            super.update(delta);\r\n\r\n            // playTime may reset in handleInput, so we fetch it again afterward\r\n            this._handleInput(delta, game.playTime);\r\n            const time: number = game.playTime;\r\n\r\n            switch (this._substate) {\r\n\r\n                case 'READY':\r\n                    if (this._firstTimeThrough && this._substateStartTime === 0) {\r\n                        this._substateStartTime = time;\r\n                        game.audio.playSound(Sounds.OPENING);\r\n                    }\r\n                    if (time >= this._substateStartTime + this._readyDelayMillis) {\r\n                        this._substate = 'IN_GAME';\r\n                        this._substateStartTime = time;\r\n                        game.resetPlayTime();\r\n                        this._lastMazeScreenKeypressTime = game.playTime;\r\n                        game.setLoopedSound(Sounds.SIREN);\r\n                        this._firstTimeThrough = false;\r\n                    }\r\n                    break;\r\n\r\n                case 'IN_GAME':\r\n                    this._updateInGameImpl(time);\r\n                    break;\r\n\r\n                case 'DYING':\r\n                    if (time >= this._nextDyingFrameTime) {\r\n                        if (!game.pacman.incDying()) {\r\n                            if (game.increaseLives(-1) <= 0) {\r\n                                this._substate = 'GAME_OVER';\r\n                            }\r\n                            else {\r\n                                game.resetPlayTime();\r\n                                this._lastMazeScreenKeypressTime = game.playTime;\r\n                                game.pacman.reset();\r\n                                game.resetGhosts(); // Do AFTER resetting play time!\r\n                                this._substate = 'READY';\r\n                                this._substateStartTime = 0; // Play time was just reset\r\n                                this._lastSpriteFrameTime = 0;\r\n                            }\r\n                        }\r\n                        else {\r\n                            this._nextDyingFrameTime = time + MazeState.DYING_FRAME_DELAY_MILLIS;\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case 'GAME_OVER':\r\n                    // Do nothing\r\n                    break;\r\n            }\r\n        }\r\n\r\n        private _updateInGameImpl(time: number) {\r\n\r\n            // If Pacman is eating a ghost, add a slight delay\r\n            if (this._nextUpdateTime > 0 && time < this._nextUpdateTime) {\r\n                return;\r\n            }\r\n            this._nextUpdateTime = 0;\r\n            this._updateScoreIndex = -1;\r\n\r\n            this._updateSpriteFrames();\r\n\r\n            // Update Pacman's, ghosts', and possibly fruit's positions\r\n            game.updateSpritePositions(this._maze, time);\r\n\r\n            // If Pacman hit a ghost, decide what to do\r\n            let ghostHit: Ghost = game.checkForCollisions();\r\n            if (ghostHit) {\r\n\r\n                switch (ghostHit.motionState) {\r\n\r\n                    case MotionState.BLUE:\r\n                        this._nextUpdateTime = time + PacmanGame.SCORE_DISPLAY_LENGTH;\r\n                        ghostHit.motionState = MotionState.EYES;\r\n                        this._updateScoreIndex = game.ghostEaten(ghostHit);\r\n                        break;\r\n\r\n                    case MotionState.EYES:\r\n                    case MotionState.EYES_ENTERING_BOX:\r\n                        // Do nothing\r\n                        break;\r\n\r\n                    default:\r\n                        if (!game.godMode) {\r\n                            game.startPacmanDying();\r\n                            this._substate = 'DYING';\r\n                            this._nextDyingFrameTime = game.playTime + MazeState.DYING_FRAME_DELAY_MILLIS;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}