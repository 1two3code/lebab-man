{"version":3,"sources":["../app/pacman/Blinky.ts"],"names":[],"mappings":"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","file":"Blinky.js","sourcesContent":["module pacman {\r\n    'use strict';\r\n\r\n    /**\r\n     * Blinky, the red ghost.  Blinky always takes the shortest route to Pacman\r\n     * when chasing him.\r\n     */\r\n    export class Blinky extends Ghost {\r\n\r\n        /**\r\n         * Constructor.\r\n         */\r\n        constructor(game: PacmanGame) {\r\n            super(game, 0 * PacmanGame.SPRITE_SIZE, 0); // Not initially in the penalty box\r\n        }\r\n\r\n        reset() {\r\n            super.reset();\r\n            this.direction = Direction.WEST;\r\n            this.setLocation(this.game.PENALTY_BOX_EXIT_X, this.game.PENALTY_BOX_EXIT_Y);\r\n            this.motionState = MotionState.SCATTERING;\r\n        }\r\n\r\n        /**\r\n         * Updates an actor's position.\r\n         *\r\n         * @param maze The maze in which the actor is moving.\r\n         */\r\n        updatePositionChasingPacman(maze: Maze) {\r\n\r\n            // Logic:\r\n            // If at an intersection, do a breadth-first search for the shortest\r\n            // route to PacMan, and go in that direction.\r\n\r\n            let moveAmount: number = this.moveAmount;\r\n\r\n            if (this.atIntersection(maze)) { // If the ghost can turn...\r\n\r\n                let fromRow: number = this.row;\r\n                let fromCol: number = this.column;\r\n                let toRow: number = game.pacman.row;\r\n                let toCol: number = game.pacman.column;\r\n                let node: MazeNode = maze.getPathBreadthFirst(fromRow, fromCol, toRow, toCol);\r\n\r\n                if (node == null) { // Happens only with \"God Mode\" enabled.\r\n                    this.changeDirectionFallback(maze);\r\n                }\r\n                else if (node.col < fromCol) {\r\n                    this.direction = Direction.WEST;\r\n                    this.incX(-moveAmount);\r\n                }\r\n                else if (node.col > fromCol) {\r\n                    this.direction = Direction.EAST;\r\n                    this.incX(moveAmount);\r\n                }\r\n                else if (node.row < fromRow) {\r\n                    this.direction = Direction.NORTH;\r\n                    this.incY(-moveAmount);\r\n                }\r\n                else if (node.row > fromRow) {\r\n                    this.direction = Direction.SOUTH;\r\n                    this.incY(moveAmount);\r\n                }\r\n\r\n            }\r\n\r\n            // Not at an intersection, so we should be able to keep going\r\n            // in our current direction.\r\n            else {\r\n                this.continueInCurrentDirection(moveAmount);\r\n            }\r\n\r\n            // Switch over to scatter mode if it's time to do so.\r\n            if (game.playTime >= this.startScatteringTime) {\r\n                this.motionState = MotionState.SCATTERING;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n"]}