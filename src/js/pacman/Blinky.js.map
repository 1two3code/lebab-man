{"version":3,"sources":["pacman/Blinky.ts"],"names":["pacman","pacman.Blinky","pacman.Blinky.constructor","pacman.Blinky.reset","pacman.Blinky.updatePositionChasingPacman"],"mappings":";;;;;AAAA,IAAO,MAAM,CAgFZ;AAhFD,WAAO,MAAM,EAAC,CAAC;IACbA,YAAYA,CAACA;IAEXA;;;OAGGA;IACFA;QAA4BC,0BAAKA;QAEjCA;;WAEGA;QACHA,gBAAYA,IAAgBA;YAC3BC,kBAAMA,IAAIA,EAAEA,CAACA,GAAGA,iBAAUA,CAACA,WAAWA,EAAEA,CAACA,CAACA,CAACA,CAACA,mCAAmCA;QAChFA,CAACA;QAEDD,sBAAKA,GAALA;YACCE,gBAAKA,CAACA,KAAKA,WAAEA,CAACA;YACdA,IAAIA,CAACA,SAASA,GAAGA,gBAASA,CAACA,IAAIA,CAACA;YAChCA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,CAACA,IAAIA,CAACA,kBAAkBA,EAAEA,IAAIA,CAACA,IAAIA,CAACA,kBAAkBA,CAACA,CAACA;YAC7EA,IAAIA,CAACA,WAAWA,GAAGA,kBAAWA,CAACA,UAAUA,CAACA;QAC3CA,CAACA;QAEHF;;;;WAIGA;QACHA,4CAA2BA,GAA3BA,UAA4BA,IAAUA;YAErCG,SAASA;YACTA,oEAAoEA;YACpEA,6CAA6CA;YAE7CA,IAAIA,UAAUA,GAAWA,IAAIA,CAACA,UAAUA,CAACA;YAEzCA,EAAEA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAE/BA,IAAIA,OAAOA,GAAWA,IAAIA,CAACA,GAAGA,CAACA;gBAC/BA,IAAIA,OAAOA,GAAWA,IAAIA,CAACA,MAAMA,CAACA;gBAClCA,IAAIA,KAAKA,GAAWA,IAAIA,CAACA,MAAMA,CAACA,GAAGA,CAACA;gBACpCA,IAAIA,KAAKA,GAAWA,IAAIA,CAACA,MAAMA,CAACA,MAAMA,CAACA;gBACvCA,IAAIA,IAAIA,GAAaA,IAAIA,CAACA,mBAAmBA,CAACA,OAAOA,EAAEA,OAAOA,EAAEA,KAAKA,EAAEA,KAAKA,CAACA,CAACA;gBAE9EA,EAAEA,CAACA,CAACA,IAAIA,IAAIA,IAAIA,CAACA,CAACA,CAACA;oBAClBA,IAAIA,CAACA,uBAAuBA,CAACA,IAAIA,CAACA,CAACA;gBACpCA,CAACA;gBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,OAAOA,CAACA,CAACA,CAACA;oBAC7BA,IAAIA,CAACA,SAASA,GAAGA,gBAASA,CAACA,IAAIA,CAACA;oBAChCA,IAAIA,CAACA,IAAIA,CAACA,CAACA,UAAUA,CAACA,CAACA;gBACxBA,CAACA;gBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,OAAOA,CAACA,CAACA,CAACA;oBAC7BA,IAAIA,CAACA,SAASA,GAAGA,gBAASA,CAACA,IAAIA,CAACA;oBAChCA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;gBACvBA,CAACA;gBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,OAAOA,CAACA,CAACA,CAACA;oBAC7BA,IAAIA,CAACA,SAASA,GAAGA,gBAASA,CAACA,KAAKA,CAACA;oBACjCA,IAAIA,CAACA,IAAIA,CAACA,CAACA,UAAUA,CAACA,CAACA;gBACxBA,CAACA;gBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,OAAOA,CAACA,CAACA,CAACA;oBAC7BA,IAAIA,CAACA,SAASA,GAAGA,gBAASA,CAACA,KAAKA,CAACA;oBACjCA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;gBACvBA,CAACA;YAEFA,CAACA;YAIDA,IAAIA,CAACA,CAACA;gBACLA,IAAIA,CAACA,0BAA0BA,CAACA,UAAUA,CAACA,CAACA;YAC7CA,CAACA;YAEDA,qDAAqDA;YACrDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,IAAIA,IAAIA,CAACA,mBAAmBA,CAACA,CAACA,CAACA;gBAC5CA,IAAIA,CAACA,WAAWA,GAAGA,kBAAWA,CAACA,UAAUA,CAACA;YAC9CA,CAACA;QAEFA,CAACA;QAEFH,aAACA;IAADA,CAxEGD,AAwEFC,EAxE8BD,YAAKA,EAwEnCA;IAxEeA,aAAMA,SAwErBA,CAAAA;AACHA,CAACA,EAhFM,MAAM,KAAN,MAAM,QAgFZ","file":"pacman/Blinky.js","sourcesContent":["module pacman {\r\n  'use strict';\r\n\r\n    /**\r\n     * Blinky, the red ghost.  Blinky always takes the shortest route to Pacman\r\n     * when chasing him.\r\n     */\r\n     export class Blinky extends Ghost {\r\n\r\n    \t/**\r\n    \t * Constructor.\r\n    \t */\r\n    \tconstructor(game: PacmanGame) {\r\n    \t\tsuper(game, 0 * PacmanGame.SPRITE_SIZE, 0); // Not initially in the penalty box\r\n    \t}\r\n\r\n    \treset() {\r\n    \t\tsuper.reset();\r\n    \t\tthis.direction = Direction.WEST;\r\n    \t\tthis.setLocation(this.game.PENALTY_BOX_EXIT_X, this.game.PENALTY_BOX_EXIT_Y);\r\n    \t\tthis.motionState = MotionState.SCATTERING;\r\n    \t}\r\n\r\n  \t/**\r\n  \t * Updates an actor's position.\r\n  \t *\r\n  \t * @param maze The maze in which the actor is moving.\r\n  \t */\r\n  \tupdatePositionChasingPacman(maze: Maze) {\r\n\r\n  \t\t// Logic:\r\n  \t\t// If at an intersection, do a breadth-first search for the shortest\r\n  \t\t// route to PacMan, and go in that direction.\r\n\r\n  \t\tlet moveAmount: number = this.moveAmount;\r\n\r\n  \t\tif (this.atIntersection(maze)) { // If the ghost can turn...\r\n\r\n  \t\t\tlet fromRow: number = this.row;\r\n  \t\t\tlet fromCol: number = this.column;\r\n  \t\t\tlet toRow: number = game.pacman.row;\r\n  \t\t\tlet toCol: number = game.pacman.column;\r\n  \t\t\tlet node: MazeNode = maze.getPathBreadthFirst(fromRow, fromCol, toRow, toCol);\r\n\r\n  \t\t\tif (node == null) { // Happens only with \"God Mode\" enabled.\r\n  \t\t\t\tthis.changeDirectionFallback(maze);\r\n  \t\t\t}\r\n  \t\t\telse if (node.col < fromCol) {\r\n  \t\t\t\tthis.direction = Direction.WEST;\r\n  \t\t\t\tthis.incX(-moveAmount);\r\n  \t\t\t}\r\n  \t\t\telse if (node.col > fromCol) {\r\n  \t\t\t\tthis.direction = Direction.EAST;\r\n  \t\t\t\tthis.incX(moveAmount);\r\n  \t\t\t}\r\n  \t\t\telse if (node.row < fromRow) {\r\n  \t\t\t\tthis.direction = Direction.NORTH;\r\n  \t\t\t\tthis.incY(-moveAmount);\r\n  \t\t\t}\r\n  \t\t\telse if (node.row > fromRow) {\r\n  \t\t\t\tthis.direction = Direction.SOUTH;\r\n  \t\t\t\tthis.incY(moveAmount);\r\n  \t\t\t}\r\n\r\n  \t\t}\r\n\r\n  \t\t// Not at an intersection, so we should be able to keep going\r\n  \t\t// in our current direction.\r\n  \t\telse {\r\n  \t\t\tthis.continueInCurrentDirection(moveAmount);\r\n  \t\t}\r\n\r\n  \t\t// Switch over to scatter mode if it's time to do so.\r\n  \t\tif (game.playTime >= this.startScatteringTime) {\r\n        this.motionState = MotionState.SCATTERING;\r\n  \t\t}\r\n\r\n  \t}\r\n\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}